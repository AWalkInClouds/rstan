
R Under development (unstable) (2019-04-20 r76407) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "banocc"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('banocc')
Loading required package: rstan
Loading required package: ggplot2
Loading required package: StanHeaders
rstan (Version 2.18.2, GitRev: 2e1f913d3ca3)
For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores()).
To avoid recompilation of unchanged Stan programs, we recommend calling
rstan_options(auto_write = TRUE)
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("banocc_model")
> ### * banocc_model
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: banocc_model
> ### Title: The stan model used in the Bayesian fit
> ### Aliases: banocc_model
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(compositions_null)
> ## Not run: 
> ##D   compiled_banocc_model <- rstan::stan_model(model_code = banocc_model)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("get_banocc_output")
> ### * get_banocc_output
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_banocc_output
> ### Title: Takes a model fit from BAnOCC, evaluates convergence and
> ###   generates appropriate convergence metrics and inference
> ### Aliases: get_banocc_output
> 
> ### ** Examples
> 
> data(compositions_null)
>   ## Not run: 
> ##D     compiled_banocc_model <- rstan::stan_model(model_code=banocc_model)
> ##D     b_fit <- run_banocc(C=compositions_null,
> ##D                             compiled_banocc_model=compiled_banocc_model)
> ##D     b_output <- get_banocc_output(banoccfit=b_fit)
> ##D   
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("run_banocc")
> ### * run_banocc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: run_banocc
> ### Title: Runs BAnOCC to fit the model and generate appropriate
> ###   convergence metrics and inference.
> ### Aliases: run_banocc
> 
> ### ** Examples
> 
>   data(compositions_null)
>   ## Not run: 
> ##D     compiled_banocc_model <- rstan::stan_model(model_code=banocc_model)
> ##D     b_stanfit <- run_banocc(C=compositions_null,
> ##D                             compiled_banocc_model=compiled_banocc_model)
> ##D   
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.213 0.028 1.555 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
