
R Under development (unstable) (2019-04-20 r76407) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "broom.mixed"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('broom.mixed')
Registered S3 methods overwritten by 'broom.mixed':
  method         from 
  augment.lme    broom
  augment.merMod broom
  glance.lme     broom
  glance.merMod  broom
  glance.stanreg broom
  tidy.brmsfit   broom
  tidy.gamlss    broom
  tidy.lme       broom
  tidy.merMod    broom
  tidy.rjags     broom
  tidy.stanfit   broom
  tidy.stanreg   broom
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("augment.ranef.mer")
> ### * augment.ranef.mer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.ranef.mer
> ### Title: Augmentation for random effects (for caterpillar plots etc.)
> ### Aliases: augment.ranef.mer
> 
> ### ** Examples
> 
> if (require("lme4")) {
+    load(system.file("extdata","lme4_example.rda",package="broom.mixed"))
+    rr <- ranef(lmm1,condVar=TRUE)
+    aa <- broom::augment(rr)
+    ## Q-Q plot:
+    if (require(ggplot2) && require(dplyr)) {
+       g0 <- ggplot(aa,aes(estimate,qq,xmin=lb,xmax=ub))+
+           geom_errorbarh(height=0)+
+           geom_point()+facet_wrap(~variable,scale="free_x")
+       ## regular caterpillar plot:
+       g1 <- ggplot(aa,aes(estimate,level,xmin=lb,xmax=ub))+
+          geom_errorbarh(height=0)+
+          geom_vline(xintercept=0,lty=2)+
+          geom_point()+facet_wrap(~variable,scale="free_x")
+       ## emphasize extreme values
+       aa2 <- group_by(aa,grp,level)
+       aa3 <- mutate(aa2, keep=any(estimate/std.error>2))
+       ## Update caterpillar plot with extreme levels highlighted
+       ##  (highlight all groups with *either* extreme intercept *or*
+       ##   extreme slope)
+       ggplot(aa3, aes(estimate,level,xmin=lb,xmax=ub,colour=factor(keep)))+
+          geom_errorbarh(height=0)+
+          geom_vline(xintercept=0,lty=2)+
+          geom_point()+facet_wrap(~variable,scale="free_x")+
+          scale_colour_manual(values=c("black","red"), guide=FALSE)
+    }
+ }
Loading required package: lme4
Loading required package: Matrix
Loading required package: ggplot2
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’, ‘package:ggplot2’, ‘package:lme4’,
  ‘package:Matrix’

> nameEx("brms_tidiers")
> ### * brms_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: brms_tidiers
> ### Title: Tidying methods for a brms model
> ### Aliases: brms_tidiers tidy.brmsfit glance.brmsfit augment.brmsfit
> 
> ### ** Examples
> 
>  ## original model
>  ## Not run: 
> ##D     brms_crossedRE <- brm(mpg ~ wt + (1|cyl) + (1+wt|gear), data = mtcars,
> ##D            iter = 500, chains = 2)
> ##D  
> ## End(Not run)
>  if (require("brms")) {
+    ## load stored object
+    load(system.file("extdata", "brms_example.rda", package="broom.mixed"))
+ 
+    fit <- brms_crossedRE
+    tidy(fit)
+    tidy(fit, parameters = "^sd_", conf.int = FALSE)
+    tidy(fit, effects = "fixed", conf.method="HPDinterval")
+    tidy(fit, effects = "ran_vals")
+    tidy(fit, effects = "ran_pars", robust = TRUE)
+    # glance method
+    glance(fit)
+    ## this example will give a warning that it should be run with
+    ## reloo=TRUE; however, doing this will fail
+    ## because the \code{fit} object has been stripped down to save space
+    suppressWarnings(glance(fit, looic = TRUE, cores = 1))
+    head(augment(fit))
+ }
Loading required package: brms
Loading required package: Rcpp
Loading required package: ggplot2
Loading 'brms' package (version 2.7.0). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').
Run theme_set(theme_default()) to use the default bayesplot theme.
# A tibble: 6 x 3
  .fitted .se.fit .resid
    <dbl>   <dbl>  <dbl>
1    22.6    3.15 -1.72 
2    21.8    2.81 -0.554
3    26.3    3.08 -3.76 
4    19.8    3.06  2.12 
5    17.5    2.93  1.25 
6    18.6    3.20 -0.361
> 
> 
> 
> 
> cleanEx()

detaching ‘package:brms’, ‘package:ggplot2’, ‘package:Rcpp’

> nameEx("fixef.MCMCglmm")
> ### * fixef.MCMCglmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fixef.MCMCglmm
> ### Title: Extract fixed effects from an 'MCMCglmm' object
> ### Aliases: fixef.MCMCglmm
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   # a simple MCMCglmm model
> ##D   data(PlodiaPO)
> ##D   m <- MCMCglmm(PO ~ 1, random= ~ FSfamily, data=PlodiaPO, verbose=FALSE)
> ##D 
> ##D   # only extract average fixed effects
> ##D   fixef(m, use = "mean")
> ##D 
> ##D   # histogram of posterior samples of fixed effects
> ##D   hist(fixef(m))
> ##D   # matches the mean
> ##D   rowMeans(fixef(m))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("gamlss_tidiers")
> ### * gamlss_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gamlss_tidiers
> ### Title: Tidying methods for gamlss objects
> ### Aliases: gamlss_tidiers tidy.gamlss
> 
> ### ** Examples
> 
> if (requireNamespace("gamlss", quietly = TRUE) &&
+     requireNamespace("gamlss.data", quietly = TRUE)) {
+     data(abdom, package="gamlss.data")
+     ## Not run: 
+ ##D          mod <- gamlss(y~pb(x), sigma.fo=~pb(x), family=BCT,
+ ##D                        data=abdom, method=mixed(1,20))
+ ##D     
+ ## End(Not run)
+     ## load stored object
+     mod <- readRDS(system.file("extdata", "gamlss_example.rds",
+                    package="broom.mixed"))
+     tidy(mod)
+ }
# A tibble: 6 x 6
  parameter term        estimate std.error statistic   p.value
  <chr>     <chr>          <dbl>     <dbl>     <dbl>     <dbl>
1 mu        (Intercept) -64.4      1.33      -48.5   1.89e-210
2 mu        pb(x)        10.7      0.0578    185.    0.       
3 sigma     (Intercept)  -2.65     0.108     -24.5   8.09e- 93
4 sigma     pb(x)        -0.0100   0.00378    -2.65  8.29e-  3
5 nu        (Intercept)  -0.107    0.557      -0.192 8.48e-  1
6 tau       (Intercept)   2.49     0.301       8.28  7.77e- 16
> 
> 
> 
> 
> cleanEx()
> nameEx("glmmTMB_tidiers")
> ### * glmmTMB_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glmmTMB_tidiers
> ### Title: Tidying methods for glmmTMB models
> ### Aliases: glmmTMB_tidiers tidy.glmmTMB augment.glmmTMB glance.glmmTMB
> 
> ### ** Examples
> 
> if (require("glmmTMB") && require("lme4")) {
+     data("sleepstudy",package="lme4")
+     ## original model:
+     ## Not run: 
+ ##D         lmm1 <- glmmTMB(Reaction ~ Days + (Days | Subject), sleepstudy)
+ ##D     
+ ## End(Not run)
+     ## load stored object
+     load(system.file("extdata","glmmTMB_example.rda",package="broom.mixed"))
+     tidy(lmm1)
+     tidy(lmm1, effects = "fixed")
+     tidy(lmm1, effects = "fixed", conf.int=TRUE)
+     tidy(lmm1, effects = "fixed", conf.int=TRUE, conf.method="uniroot")
+     ## FIX: tidy(lmm1, effects = "ran_vals", conf.int=TRUE)
+     head(augment(lmm1, sleepstudy))
+     glance(lmm1)
+ 
+     ## original model:
+     ##  glmm1 <- glmmTMB(incidence/size ~ period + (1 | herd),
+     ##                  data = cbpp, family = binomial, weights=size)
+     tidy(glmm1)
+     tidy(glmm1, effects = "fixed")
+     head(augment(glmm1, cbpp))
+     head(augment(glmm1, cbpp, type.residuals="pearson"))
+     glance(glmm1)
+ }
Loading required package: glmmTMB
Loading required package: lme4
Loading required package: Matrix
# A tibble: 1 x 5
  sigma logLik   AIC   BIC df.residual
  <dbl>  <dbl> <dbl> <dbl>       <int>
1     1  -92.0  194.  204.          51
> 
> 
> 
> cleanEx()

detaching ‘package:lme4’, ‘package:Matrix’, ‘package:glmmTMB’

> nameEx("glmmadmb_tidiers")
> ### * glmmadmb_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glmmadmb_tidiers
> ### Title: Tidying methods for glmmADMB models
> ### Aliases: glmmadmb_tidiers glmmADMB_tidiers tidy.glmmadmb
> ###   augment.glmmadmb glance.glmmadmb
> 
> ### ** Examples
> 
> 
> if (require("glmmADMB") && require("lme4")) {
+     ## original model
+     ## Not run: 
+ ##D         data("sleepstudy", package="lme4")
+ ##D         lmm1 <- glmmadmb(Reaction ~ Days + (Days | Subject), sleepstudy,
+ ##D                          family="gaussian")
+ ##D     
+ ## End(Not run)
+     ## load stored object
+     load(system.file("extdata","glmmADMB_example.rda",package="broom.mixed"))
+     tidy(lmm1, effects = "fixed")
+     tidy(lmm1, effects = "fixed", conf.int=TRUE)
+     ## tidy(lmm1, effects = "fixed", conf.int=TRUE, conf.method="profile")
+     ## tidy(lmm1, effects = "ran_vals", conf.int=TRUE)
+     head(augment(lmm1, sleepstudy))
+     glance(lmm1)
+ 
+     glmm1 <- glmmadmb(cbind(incidence, size - incidence) ~ period + (1 | herd),
+                   data = cbpp, family = "binomial")
+     tidy(glmm1)
+     tidy(glmm1, effects = "fixed")
+     head(augment(glmm1, cbpp))
+     glance(glmm1)
+ 
+ }
Loading required package: glmmADMB
Loading required package: MASS

Attaching package: ‘glmmADMB’

The following object is masked from ‘package:MASS’:

    stepAIC

The following object is masked from ‘package:stats’:

    step

Loading required package: lme4
Loading required package: Matrix

Attaching package: ‘lme4’

The following object is masked from ‘package:glmmADMB’:

    VarCorr

matrix not pos definite in sparse choleski
# A tibble: 1 x 4
  logLik   AIC   BIC df.residual
   <dbl> <dbl> <dbl>       <dbl>
1  -92.0  194.  204.          51
> 
> 
> 
> cleanEx()

detaching ‘package:lme4’, ‘package:Matrix’, ‘package:glmmADMB’,
  ‘package:MASS’

> nameEx("lme4_tidiers")
> ### * lme4_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lme4_tidiers
> ### Title: Tidying methods for mixed effects models
> ### Aliases: lme4_tidiers tidy.merMod tidy.rlmerMod augment.merMod
> ###   glance.merMod
> 
> ### ** Examples
> 
> 
> if (require("lme4")) {
+     ## original model
+     ## Not run: 
+ ##D         lmm1 <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
+ ##D     
+ ## End(Not run)
+     ## load stored object
+     load(system.file("extdata", "lme4_example.rda", package="broom.mixed"))
+     tidy(lmm1)
+     tidy(lmm1, effects = "fixed")
+     tidy(lmm1, effects = "fixed", conf.int=TRUE)
+     tidy(lmm1, effects = "fixed", conf.int=TRUE, conf.method="profile")
+     ## lmm1_prof <- profile(lmm1) # generated by extdata/runexamples
+     tidy(lmm1, conf.int=TRUE, conf.method="profile", profile=lmm1_prof)
+     ## conditional modes (group-level deviations from population-level estimate)
+     tidy(lmm1, effects = "ran_vals", conf.int=TRUE)
+     ## coefficients (group-level estimates)
+     (rcoef1 <- tidy(lmm1, effects = "ran_coefs"))
+     ## reconstitute standard coefficient-by-level table
+     if (require(tidyr)) {
+        spread(rcoef1,key=term,value=estimate)
+     }
+     head(augment(lmm1, sleepstudy))
+     glance(lmm1)
+ 
+     glmm1 <- glmer(cbind(incidence, size - incidence) ~ period + (1 | herd),
+                   data = cbpp, family = binomial)
+     tidy(glmm1)
+     tidy(glmm1,exponentiate=TRUE)
+     tidy(glmm1, effects = "fixed")
+     ## suppress warning about influence.merMod
+     head(suppressWarnings(augment(glmm1, cbpp)))
+     glance(glmm1)
+ 
+     startvec <- c(Asym = 200, xmid = 725, scal = 350)
+     nm1 <- nlmer(circumference ~ SSlogis(age, Asym, xmid, scal) ~ Asym|Tree,
+                   Orange, start = startvec)
+     ## suppress warnings about var-cov matrix ...
+     op <- options(warn=-1)
+     tidy(nm1)
+     tidy(nm1, effects = "fixed")
+     options(op)
+     head(augment(nm1, Orange))
+     glance(nm1)
+     detach("package:lme4")
+ }
Loading required package: lme4
Loading required package: Matrix
Computing profile confidence intervals ...
Loading required package: tidyr

Attaching package: ‘tidyr’

The following object is masked from ‘package:Matrix’:

    expand

> if (require("lmerTest")) {
+    lmm1 <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
+    tidy(lmm1)
+    glance(lmm1)
+    detach("package:lmerTest")  # clean up
+ }
Loading required package: lmerTest
Loading required package: lme4

Attaching package: ‘lmerTest’

The following object is masked from ‘package:lme4’:

    lmer

The following object is masked from ‘package:stats’:

    step

> 
> 
> 
> cleanEx()

detaching ‘package:lme4’, ‘package:tidyr’, ‘package:Matrix’

> nameEx("mcmc_tidiers")
> ### * mcmc_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.MCMCglmm
> ### Title: Tidying methods for MCMC (Stan, JAGS, etc.) fits
> ### Aliases: tidy.MCMCglmm mcmc_tidiers tidyMCMC tidy.rjags tidy.stanfit
> ###   tidy.mcmc tidy.mcmc.list
> 
> ### ** Examples
> 
> if (require("MCMCglmm")) {
+   ## original model
+   ## Not run: 
+ ##D       mm0 <- MCMCglmm(Reaction ~ Days,
+ ##D                  random = ~Subject, data = sleepstudy,
+ ##D                  nitt=4000,
+ ##D                  pr = TRUE
+ ##D              )
+ ##D    
+ ## End(Not run)
+    ## load stored object
+    load(system.file("extdata","MCMCglmm_example.rda",
+                                      package="broom.mixed"))
+    tidy(mm0)
+    tidy(mm1)
+    tidy(mm2)
+    tail(tidy(mm0,effects="ran_vals"))
+ }
Loading required package: MCMCglmm
Loading required package: Matrix
Loading required package: coda
Loading required package: ape
# A tibble: 6 x 6
  effect   group   level term        estimate std.error
  <chr>    <chr>   <chr> <chr>          <dbl>     <dbl>
1 ran_vals Subject 351   (Intercept)   -10.6       13.2
2 ran_vals Subject 352   (Intercept)    36.5       14.7
3 ran_vals Subject 369   (Intercept)     9.42      14.4
4 ran_vals Subject 370   (Intercept)    -5.89      13.6
5 ran_vals Subject 371   (Intercept)    -3.71      13.5
6 ran_vals Subject 372   (Intercept)    19.4       14.3
> 
> # Using example from "RStan Getting Started"
> # https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started
> 
> model_file <- system.file("extdata", "8schools.stan", package = "broom.mixed")
> schools_dat <- list(J = 8,
+                     y = c(28,  8, -3,  7, -1,  1, 18, 12),
+                     sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
> ## original model
> ## Not run: 
> ##D     set.seed(2015)
> ##D     rstan_example <- rstan::stan(file = model_file, data = schools_dat,
> ##D                          iter = 1000, chains = 2, save_dso = FALSE)
> ## End(Not run)
> if (require(rstan)) {
+    ## load stored object
+    rstan_example <- readRDS(system.file("extdata", "rstan_example.rds", package = "broom.mixed"))
+    tidy(rstan_example)
+    tidy(rstan_example, conf.int = TRUE, pars = "theta")
+    td_mean <- tidy(rstan_example, conf.int = TRUE)
+    td_median <- tidy(rstan_example, conf.int = TRUE, robust = TRUE)
+ 
+   if (require(dplyr) && require(ggplot2)) {
+     tds <- rbind(mutate(td_mean, method = "mean"),
+              mutate(td_median, method = "median")) %>%
+        mutate(type=ifelse(grepl("^theta",term),"theta",
+             ifelse(grepl("^eta",term),"eta",
+                   "other")))
+ 
+      ggplot(tds, aes(estimate, term)) +
+       geom_errorbarh(aes(xmin = conf.low, xmax = conf.high),height=0) +
+       geom_point(aes(color = method))+
+       facet_wrap(~type,scale="free",ncol=1)
+  } ## require(dplyr,ggplot2)
+ } ## require(rstan)
Loading required package: rstan
Loading required package: ggplot2
Loading required package: StanHeaders
rstan (Version 2.18.2, GitRev: 2e1f913d3ca3)
For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores()).
To avoid recompilation of unchanged Stan programs, we recommend calling
rstan_options(auto_write = TRUE)

Attaching package: ‘rstan’

The following object is masked from ‘package:coda’:

    traceplot

Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> if (require(R2jags)) {
+    ## see help("jags",package="R2jags")
+    ## and  example("jags",package="R2jags")
+    ## for details
+    ## load stored object
+    R2jags_example <- readRDS(system.file("extdata", "R2jags_example.rds", package = "broom.mixed"))
+    tidy(R2jags_example)
+    tidy(R2jags_example, conf.int=TRUE, conf.method="quantile")
+ }
Loading required package: R2jags
Loading required package: rjags
Linked to JAGS 4.2.0
Loaded modules: basemod,bugs

Attaching package: ‘R2jags’

The following object is masked from ‘package:rstan’:

    traceplot

The following object is masked from ‘package:coda’:

    traceplot

# A tibble: 10 x 5
   term     estimate std.error conf.low conf.high
   <chr>       <dbl>     <dbl>    <dbl>     <dbl>
 1 mu        -0.771      1.37   -1.70        1.85
 2 sigma      0.764      0.535   0.0360      1.44
 3 theta[1]  -0.211      1.62   -1.68        2.92
 4 theta[2]  -0.0995     1.65   -2.09        2.70
 5 theta[3]  -0.727      1.17   -1.76        1.86
 6 theta[4]  -1.62       1.24   -1.78        1.71
 7 theta[5]  -0.866      1.38   -1.71        2.18
 8 theta[6]  -0.472      1.70   -1.71        2.84
 9 theta[7]  -1.04       1.57   -1.72        2.41
10 theta[8]  -0.746      1.34   -2.46        1.58
> 
> 
> 
> 
> cleanEx()

detaching ‘package:R2jags’, ‘package:rjags’, ‘package:dplyr’,
  ‘package:rstan’, ‘package:StanHeaders’, ‘package:ggplot2’,
  ‘package:MCMCglmm’, ‘package:ape’, ‘package:coda’, ‘package:Matrix’

> nameEx("nlme_tidiers")
> ### * nlme_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlme_tidiers
> ### Title: Tidying methods for mixed effects models
> ### Aliases: nlme_tidiers tidy.lme augment.lme glance.lme tidy.gls
> 
> ### ** Examples
> 
> 
> if (require("nlme") && require("lme4")) {
+     data("sleepstudy", package="lme4")
+     ## original model
+     ## Not run: 
+ ##D          lmm1 <- lme(Reaction ~ Days, random=~ Days|Subject, sleepstudy)
+ ##D     
+ ## End(Not run)
+     ## load stored object
+     load(system.file("extdata","nlme_example.rda", package="broom.mixed"))
+     tidy(lmm1)
+     tidy(lmm1, effects = "fixed")
+     tidy(lmm1, conf.int = TRUE)
+     head(augment(lmm1, sleepstudy))
+     glance(lmm1)
+ 
+     startvec <- c(Asym = 200, xmid = 725, scal = 350)
+     nm1 <- nlme(circumference ~ SSlogis(age, Asym, xmid, scal),
+                   data = Orange,
+                   fixed = Asym + xmid + scal ~1,
+                   random = Asym ~1,
+                   start = startvec)
+     tidy(nm1)
+     tidy(nm1, effects = "fixed")
+     head(augment(nm1, Orange))
+     glance(nm1)
+ 
+     gls1 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary,
+                          correlation = corAR1(form = ~ 1 | Mare))
+     tidy(gls1)
+     glance(gls1)
+ }
Loading required package: nlme
Loading required package: lme4
Loading required package: Matrix

Attaching package: ‘lme4’

The following object is masked from ‘package:nlme’:

    lmList

Warning in tidy.lme(nm1) :
  ran_pars not yet implemented for nonlinear models
# A tibble: 1 x 6
  sigma    df logLik   AIC   BIC df.residual
  <dbl> <int>  <dbl> <dbl> <dbl>       <int>
1  4.62     3  -781. 1571. 1590.         305
> 
> 
> 
> 
> cleanEx()

detaching ‘package:lme4’, ‘package:Matrix’, ‘package:nlme’

> nameEx("paramNamesMCMCglmm")
> ### * paramNamesMCMCglmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: paramNamesMCMCglmm
> ### Title: Extract the parameter names from an 'MCMCglmm' object
> ### Aliases: paramNamesMCMCglmm
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   # a simple MCMCglmm model
> ##D   if (require(MCMCglmm)) {
> ##D      data(PlodiaPO)
> ##D      m <- MCMCglmm(PO ~ 1, random = ~ FSfamily, data = PlodiaPO, verbose=FALSE, pr=TRUE)
> ##D   }
> ##D   # extract the parameter names
> ##D   paramNamesMCMCglmm(m)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ranef.MCMCglmm")
> ### * ranef.MCMCglmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ranef.MCMCglmm
> ### Title: Extract random effects from an 'MCMCglmm' object
> ### Aliases: ranef.MCMCglmm
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   # a simple MCMCglmm model
> ##D   data(PlodiaPO)
> ##D   m <- MCMCglmm(PO ~ 1, random= ~ FSfamily, data=PlodiaPO, pr=TRUE, verbose=FALSE)
> ##D 
> ##D   # only extract average fixed effects
> ##D   head(ranef(m, use = "mean"))
> ##D 
> ##D   # histogram of posterior samples of fixed effects
> ##D   hist(ranef(m)[1, ])
> ##D   # matches the mean
> ##D   rowMeans(ranef(m)[1:6, ])
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ranefLevels")
> ### * ranefLevels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ranefLevels
> ### Title: Extract the levels of factors used for random effects in
> ###   'MCMCglmm' objects
> ### Aliases: ranefLevels
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   # a simple MCMCglmm model
> ##D   data(PlodiaPO)
> ##D   m <- MCMCglmm(PO ~ 1, random = ~ FSfamily, data = PlodiaPO, verbose=FALSE)
> ##D 
> ##D   # extract the random effects levels
> ##D   ranefLevels(m, PlodiaPO)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rstanarm_tidiers")
> ### * rstanarm_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rstanarm_tidiers
> ### Title: Tidying methods for an rstanarm model
> ### Aliases: rstanarm_tidiers tidy.stanreg glance.stanreg
> 
> ### ** Examples
> 
> 
> if (require("rstanarm")) {
+ ## Not run: 
+ ##D #'     ## original model
+ ##D     fit <- stan_glmer(mpg ~ wt + (1|cyl) + (1+wt|gear), data = mtcars,
+ ##D                       iter = 300, chains = 2)
+ ##D   
+ ## End(Not run)
+ ## load example data
+ fit <- readRDS(system.file("extdata", "rstanarm_example.rds", package="broom.mixed"))
+ 
+   # non-varying ("population") parameters
+   tidy(fit, conf.int = TRUE, prob = 0.5)
+   tidy(fit, conf.int = TRUE, conf.method = "HPDinterval", prob = 0.5)
+ 
+   # hierarchical sd & correlation parameters
+   tidy(fit, effects = "ran_pars")
+ 
+   # group-specific deviations from "population" parameters
+   tidy(fit, effects = "ran_vals")
+ 
+   # glance method
+    glance(fit)
+   ## Not run: 
+ ##D      glance(fit, looic = TRUE, cores = 1)
+ ##D   
+ ## End(Not run)
+ } ## if require("rstanarm")
Loading required package: rstanarm
Loading required package: Rcpp
rstanarm (Version 2.18.9, packaged: )
- Do not expect the default priors to remain the same in future rstanarm versions.
Thus, R scripts should specify priors explicitly, even if they are just the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores())
- bayesplot theme set to bayesplot::theme_default()
   * Does _not_ affect other ggplot2 plots
   * See ?bayesplot_theme_set for details on theme setting
# A tibble: 1 x 4
  algorithm   pss  nobs sigma
  <chr>     <dbl> <int> <dbl>
1 sampling    100    32  2.51
> 
> 
> 
> cleanEx()

detaching ‘package:rstanarm’, ‘package:Rcpp’

> nameEx("stdranef")
> ### * stdranef
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stdranef
> ### Title: Extract standard deviation of "random" effects from an
> ###   'MCMCglmm' object
> ### Aliases: stdranef
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   # a simple MCMCglmm model
> ##D   data(PlodiaPO)
> ##D   PlodiaPO <- within(PlodiaPO, {
> ##D     PO2 <- cut(PO, quantile(PO, c(0, .33, .66, 1)))
> ##D     plate <- factor(plate)
> ##D   })
> ##D 
> ##D   m <- MCMCglmm(PO2 ~ 1, random = ~ FSfamily + plate,
> ##D     family = "ordinal", data = PlodiaPO,
> ##D     prior = list(
> ##D       R = list(V = 1, fix = 1),
> ##D       G = list(
> ##D         G1 = list(V = 1, nu = .002),
> ##D         G2 = list(V = 1, nu = .002)
> ##D       )
> ##D     ), verbose=FALSE, thin=1, pr=TRUE)
> ##D 
> ##D   # summary of the model
> ##D   summary(m)
> ##D 
> ##D   # examples of extracting standard deviations of
> ##D   # different random effects on the linear predictor metric
> ##D   # or after transformation to probabilities (only for ordinal)
> ##D   stdranef(m, which = list(1), type = "lp")
> ##D   stdranef(m, which = list(2), type = "lp")
> ##D   stdranef(m, which = list(1, 2, c(1, 2)), type = "lp")
> ##D   stdranef(m, type = "lp")
> ##D 
> ##D   ## error because no 3rd random effect
> ##D   #stdranef(m, which = list(1, 2, 3), type = "lp")
> ##D 
> ##D   stdranef(m, which = list("FSfamily", "plate"), type = "lp")
> ##D 
> ##D   # mean standard deviations on the probability metric
> ##D   # also the full distributions, if desired in the Data slot.
> ##D   res <- stdranef(m, type = "response")
> ##D   res$M # means
> ##D   hist(res$Data$FSfamily[, 1]) # histogram
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("tidy.TMB")
> ### * tidy.TMB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.TMB
> ### Title: Tidying methods for TMB models
> ### Aliases: tidy.TMB
> 
> ### ** Examples
> 
> if (require("TMB")) {
+     runExample("simple",thisR=TRUE)
+     class(obj) <- "TMB"
+     tidy(obj,conf.int=TRUE,conf.method="wald")
+     tidy(obj,conf.int=TRUE,conf.method="uniroot")
+ }
Loading required package: TMB
Running example simple 

> require(TMB)

> dyn.load(dynlib("simple"))

> set.seed(123)

> y <- rep(1900:2010, each = 2)

> year <- factor(y)

> quarter <- factor(rep(1:4, length.out = length(year)))

> period <- factor((y > mean(y)) + 1)

> B <- model.matrix(~year + quarter - 1)

> A <- model.matrix(~period - 1)

> B <- as(B, "dgTMatrix")

> A <- as(A, "dgTMatrix")

> u <- rnorm(ncol(B))

> beta <- rnorm(ncol(A)) * 100

> eps <- rnorm(nrow(B), sd = 1)

> x <- as.numeric(A %*% beta + B %*% u + eps)

> obj <- MakeADFun(data = list(x = x, B = B, A = A), 
+     parameters = list(u = u * 0, beta = beta * 0, logsdu = 1, 
+         logsd0 = 1), random = .... [TRUNCATED] 

> opt <- nlminb(obj$par, obj$fn, obj$gr)
   type   term    estimate std.error    conf.low   conf.high
1 fixed   beta 52.01370232 0.2016859 51.61697668 52.41243221
2 fixed beta.1 30.24058534 0.2018362 29.84355152 30.63959202
3 fixed logsdu -0.15777145 0.1201260 -0.42616303  0.06173243
4 fixed logsd0  0.03326068 0.0667396 -0.09247084  0.16907728
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:TMB’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  10.164 0.209 11.306 0.772 0.122 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
