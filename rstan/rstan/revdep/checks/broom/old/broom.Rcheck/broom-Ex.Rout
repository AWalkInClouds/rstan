
R Under development (unstable) (2019-04-20 r76407) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "broom"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('broom')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("argument_glossary")
> ### * argument_glossary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: argument_glossary
> ### Title: Allowed argument names in tidiers
> ### Aliases: argument_glossary
> ### Keywords: datasets
> 
> ### ** Examples
> 
> argument_glossary
# A tibble: 55 x 3
   method  argument    description
   <chr>   <chr>       <chr>      
 1 glance  ...         ""         
 2 glance  deviance    ""         
 3 glance  diagnostics ""         
 4 glance  looic       ""         
 5 glance  mcmc        ""         
 6 glance  object      ""         
 7 glance  test        ""         
 8 glance  x           ""         
 9 augment ...         ""         
10 augment data        ""         
# â€¦ with 45 more rows
> 
> 
> 
> cleanEx()
> nameEx("augment.decomposed.ts")
> ### * augment.decomposed.ts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.decomposed.ts
> ### Title: Augment data with information from a(n) decomposed.ts object
> ### Aliases: augment.decomposed.ts decompose_tidiers
> 
> ### ** Examples
> 
> 
> # Time series of temperatures in Nottingham, 1920-1939:
> nottem
      Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec
1920 40.6 40.8 44.4 46.7 54.1 58.5 57.7 56.4 54.3 50.5 42.9 39.8
1921 44.2 39.8 45.1 47.0 54.1 58.7 66.3 59.9 57.0 54.2 39.7 42.8
1922 37.5 38.7 39.5 42.1 55.7 57.8 56.8 54.3 54.3 47.1 41.8 41.7
1923 41.8 40.1 42.9 45.8 49.2 52.7 64.2 59.6 54.4 49.2 36.3 37.6
1924 39.3 37.5 38.3 45.5 53.2 57.7 60.8 58.2 56.4 49.8 44.4 43.6
1925 40.0 40.5 40.8 45.1 53.8 59.4 63.5 61.0 53.0 50.0 38.1 36.3
1926 39.2 43.4 43.4 48.9 50.6 56.8 62.5 62.0 57.5 46.7 41.6 39.8
1927 39.4 38.5 45.3 47.1 51.7 55.0 60.4 60.5 54.7 50.3 42.3 35.2
1928 40.8 41.1 42.8 47.3 50.9 56.4 62.2 60.5 55.4 50.2 43.0 37.3
1929 34.8 31.3 41.0 43.9 53.1 56.9 62.5 60.3 59.8 49.2 42.9 41.9
1930 41.6 37.1 41.2 46.9 51.2 60.4 60.1 61.6 57.0 50.9 43.0 38.8
1931 37.1 38.4 38.4 46.5 53.5 58.4 60.6 58.2 53.8 46.6 45.5 40.6
1932 42.4 38.4 40.3 44.6 50.9 57.0 62.1 63.5 56.3 47.3 43.6 41.8
1933 36.2 39.3 44.5 48.7 54.2 60.8 65.5 64.9 60.1 50.2 42.1 35.8
1934 39.4 38.2 40.4 46.9 53.4 59.6 66.5 60.4 59.2 51.2 42.8 45.8
1935 40.0 42.6 43.5 47.1 50.0 60.5 64.6 64.0 56.8 48.6 44.2 36.4
1936 37.3 35.0 44.0 43.9 52.7 58.6 60.0 61.1 58.1 49.6 41.6 41.3
1937 40.8 41.0 38.4 47.4 54.1 58.6 61.4 61.8 56.3 50.9 41.4 37.1
1938 42.1 41.2 47.3 46.6 52.4 59.0 59.6 60.4 57.0 50.7 47.8 39.2
1939 39.4 40.9 42.4 47.8 52.4 58.0 60.7 61.8 58.2 46.7 46.6 37.8
> 
> # Perform seasonal decomposition on the data with both decompose
> # and stl:
> d1 <- stats::decompose(nottem)
> d2 <- stats::stl(nottem, s.window = "periodic", robust = TRUE)
> 
> # Compare the original series to its decompositions.
> 
> cbind(broom::tidy(nottem), broom::augment(d1),
+       broom::augment(d2))
       index value  .seasonal   .trend   .remainder .seasadj  .seasonal
1   1920.000  40.6 -9.3393640       NA           NA 49.93936 -9.3419811
2   1920.083  40.8 -9.8998904       NA           NA 50.69989 -9.5256227
3   1920.167  44.4 -6.9466009       NA           NA 51.34660 -7.0008077
4   1920.250  46.7 -2.7573465       NA           NA 49.45735 -2.8175429
5   1920.333  54.1  3.4533991       NA           NA 50.64660  3.3639836
6   1920.417  58.5  8.9865132       NA           NA 49.51349  9.0952310
7   1920.500  57.7 12.9672149 49.04167 -4.308881579 44.73279 12.8624908
8   1920.583  56.4 11.4591009 49.15000 -4.209100877 44.94090 11.7116742
9   1920.667  54.3  7.4001096 49.13750 -2.237609649 46.89989  7.4288506
10  1920.750  50.5  0.6547149 49.17917  0.666118421 49.84529  0.3474728
11  1920.833  42.9 -6.6176535 49.19167  0.325986842 49.51765 -6.5449727
12  1920.917  39.8 -9.3601974 49.20000 -0.039802632 49.16020 -9.5787757
13  1921.000  44.2 -9.3393640 49.56667  3.972697368 53.53936 -9.3419811
14  1921.083  39.8 -9.8998904 50.07083 -0.370942982 49.69989 -9.5256227
15  1921.167  45.1 -6.9466009 50.32917  1.717434211 52.04660 -7.0008077
16  1921.250  47.0 -2.7573465 50.59583 -0.838486842 49.75735 -2.8175429
17  1921.333  54.1  3.4533991 50.61667  0.029934211 50.64660  3.3639836
18  1921.417  58.7  8.9865132 50.60833 -0.894846491 49.71349  9.0952310
19  1921.500  66.3 12.9672149 50.45417  2.878618421 53.33279 12.8624908
20  1921.583  59.9 11.4591009 50.12917 -1.688267544 48.44090 11.7116742
21  1921.667  57.0  7.4001096 49.85000 -0.250109649 49.59989  7.4288506
22  1921.750  54.2  0.6547149 49.41250  4.132785088 53.54529  0.3474728
23  1921.833  39.7 -6.6176535 49.27500 -2.957346491 46.31765 -6.5449727
24  1921.917  42.8 -9.3601974 49.30417  2.856030702 52.16020 -9.5787757
25  1922.000  37.5 -9.3393640 48.87083 -2.031469298 46.83936 -9.3419811
26  1922.083  38.7 -9.8998904 48.24167  0.358223684 48.59989 -9.5256227
27  1922.167  39.5 -6.9466009 47.89583 -1.449232456 46.44660 -7.0008077
28  1922.250  42.1 -2.7573465 47.48750 -2.630153509 44.85735 -2.8175429
29  1922.333  55.7  3.4533991 47.27917  4.967434211 52.24660  3.3639836
30  1922.417  57.8  8.9865132 47.32083  1.492653509 48.81349  9.0952310
31  1922.500  56.8 12.9672149 47.45417 -3.621381579 43.83279 12.8624908
32  1922.583  54.3 11.4591009 47.69167 -4.850767544 42.84090 11.7116742
33  1922.667  54.3  7.4001096 47.89167 -0.991776316 46.89989  7.4288506
34  1922.750  47.1  0.6547149 48.18750 -1.742214912 46.44529  0.3474728
35  1922.833  41.8 -6.6176535 48.07083  0.346820175 48.41765 -6.5449727
36  1922.917  41.7 -9.3601974 47.58750  3.472697368 51.06020 -9.5787757
37  1923.000  41.8 -9.3393640 47.68333  3.456030702 51.13936 -9.3419811
38  1923.083  40.1 -9.8998904 48.21250  1.787390351 49.99989 -9.5256227
39  1923.167  42.9 -6.9466009 48.43750  1.409100877 49.84660 -7.0008077
40  1923.250  45.8 -2.7573465 48.52917  0.028179825 48.55735 -2.8175429
41  1923.333  49.2  3.4533991 48.38750 -2.640899123 45.74660  3.3639836
42  1923.417  52.7  8.9865132 47.98750 -4.274013158 43.71349  9.0952310
43  1923.500  64.2 12.9672149 47.71250  3.520285088 51.23279 12.8624908
44  1923.583  59.6 11.4591009 47.50000  0.640899123 48.14090 11.7116742
45  1923.667  54.4  7.4001096 47.20000 -0.200109649 46.99989  7.4288506
46  1923.750  49.2  0.6547149 46.99583  1.549451754 48.54529  0.3474728
47  1923.833  36.3 -6.6176535 47.15000 -4.232346491 42.91765 -6.5449727
48  1923.917  37.6 -9.3601974 47.52500 -0.564802632 46.96020 -9.5787757
49  1924.000  39.3 -9.3393640 47.59167  1.047697368 48.63936 -9.3419811
50  1924.083  37.5 -9.8998904 47.39167  0.008223684 47.39989 -9.5256227
51  1924.167  38.3 -6.9466009 47.41667 -2.170065789 45.24660 -7.0008077
52  1924.250  45.5 -2.7573465 47.52500  0.732346491 48.25735 -2.8175429
53  1924.333  53.2  3.4533991 47.88750  1.859100877 49.74660  3.3639836
54  1924.417  57.7  8.9865132 48.47500  0.238486842 48.71349  9.0952310
55  1924.500  60.8 12.9672149 48.75417 -0.921381579 47.83279 12.8624908
56  1924.583  58.2 11.4591009 48.90833 -2.167434211 46.74090 11.7116742
57  1924.667  56.4  7.4001096 49.13750 -0.137609649 48.99989  7.4288506
58  1924.750  49.8  0.6547149 49.22500 -0.079714912 49.14529  0.3474728
59  1924.833  44.4 -6.6176535 49.23333  1.784320175 51.01765 -6.5449727
60  1924.917  43.6 -9.3601974 49.32917  3.631030702 52.96020 -9.5787757
61  1925.000  40.0 -9.3393640 49.51250 -0.173135965 49.33936 -9.3419811
62  1925.083  40.5 -9.8998904 49.74167  0.658223684 50.39989 -9.5256227
63  1925.167  40.8 -6.9466009 49.71667 -1.970065789 47.74660 -7.0008077
64  1925.250  45.1 -2.7573465 49.58333 -1.725986842 47.85735 -2.8175429
65  1925.333  53.8  3.4533991 49.32917  1.017434211 50.34660  3.3639836
66  1925.417  59.4  8.9865132 48.76250  1.650986842 50.41349  9.0952310
67  1925.500  63.5 12.9672149 48.42500  2.107785088 50.53279 12.8624908
68  1925.583  61.0 11.4591009 48.51250  1.028399123 49.54090 11.7116742
69  1925.667  53.0  7.4001096 48.74167 -3.141776316 45.59989  7.4288506
70  1925.750  50.0  0.6547149 49.00833  0.336951754 49.34529  0.3474728
71  1925.833  38.1 -6.6176535 49.03333 -4.315679825 44.71765 -6.5449727
72  1925.917  36.3 -9.3601974 48.79167 -3.131469298 45.66020 -9.5787757
73  1926.000  39.2 -9.3393640 48.64167 -0.102302632 48.53936 -9.3419811
74  1926.083  43.4 -9.8998904 48.64167  4.658223684 53.29989 -9.5256227
75  1926.167  43.4 -6.9466009 48.87083  1.475767544 50.34660 -7.0008077
76  1926.250  48.9 -2.7573465 48.92083  2.736513158 51.65735 -2.8175429
77  1926.333  50.6  3.4533991 48.92917 -1.782565789 47.14660  3.3639836
78  1926.417  56.8  8.9865132 49.22083 -1.407346491 47.81349  9.0952310
79  1926.500  62.5 12.9672149 49.37500  0.157785088 49.53279 12.8624908
80  1926.583  62.0 11.4591009 49.17917  1.361732456 50.54090 11.7116742
81  1926.667  57.5  7.4001096 49.05417  1.045723684 50.09989  7.4288506
82  1926.750  46.7  0.6547149 49.05833 -3.013048246 46.04529  0.3474728
83  1926.833  41.6 -6.6176535 49.02917 -0.811513158 48.21765 -6.5449727
84  1926.917  39.8 -9.3601974 49.00000  0.160197368 49.16020 -9.5787757
85  1927.000  39.4 -9.3393640 48.83750 -0.098135965 48.73936 -9.3419811
86  1927.083  38.5 -9.8998904 48.68750 -0.287609649 48.39989 -9.5256227
87  1927.167  45.3 -6.9466009 48.50833  3.738267544 52.24660 -7.0008077
88  1927.250  47.1 -2.7573465 48.54167  1.315679825 49.85735 -2.8175429
89  1927.333  51.7  3.4533991 48.72083 -0.474232456 48.24660  3.3639836
90  1927.417  55.0  8.9865132 48.55833 -2.544846491 46.01349  9.0952310
91  1927.500  60.4 12.9672149 48.42500 -0.992214912 47.43279 12.8624908
92  1927.583  60.5 11.4591009 48.59167  0.449232456 49.04090 11.7116742
93  1927.667  54.7  7.4001096 48.59583 -1.295942982 47.29989  7.4288506
94  1927.750  50.3  0.6547149 48.50000  1.145285088 49.64529  0.3474728
95  1927.833  42.3 -6.6176535 48.47500  0.442653509 48.91765 -6.5449727
96  1927.917  35.2 -9.3601974 48.50000 -3.939802632 44.56020 -9.5787757
97  1928.000  40.8 -9.3393640 48.63333  1.506030702 50.13936 -9.3419811
98  1928.083  41.1 -9.8998904 48.70833  2.291557018 50.99989 -9.5256227
99  1928.167  42.8 -6.9466009 48.73750  1.009100877 49.74660 -7.0008077
100 1928.250  47.3 -2.7573465 48.76250  1.294846491 50.05735 -2.8175429
101 1928.333  50.9  3.4533991 48.78750 -1.340899123 47.44660  3.3639836
102 1928.417  56.4  8.9865132 48.90417 -1.490679825 47.41349  9.0952310
103 1928.500  62.2 12.9672149 48.74167  0.491118421 49.23279 12.8624908
104 1928.583  60.5 11.4591009 48.08333  0.957565789 49.04090 11.7116742
105 1928.667  55.4  7.4001096 47.60000  0.399890351 47.99989  7.4288506
106 1928.750  50.2  0.6547149 47.38333  2.161951754 49.54529  0.3474728
107 1928.833  43.0 -6.6176535 47.33333  2.284320175 49.61765 -6.5449727
108 1928.917  37.3 -9.3601974 47.44583 -0.785635965 46.66020 -9.5787757
109 1929.000  34.8 -9.3393640 47.47917 -3.339802632 44.13936 -9.3419811
110 1929.083  31.3 -9.8998904 47.48333 -6.283442982 41.19989 -9.5256227
111 1929.167  41.0 -6.9466009 47.65833  0.288267544 47.94660 -7.0008077
112 1929.250  43.9 -2.7573465 47.80000 -1.142653509 46.65735 -2.8175429
113 1929.333  53.1  3.4533991 47.75417  1.892434211 49.64660  3.3639836
114 1929.417  56.9  8.9865132 47.94167 -0.028179825 47.91349  9.0952310
115 1929.500  62.5 12.9672149 48.41667  1.116118421 49.53279 12.8624908
116 1929.583  60.3 11.4591009 48.94167 -0.100767544 48.84090 11.7116742
117 1929.667  59.8  7.4001096 49.19167  3.208223684 52.39989  7.4288506
118 1929.750  49.2  0.6547149 49.32500 -0.779714912 48.54529  0.3474728
119 1929.833  42.9 -6.6176535 49.37083  0.146820175 49.51765 -6.5449727
120 1929.917  41.9 -9.3601974 49.43750  1.822697368 51.26020 -9.5787757
121 1930.000  41.6 -9.3393640 49.48333  1.456030702 50.93936 -9.3419811
122 1930.083  37.1 -9.8998904 49.43750 -2.437609649 46.99989 -9.5256227
123 1930.167  41.2 -6.9466009 49.37500 -1.228399123 48.14660 -7.0008077
124 1930.250  46.9 -2.7573465 49.32917  0.328179825 49.65735 -2.8175429
125 1930.333  51.2  3.4533991 49.40417 -1.657565789 47.74660  3.3639836
126 1930.417  60.4  8.9865132 49.27917  2.134320175 51.41349  9.0952310
127 1930.500  60.1 12.9672149 48.96250 -1.829714912 47.13279 12.8624908
128 1930.583  61.6 11.4591009 48.82917  1.311732456 50.14090 11.7116742
129 1930.667  57.0  7.4001096 48.76667  0.833223684 49.59989  7.4288506
130 1930.750  50.9  0.6547149 48.63333  1.611951754 50.24529  0.3474728
131 1930.833  43.0 -6.6176535 48.71250  0.905153509 49.61765 -6.5449727
132 1930.917  38.8 -9.3601974 48.72500 -0.564802632 48.16020 -9.5787757
133 1931.000  37.1 -9.3393640 48.66250 -2.223135965 46.43936 -9.3419811
134 1931.083  38.4 -9.8998904 48.54167 -0.241776316 48.29989 -9.5256227
135 1931.167  38.4 -6.9466009 48.26667 -2.920065789 45.34660 -7.0008077
136 1931.250  46.5 -2.7573465 47.95417  1.303179825 49.25735 -2.8175429
137 1931.333  53.5  3.4533991 47.87917  2.167434211 50.04660  3.3639836
138 1931.417  58.4  8.9865132 48.05833  1.355153509 49.41349  9.0952310
139 1931.500  60.6 12.9672149 48.35417 -0.721381579 47.63279 12.8624908
140 1931.583  58.2 11.4591009 48.57500 -1.834100877 46.74090 11.7116742
141 1931.667  53.8  7.4001096 48.65417 -2.254276316 46.39989  7.4288506
142 1931.750  46.6  0.6547149 48.65417 -2.708881579 45.94529  0.3474728
143 1931.833  45.5 -6.6176535 48.46667  3.650986842 52.11765 -6.5449727
144 1931.917  40.6 -9.3601974 48.30000  1.660197368 49.96020 -9.5787757
145 1932.000  42.4 -9.3393640 48.30417  3.435197368 51.73936 -9.3419811
146 1932.083  38.4 -9.8998904 48.58750 -0.287609649 48.29989 -9.5256227
147 1932.167  40.3 -6.9466009 48.91250 -1.665899123 47.24660 -7.0008077
148 1932.250  44.6 -2.7573465 49.04583 -1.688486842 47.35735 -2.8175429
149 1932.333  50.9  3.4533991 48.99583 -1.549232456 47.44660  3.3639836
150 1932.417  57.0  8.9865132 48.96667 -0.953179825 48.01349  9.0952310
151 1932.500  62.1 12.9672149 48.75833  0.374451754 49.13279 12.8624908
152 1932.583  63.5 11.4591009 48.53750  3.503399123 52.04090 11.7116742
153 1932.667  56.3  7.4001096 48.75000  0.149890351 48.89989  7.4288506
154 1932.750  47.3  0.6547149 49.09583 -2.450548246 46.64529  0.3474728
155 1932.833  43.6 -6.6176535 49.40417  0.813486842 50.21765 -6.5449727
156 1932.917  41.8 -9.3601974 49.70000  1.460197368 51.16020 -9.5787757
157 1933.000  36.2 -9.3393640 50.00000 -4.460635965 45.53936 -9.3419811
158 1933.083  39.3 -9.8998904 50.20000 -1.000109649 49.19989 -9.5256227
159 1933.167  44.5 -6.9466009 50.41667  1.029934211 51.44660 -7.0008077
160 1933.250  48.7 -2.7573465 50.69583  0.761513158 51.45735 -2.8175429
161 1933.333  54.2  3.4533991 50.75417 -0.007565789 50.74660  3.3639836
162 1933.417  60.8  8.9865132 50.44167  1.371820175 51.81349  9.0952310
163 1933.500  65.5 12.9672149 50.32500  2.207785088 52.53279 12.8624908
164 1933.583  64.9 11.4591009 50.41250  3.028399123 53.44090 11.7116742
165 1933.667  60.1  7.4001096 50.19583  2.504057018 52.69989  7.4288506
166 1933.750  50.2  0.6547149 49.95000 -0.404714912 49.54529  0.3474728
167 1933.833  42.1 -6.6176535 49.84167 -1.124013158 48.71765 -6.5449727
168 1933.917  35.8 -9.3601974 49.75833 -4.598135965 45.16020 -9.5787757
169 1934.000  39.4 -9.3393640 49.75000 -1.010635965 48.73936 -9.3419811
170 1934.083  38.2 -9.8998904 49.60417 -1.504276316 48.09989 -9.5256227
171 1934.167  40.4 -6.9466009 49.37917 -2.032565789 47.34660 -7.0008077
172 1934.250  46.9 -2.7573465 49.38333  0.274013158 49.65735 -2.8175429
173 1934.333  53.4  3.4533991 49.45417  0.492434211 49.94660  3.3639836
174 1934.417  59.6  8.9865132 49.90000  0.713486842 50.61349  9.0952310
175 1934.500  66.5 12.9672149 50.34167  3.191118421 53.53279 12.8624908
176 1934.583  60.4 11.4591009 50.55000 -1.609100877 48.94090 11.7116742
177 1934.667  59.2  7.4001096 50.86250  0.937390351 51.79989  7.4288506
178 1934.750  51.2  0.6547149 51.00000 -0.454714912 50.54529  0.3474728
179 1934.833  42.8 -6.6176535 50.86667 -1.449013158 49.41765 -6.5449727
180 1934.917  45.8 -9.3601974 50.76250  4.397697368 55.16020 -9.5787757
181 1935.000  40.0 -9.3393640 50.72083 -1.381469298 49.33936 -9.3419811
182 1935.083  42.6 -9.8998904 50.79167  1.708223684 52.49989 -9.5256227
183 1935.167  43.5 -6.9466009 50.84167 -0.395065789 50.44660 -7.0008077
184 1935.250  47.1 -2.7573465 50.63333 -0.775986842 49.85735 -2.8175429
185 1935.333  50.0  3.4533991 50.58333 -4.036732456 46.54660  3.3639836
186 1935.417  60.5  8.9865132 50.25000  1.263486842 51.51349  9.0952310
187 1935.500  64.6 12.9672149 49.74583  1.886951754 51.63279 12.8624908
188 1935.583  64.0 11.4591009 49.31667  3.224232456 52.54090 11.7116742
189 1935.667  56.8  7.4001096 49.02083  0.379057018 49.39989  7.4288506
190 1935.750  48.6  0.6547149 48.90833 -0.963048246 47.94529  0.3474728
191 1935.833  44.2 -6.6176535 48.88750  1.930153509 50.81765 -6.5449727
192 1935.917  36.4 -9.3601974 48.92083 -3.160635965 45.76020 -9.5787757
193 1936.000  37.3 -9.3393640 48.65000 -2.010635965 46.63936 -9.3419811
194 1936.083  35.0 -9.8998904 48.33750 -3.437609649 44.89989 -9.5256227
195 1936.167  44.0 -6.9466009 48.27083  2.675767544 50.94660 -7.0008077
196 1936.250  43.9 -2.7573465 48.36667 -1.709320175 46.65735 -2.8175429
197 1936.333  52.7  3.4533991 48.30000  0.946600877 49.24660  3.3639836
198 1936.417  58.6  8.9865132 48.39583  1.217653509 49.61349  9.0952310
199 1936.500  60.0 12.9672149 48.74583 -1.713048246 47.03279 12.8624908
200 1936.583  61.1 11.4591009 49.14167  0.499232456 49.64090 11.7116742
201 1936.667  58.1  7.4001096 49.15833  1.541557018 50.69989  7.4288506
202 1936.750  49.6  0.6547149 49.07083 -0.125548246 48.94529  0.3474728
203 1936.833  41.6 -6.6176535 49.27500 -1.057346491 48.21765 -6.5449727
204 1936.917  41.3 -9.3601974 49.33333  1.326864035 50.66020 -9.5787757
205 1937.000  40.8 -9.3393640 49.39167  0.747697368 50.13936 -9.3419811
206 1937.083  41.0 -9.8998904 49.47917  1.420723684 50.89989 -9.5256227
207 1937.167  38.4 -6.9466009 49.43333 -4.086732456 45.34660 -7.0008077
208 1937.250  47.4 -2.7573465 49.41250  0.744846491 50.15735 -2.8175429
209 1937.333  54.1  3.4533991 49.45833  1.188267544 50.64660  3.3639836
210 1937.417  58.6  8.9865132 49.27500  0.338486842 49.61349  9.0952310
211 1937.500  61.4 12.9672149 49.15417 -0.721381579 48.43279 12.8624908
212 1937.583  61.8 11.4591009 49.21667  1.124232456 50.34090 11.7116742
213 1937.667  56.3  7.4001096 49.59583 -0.695942982 48.89989  7.4288506
214 1937.750  50.9  0.6547149 49.93333  0.311951754 50.24529  0.3474728
215 1937.833  41.4 -6.6176535 49.82917 -1.811513158 48.01765 -6.5449727
216 1937.917  37.1 -9.3601974 49.77500 -3.314802632 46.46020 -9.5787757
217 1938.000  42.1 -9.3393640 49.71667  1.722697368 51.43936 -9.3419811
218 1938.083  41.2 -9.8998904 49.58333  1.516557018 51.09989 -9.5256227
219 1938.167  47.3 -6.9466009 49.55417  4.692434211 54.24660 -7.0008077
220 1938.250  46.6 -2.7573465 49.57500 -0.217653509 49.35735 -2.8175429
221 1938.333  52.4  3.4533991 49.83333 -0.886732456 48.94660  3.3639836
222 1938.417  59.0  8.9865132 50.18750 -0.174013158 50.01349  9.0952310
223 1938.500  59.6 12.9672149 50.16250 -3.529714912 46.63279 12.8624908
224 1938.583  60.4 11.4591009 50.03750 -1.096600877 48.94090 11.7116742
225 1938.667  57.0  7.4001096 49.82083 -0.220942982 49.59989  7.4288506
226 1938.750  50.7  0.6547149 49.66667  0.378618421 50.04529  0.3474728
227 1938.833  47.8 -6.6176535 49.71667  4.700986842 54.41765 -6.5449727
228 1938.917  39.2 -9.3601974 49.67500 -1.114802632 48.56020 -9.5787757
229 1939.000  39.4 -9.3393640 49.67917 -0.939802632 48.73936 -9.3419811
230 1939.083  40.9 -9.8998904 49.78333  1.016557018 50.79989 -9.5256227
231 1939.167  42.4 -6.9466009 49.89167 -0.545065789 49.34660 -7.0008077
232 1939.250  47.8 -2.7573465 49.77500  0.782346491 50.55735 -2.8175429
233 1939.333  52.4  3.4533991 49.55833 -0.611732456 48.94660  3.3639836
234 1939.417  58.0  8.9865132 49.45000 -0.436513158 49.01349  9.0952310
235 1939.500  60.7 12.9672149       NA           NA 47.73279 12.8624908
236 1939.583  61.8 11.4591009       NA           NA 50.34090 11.7116742
237 1939.667  58.2  7.4001096       NA           NA 50.79989  7.4288506
238 1939.750  46.7  0.6547149       NA           NA 46.04529  0.3474728
239 1939.833  46.6 -6.6176535       NA           NA 53.21765 -6.5449727
240 1939.917  37.8 -9.3601974       NA           NA 47.16020 -9.5787757
      .trend  .remainder      .weight .seasadj
1   50.01420 -0.07222032 0.9998117442 49.94198
2   49.92165  0.40397500 0.9941070247 50.32562
3   49.82909  1.57171369 0.9126802010 51.40081
4   49.76684 -0.24930092 0.9977553984 49.51754
5   49.70459  1.03142281 0.9619042613 50.73602
6   49.66925 -0.26447916 0.9974748211 49.40477
7   49.63390 -4.79639351 0.3412380823 44.83751
8   49.59154 -4.90321001 0.3197191080 44.68833
9   49.54917 -2.67801942 0.7575428238 46.87115
10  49.53142  0.62110779 0.9860987725 50.15253
11  49.51367 -0.06869727 0.9998295734 49.44497
12  49.67527 -0.29648970 0.9968240120 49.37878
13  49.83686  3.70512025 0.5652530794 53.54198
14  50.01995 -0.69432647 0.9826486724 49.32562
15  50.20304  1.89777018 0.8740330207 52.10081
16  50.21930 -0.40175826 0.9941717811 49.81754
17  50.23556  0.50045164 0.9909689604 50.73602
18  50.08369 -0.47892462 0.9917222061 49.60477
19  49.93182  3.50568674 0.6050590645 53.43751
20  49.64468 -1.45635323 0.9247811015 48.18833
21  49.35754  0.21361388 0.9983531664 49.57115
22  49.04307  4.80945774 0.3386139271 53.85253
23  48.72860 -2.48363068 0.7893864291 46.24497
24  48.41063  3.96814679 0.5117966525 52.37878
25  48.09265 -1.25067337 0.9442359375 46.84198
26  47.78527  0.44034827 0.9930065146 48.22562
27  47.47789 -0.97708673 0.9657717152 46.50081
28  47.32123 -2.40368684 0.8020068621 44.91754
29  47.16456  5.17145139 0.2668499980 52.33602
30  47.25341  1.45135602 0.9252972241 48.70477
31  47.34226 -3.40475173 0.6248069424 43.93751
32  47.54890 -4.96057839 0.3082343237 42.58833
33  47.75555 -0.88439797 0.9719230049 46.87115
34  47.94715 -1.19461825 0.9490683389 46.75253
35  48.13874  0.20622919 0.9984634649 48.34497
36  48.29300  2.98577154 0.7036777265 51.27878
37  48.44726  2.69471628 0.7546879672 51.14198
38  48.54072  1.08490473 0.9578945067 49.62562
39  48.63417  1.26663654 0.9428345049 49.90081
40  48.56948  0.04806673 0.9999163166 48.61754
41  48.50478 -2.66876475 0.7590860969 45.83602
42  48.29876 -4.69399240 0.3620667289 43.60477
43  48.09274  3.24476757 0.6555667956 51.33751
44  47.88957 -0.00124428 1.0000000000 47.88833
45  47.68640 -0.71524905 0.9815940273 46.97115
46  47.63720  1.21532552 0.9473121845 48.85253
47  47.58800 -4.74303219 0.3520504143 42.84497
48  47.62960 -0.45082633 0.9926638286 47.17878
49  47.67120  0.97078191 0.9662141749 48.64198
50  47.71188 -0.68625939 0.9830480211 47.02562
51  47.75257 -2.45175731 0.7944868364 45.30081
52  47.91295  0.40459740 0.9940901051 48.31754
53  48.07333  1.76269045 0.8908237990 49.83602
54  48.34262  0.26214603 0.9975164909 48.60477
55  48.61192 -0.67441076 0.9836242049 47.93751
56  48.81156 -2.32323163 0.8143918072 46.48833
57  49.01119 -0.04004542 0.9999420200 48.97115
58  49.12549  0.32703709 0.9961383276 49.45253
59  49.23979  1.70518732 0.8976499774 50.94497
60  49.35392  3.82485679 0.5410514810 53.17878
61  49.46805 -0.12607135 0.9994255569 49.34198
62  49.52972  0.49590417 0.9911290425 50.02562
63  49.59138 -1.79057694 0.8874418517 47.80081
64  49.45273 -1.53518313 0.9166077211 47.91754
65  49.31407  1.12194902 0.9550103719 50.43602
66  49.10862  1.19614862 0.9489389693 50.30477
67  48.90317  1.73433583 0.8942072882 50.63751
68  48.89233  0.39599547 0.9943367859 49.28833
69  48.88149 -3.31033782 0.6430636675 45.57115
70  48.91397  0.73855880 0.9803781333 49.65253
71  48.94645 -4.30147685 0.4429222034 44.64497
72  48.90282 -3.02404619 0.6966932090 45.87878
73  48.85919 -0.31721315 0.9963661650 48.54198
74  48.89413  4.03149740 0.4987159288 52.92562
75  48.92906  1.47175131 0.9232248776 50.40081
76  49.03010  2.68744640 0.7559341735 51.71754
77  49.13114 -1.89512018 0.8743670152 47.23602
78  49.14031 -1.43554225 0.9268852631 47.70477
79  49.14949  0.48802331 0.9914078255 49.63751
80  49.07881  1.20951191 0.9478052716 50.28833
81  49.00814  1.06300760 0.9595633931 50.07115
82  48.97150 -2.61897582 0.7673895643 46.35253
83  48.93486 -0.78989152 0.9775667489 48.14497
84  48.86818  0.51059666 0.9906000832 49.37878
85  48.80149 -0.05951278 0.9998720920 48.74198
86  48.70096 -0.67533648 0.9835797380 48.02562
87  48.60042  3.70038320 0.5662269876 52.30081
88  48.56807  1.34947559 0.9352460403 49.91754
89  48.53571 -0.19969368 0.9985585123 48.33602
90  48.52398 -2.61921491 0.7673600584 45.90477
91  48.51226 -0.97474852 0.9659450343 47.53751
92  48.54413  0.24419096 0.9978443356 48.78833
93  48.57601 -1.30486248 0.9393918863 47.27115
94  48.64185  1.31067824 0.9388599059 49.95253
95  48.70769  0.13728668 0.9993192008 48.84497
96  48.78245 -4.00367641 0.5044250461 44.77878
97  48.85722  1.28476289 0.9412111825 50.14198
98  48.89771  1.72791339 0.8949676412 50.62562
99  48.93820  0.86260727 0.9732797776 49.80081
100 48.94613  1.17141777 0.9510048139 50.11754
101 48.95405 -1.41803340 0.9286221314 47.53602
102 48.84896 -1.54418747 0.9156534095 47.30477
103 48.74386  0.59364608 0.9872985476 49.33751
104 48.54573  0.24259718 0.9978720183 48.78833
105 48.34759 -0.37644464 0.9948844472 47.97115
106 48.24623  1.60629421 0.9088932779 49.85253
107 48.14487  1.40010078 0.9303867756 49.54497
108 48.15934 -1.28056361 0.9415880523 46.87878
109 48.17381 -4.03182561 0.4986653502 44.14198
110 48.21910 -7.39348007 0.0001410611 40.82562
111 48.26440 -0.26359115 0.9974900911 48.00081
112 48.35951 -1.64196854 0.9049062600 46.71754
113 48.45462  1.28139240 0.9415175359 49.73602
114 48.67785 -0.87308338 0.9726337710 47.80477
115 48.90108  0.73642845 0.9804880657 49.63751
116 49.09419 -0.50586696 0.9907719650 48.58833
117 49.28730  3.08384471 0.6857277896 52.37115
118 49.34557 -0.49304083 0.9912296487 48.85253
119 49.40383  0.04114136 0.9999389708 49.44497
120 49.40282  2.07595514 0.8502744159 51.47878
121 49.40181  1.54017131 0.9160740197 50.94198
122 49.37361 -2.74798299 0.7456279645 46.62562
123 49.34540 -1.14459392 0.9531961859 48.20081
124 49.30543  0.41211746 0.9938690055 49.71754
125 49.26545 -1.42943281 0.9274919729 47.83602
126 49.18880  2.11597148 0.8446745881 51.30477
127 49.11215 -1.87463661 0.8769857050 47.23751
128 49.00675  0.88157510 0.9720955921 49.88833
129 48.90136  0.66979390 0.9838451572 49.57115
130 48.83104  1.72148929 0.8957307927 50.55253
131 48.76072  0.78425241 0.9778898297 49.54497
132 48.68865 -0.30987458 0.9965298006 48.37878
133 48.61658 -2.17459917 0.8363490822 46.44198
134 48.45541 -0.52979050 0.9898793425 47.92562
135 48.29425 -2.89343846 0.7202274168 45.40081
136 48.16174  1.15580354 0.9522865331 49.31754
137 48.02923  2.10678389 0.8459719861 50.13602
138 48.11025  1.19451432 0.9490780631 49.30477
139 48.19128 -0.45376763 0.9925693662 47.73751
140 48.28599 -1.79766513 0.8865827207 46.48833
141 48.38070 -2.00955555 0.8593276261 46.37115
142 48.33674 -2.08421321 0.8491078381 46.25253
143 48.29278  3.75219686 0.5557873995 52.04497
144 48.28919  1.88958246 0.8750956552 50.17878
145 48.28561  3.45637045 0.6147301243 51.74198
146 48.41723 -0.49161070 0.9912807969 47.92562
147 48.54886 -1.24804849 0.9444757336 47.30081
148 48.62483 -1.20728397 0.9479970261 47.41754
149 48.70080 -1.16478111 0.9515491014 47.53602
150 48.72498 -0.82021192 0.9758272720 47.90477
151 48.74916  0.48834488 0.9913958496 49.23751
152 48.90068  2.88764978 0.7212401964 51.78833
153 49.05219 -0.18103825 0.9988160917 48.87115
154 49.30960 -2.35707551 0.8092259009 46.95253
155 49.56702  0.57795496 0.9879606342 50.14497
156 49.83909  1.53968834 0.9161343536 51.37878
157 50.11116 -4.56917590 0.3876547579 45.54198
158 50.36702 -1.54139691 0.9159538098 48.82562
159 50.62288  0.87792544 0.9723268320 51.50081
160 50.78526  0.73228255 0.9807054171 51.51754
161 50.94764 -0.11162200 0.9995497433 50.83602
162 50.89302  0.81174825 0.9763159822 51.70477
163 50.83840  1.79910611 0.8863986646 52.63751
164 50.61542  2.57290085 0.7749790813 53.18833
165 50.39245  2.27870268 0.8210810117 52.67115
166 50.16815 -0.31561873 0.9964011804 49.85253
167 49.94385 -1.29887241 0.9399319885 48.64497
168 49.76381 -4.38503285 0.4256237643 45.37878
169 49.58377 -0.84179092 0.9745475926 48.74198
170 49.49997 -1.77435174 0.8894181190 47.72562
171 49.41618 -2.01536920 0.8585443585 47.40081
172 49.51935  0.19819417 0.9985805427 49.71754
173 49.62252  0.41349587 0.9938289408 50.03602
174 49.86562  0.63914438 0.9852855184 50.50477
175 50.10873  3.52878051 0.6004799186 53.63751
176 50.30759 -1.61926856 0.9074527330 48.68833
177 50.50646  1.26468946 0.9430139300 51.77115
178 50.56288  0.28964243 0.9969710616 50.85253
179 50.61931 -1.27433689 0.9421411984 49.34497
180 50.60801  4.77076099 0.3464437038 55.37878
181 50.59672 -1.25473874 0.9438903719 49.34198
182 50.58026  1.54536684 0.9155261150 52.12562
183 50.56379 -0.06298420 0.9998563787 50.50081
184 50.48101 -0.56347034 0.9885529916 49.91754
185 50.39823 -3.76221813 0.5537331235 46.63602
186 50.17364  1.23113289 0.9459516122 51.40477
187 49.94904  1.78847153 0.8876995218 51.73751
188 49.67770  2.61062346 0.7687682152 52.28833
189 49.40637 -0.03521753 0.9999552490 49.37115
190 49.20639 -0.95386492 0.9673753542 48.25253
191 49.00642  1.73855541 0.8937126444 50.74497
192 48.83367 -2.85489600 0.7270306698 45.97878
193 48.66093 -2.01894503 0.8580717515 46.64198
194 48.54482 -4.01919856 0.5012586635 44.52562
195 48.42872  2.57209128 0.7751200799 51.00081
196 48.46736 -1.74981759 0.8923691510 46.71754
197 48.50600  0.83001189 0.9752479203 49.33602
198 48.68877  0.81599782 0.9760694451 49.50477
199 48.87154 -1.73402862 0.8942494353 47.13751
200 49.06001  0.32831580 0.9961051216 49.38833
201 49.24848  1.42266730 0.9281619459 50.67115
202 49.36046 -0.10793320 0.9995787408 49.25253
203 49.47244 -1.32746597 0.9373027598 48.14497
204 49.53805  1.34072499 0.9360748588 50.87878
205 49.60366  0.53831833 0.9895484886 50.14198
206 49.62887  0.89674911 0.9711359461 50.52562
207 49.65408 -4.25327673 0.4529118759 45.40081
208 49.61740  0.60014021 0.9870205102 50.21754
209 49.58072  1.15529549 0.9523277817 50.73602
210 49.53425 -0.02948220 0.9999686594 49.50477
211 49.48778 -0.95027228 0.9676207494 48.53751
212 49.50857  0.57975352 0.9878829547 50.08833
213 49.52936 -0.65821360 0.9843982323 48.87115
214 49.57767  0.97485321 0.9659406952 50.55253
215 49.62598 -1.68101226 0.9004371545 47.94497
216 49.59498 -2.91620283 0.7161544741 46.67878
217 49.56397  1.87800899 0.8765541165 51.44198
218 49.53556  1.19006148 0.9494547021 50.72562
219 49.50715  4.79365735 0.3417807348 54.30081
220 49.53811 -0.12056488 0.9994741681 49.41754
221 49.56907 -0.53304877 0.9897514479 49.03602
222 49.57742  0.32735314 0.9961300420 49.90477
223 49.58577 -2.84825734 0.7282020458 46.73751
224 49.53627 -0.84794729 0.9741745765 48.68833
225 49.48678  0.08436985 0.9997428525 49.57115
226 49.48966  0.86286796 0.9732679392 50.35253
227 49.49254  4.85243380 0.3299127676 54.34497
228 49.51944 -0.74066544 0.9802586379 48.77878
229 49.54634 -0.80436230 0.9767456685 48.74198
230 49.54330  0.88232445 0.9720537415 50.42562
231 49.54025 -0.13944543 0.9992967282 49.40081
232 49.46247  1.15507606 0.9523490606 50.61754
233 49.38468 -0.34866410 0.9956083428 49.03602
234 49.28384 -0.37907304 0.9948109879 48.90477
235 49.18300 -1.34549436 0.9356161725 47.83751
236 49.07716  1.01116267 0.9633774008 50.08833
237 48.97132  1.79982679 0.8863220646 50.77115
238 48.86598 -2.51344847 0.7846257080 46.35253
239 48.76063  4.38434399 0.4258156270 53.14497
240 48.65426 -1.27547980 0.9420313503 47.37878
> 
> # Visually compare seasonal decompositions in tidy data frames.
> 
> library(tibble)
> library(dplyr)

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

> library(tidyr)
> library(ggplot2)
> 
> decomps <- tibble(
+     # Turn the ts objects into data frames.
+     series = list(as.data.frame(nottem), as.data.frame(nottem)),
+     # Add the models in, one for each row.
+     decomp = c("decompose", "stl"),
+     model = list(d1, d2)
+ ) %>%
+     rowwise() %>%
+     # Pull out the fitted data using broom::augment.
+     mutate(augment = list(broom::augment(model))) %>%
+     ungroup() %>%
+     # Unnest the data frames into a tidy arrangement of
+     # the series next to its seasonal decomposition, grouped
+     # by the method (stl or decompose).
+     group_by(decomp) %>%
+     unnest(series, augment) %>%
+     mutate(index = 1:n()) %>%
+     ungroup() %>%
+     select(decomp, index, x, adjusted = .seasadj)
Warning in bind_rows_(x, .id) :
  Vectorizing 'ts' elements may not preserve their attributes
Warning in bind_rows_(x, .id) :
  Vectorizing 'ts' elements may not preserve their attributes
> 
> ggplot(decomps) +
+     geom_line(aes(x = index, y = x), colour = "black") +
+     geom_line(aes(x = index, y = adjusted, colour = decomp,
+                   group = decomp))
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:tidyrâ€™, â€˜package:dplyrâ€™,
  â€˜package:tibbleâ€™

> nameEx("augment.ivreg")
> ### * augment.ivreg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.ivreg
> ### Title: Augment data with information from a(n) ivreg object
> ### Aliases: augment.ivreg
> 
> ### ** Examples
> 
> 
> library(AER)
Loading required package: car
Loading required package: carData
Loading required package: lmtest
Loading required package: zoo

Attaching package: â€˜zooâ€™

The following objects are masked from â€˜package:baseâ€™:

    as.Date, as.Date.numeric

Loading required package: sandwich
Loading required package: survival
> 
> data("CigarettesSW", package = "AER")
> ivr <- ivreg(
+   log(packs) ~ income | population,
+   data = CigarettesSW,
+   subset = year == "1995"
+ )
> 
> summary(ivr)

Call:
ivreg(formula = log(packs) ~ income | population, data = CigarettesSW, 
    subset = year == "1995")

Residuals:
     Min       1Q   Median       3Q      Max 
-0.69305 -0.12941 -0.02257  0.11723  0.58184 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept)  4.612e+00  4.454e-02 103.549   <2e-16 ***
income      -5.705e-10  2.334e-10  -2.445   0.0184 *  
---
Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1

Residual standard error: 0.2293 on 46 degrees of freedom
Multiple R-Squared: 0.1308,	Adjusted R-squared: 0.1119 
Wald test: 5.976 on 1 and 46 DF,  p-value: 0.01839 

> 
> tidy(ivr)
# A tibble: 2 x 5
  term         estimate std.error statistic  p.value
  <chr>           <dbl>     <dbl>     <dbl>    <dbl>
1 (Intercept)  4.61e+ 0  4.45e- 2    104.   3.74e-56
2 income      -5.71e-10  2.33e-10     -2.44 1.84e- 2
> tidy(ivr, conf.int = TRUE)
# A tibble: 2 x 7
  term         estimate std.error statistic  p.value conf.low conf.high
  <chr>           <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
1 (Intercept)  4.61e+ 0  4.45e- 2    104.   3.74e-56  4.52e+0  4.70e+ 0
2 income      -5.71e-10  2.33e-10     -2.44 1.84e- 2 -1.03e-9 -1.13e-10
> tidy(ivr, conf.int = TRUE, exponentiate = TRUE)
Warning in process_lm(ret, x, conf.int = conf.int, conf.level = conf.level,  :
  Exponentiating coefficients, but model did not use a log or logit link function.
# A tibble: 2 x 7
  term        estimate std.error statistic  p.value conf.low conf.high
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
1 (Intercept)  101.     4.45e- 2    104.   3.74e-56   92.2     110.   
2 income         1.000  2.33e-10     -2.44 1.84e- 2    1.000     1.000
> 
> augment(ivr)
# A tibble: 48 x 6
   .rownames log.packs.    income population .fitted  .resid
   <chr>          <dbl>     <dbl>      <dbl>   <dbl>   <dbl>
 1 49              4.62  83903280    4262731    4.56  0.0522
 2 50              4.71  45995496    2480121    4.59  0.124 
 3 51              4.28  88870496    4306908    4.56 -0.285 
 4 52              4.04 771470144   31493524    4.17 -0.131 
 5 53              4.41  92946544    3738061    4.56 -0.145 
 6 54              4.38 104315120    3265293    4.55 -0.177 
 7 55              4.82  18237436     718265    4.60  0.223 
 8 56              4.53 333525344   14185403    4.42  0.112 
 9 57              4.58 159800448    7188538    4.52  0.0591
10 58              4.53  60170928    2840860    4.58 -0.0512
# â€¦ with 38 more rows
> 
> glance(ivr)
# A tibble: 1 x 7
  r.squared adj.r.squared sigma statistic p.value    df df.residual
      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <int>       <int>
1     0.131         0.112 0.229      5.98  0.0184     2          46
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:AERâ€™, â€˜package:survivalâ€™, â€˜package:sandwichâ€™,
  â€˜package:lmtestâ€™, â€˜package:zooâ€™, â€˜package:carâ€™, â€˜package:carDataâ€™

> nameEx("augment.loess")
> ### * augment.loess
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.loess
> ### Title: Tidy a(n) loess object
> ### Aliases: augment.loess loess_tidiers
> 
> ### ** Examples
> 
> 
> lo <- loess(mpg ~ wt, mtcars)
> augment(lo)
# A tibble: 32 x 6
   .rownames           mpg    wt .fitted .se.fit  .resid
   <chr>             <dbl> <dbl>   <dbl>   <dbl>   <dbl>
 1 Mazda RX4          21    2.62    22.2   1.01  -1.24  
 2 Mazda RX4 Wag      21    2.88    21.1   1.07  -0.0786
 3 Datsun 710         22.8  2.32    24.6   1.03  -1.84  
 4 Hornet 4 Drive     21.4  3.22    19.5   0.861  1.91  
 5 Hornet Sportabout  18.7  3.44    17.9   0.755  0.779 
 6 Valiant            18.1  3.46    17.8   0.747  0.290 
 7 Duster 360         14.3  3.57    17.2   0.721 -2.89  
 8 Merc 240D          24.4  3.19    19.6   0.866  4.78  
 9 Merc 230           22.8  3.15    19.8   0.868  2.98  
10 Merc 280           19.2  3.44    17.9   0.755  1.28  
# â€¦ with 22 more rows
> 
> # with all columns of original data
> augment(lo, mtcars)
# A tibble: 32 x 15
   .rownames   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1 Mazda RX4  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2 Mazda RXâ€¦  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3 Datsun 7â€¦  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4 Hornet 4â€¦  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5 Hornet Sâ€¦  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7 Duster 3â€¦  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# â€¦ with 22 more rows, and 3 more variables: .fitted <dbl>, .se.fit <dbl>,
#   .resid <dbl>
> 
> # with a new dataset
> augment(lo, newdata = head(mtcars))
# A tibble: 6 x 14
  .rownames   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1 Mazda RX4  21       6   160   110  3.9   2.62  16.5     0     1     4     4
2 Mazda RXâ€¦  21       6   160   110  3.9   2.88  17.0     0     1     4     4
3 Datsun 7â€¦  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1
4 Hornet 4â€¦  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1
5 Hornet Sâ€¦  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2
6 Valiant    18.1     6   225   105  2.76  3.46  20.2     1     0     3     1
# â€¦ with 2 more variables: .fitted <dbl>, .se.fit <dbl>
> 
> 
> 
> 
> cleanEx()
> nameEx("augment.smooth.spline")
> ### * augment.smooth.spline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augment.smooth.spline
> ### Title: Tidy a(n) smooth.spline object
> ### Aliases: augment.smooth.spline smooth.spline_tidiers
> 
> ### ** Examples
> 
> 
> spl <- smooth.spline(mtcars$wt, mtcars$mpg, df = 4)
> augment(spl, mtcars)
# A tibble: 32 x 13
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb .fitted
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4    22.9
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4    21.1
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1    25.3
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1    19.1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2    17.8
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1    17.7
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4    17.1
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2    19.2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2    19.5
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4    17.8
# â€¦ with 22 more rows, and 1 more variable: .resid <dbl>
> augment(spl)  # calls original columns x and y
# A tibble: 32 x 5
       x     y     w .fitted .resid
   <dbl> <dbl> <dbl>   <dbl>  <dbl>
 1  2.62  21       1    22.9 -1.87 
 2  2.88  21       1    21.1 -0.117
 3  2.32  22.8     1    25.3 -2.48 
 4  3.22  21.4     1    19.1  2.33 
 5  3.44  18.7     1    17.8  0.928
 6  3.46  18.1     1    17.7  0.437
 7  3.57  14.3     1    17.1 -2.79 
 8  3.19  24.4     1    19.2  5.19 
 9  3.15  22.8     1    19.5  3.35 
10  3.44  19.2     1    17.8  1.43 
# â€¦ with 22 more rows
> 
> library(ggplot2)
> ggplot(augment(spl, mtcars), aes(wt, mpg)) +
+     geom_point() + geom_line(aes(y = .fitted))
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™

> nameEx("bootstrap")
> ### * bootstrap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bootstrap
> ### Title: Set up bootstrap replicates of a dplyr operation
> ### Aliases: bootstrap
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D library(dplyr)
> ##D mtcars %>% bootstrap(10) %>% do(tidy(lm(mpg ~ wt, .)))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("brms_tidiers")
> ### * brms_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: brms_tidiers
> ### Title: Tidying methods for a brms model
> ### Aliases: brms_tidiers tidy.brmsfit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D  library(brms)
> ##D  fit <- brm(mpg ~ wt + (1|cyl) + (1+wt|gear), data = mtcars,
> ##D             iter = 500, chains = 2)
> ##D  tidy(fit)
> ##D  tidy(fit, parameters = "^sd_", intervals = FALSE)
> ##D  tidy(fit, par_type = "non-varying")
> ##D  tidy(fit, par_type = "varying")
> ##D  tidy(fit, par_type = "hierarchical", robust = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("column_glossary")
> ### * column_glossary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: column_glossary
> ### Title: Allowed column names in tidied tibbles
> ### Aliases: column_glossary
> ### Keywords: datasets
> 
> ### ** Examples
> 
> column_glossary
# A tibble: 33 x 4
   method column           description used_by  
   <chr>  <chr>            <chr>       <list>   
 1 glance sigma            ""          <chr [1]>
 2 glance logLik           ""          <chr [2]>
 3 glance AIC              ""          <chr [3]>
 4 glance BIC              ""          <chr [2]>
 5 glance pseudo.r.squared ""          <chr [1]>
 6 glance df.residual      ""          <chr [1]>
 7 glance df.null          ""          <chr [1]>
 8 glance r.squared        ""          <chr [1]>
 9 glance deviance         ""          <chr [1]>
10 glance power            ""          <chr [1]>
# â€¦ with 23 more rows
> 
> 
> 
> cleanEx()
> nameEx("data.frame_tidiers")
> ### * data.frame_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: data.frame_tidiers
> ### Title: Tidiers for data.frame objects
> ### Aliases: data.frame_tidiers tidy.data.frame glance.data.frame
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D td <- tidy(mtcars)
> ##D td
> ##D 
> ##D glance(mtcars)
> ##D 
> ##D library(ggplot2)
> ##D # compare mean and standard deviation
> ##D ggplot(td, aes(mean, sd)) + geom_point() +
> ##D      geom_text(aes(label = column), hjust = 1, vjust = 1) +
> ##D      scale_x_log10() + scale_y_log10() + geom_abline()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("durbinWatsonTest_tidiers")
> ### * durbinWatsonTest_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: durbinWatsonTest_tidiers
> ### Title: Tidy/glance a(n) durbinWatsonTest object
> ### Aliases: durbinWatsonTest_tidiers tidy.durbinWatsonTest
> ###   glance.durbinWatsonTest
> 
> ### ** Examples
> 
> 
> dw <- car::durbinWatsonTest(lm(mpg ~ wt, data = mtcars))
> tidy(dw)
# A tibble: 1 x 5
  statistic p.value autocorrelation method             alternative
      <dbl>   <dbl>           <dbl> <chr>              <chr>      
1      1.25   0.026           0.363 Durbin-Watson Test two.sided  
> glance(dw)  # same output for all durbinWatsonTests
# A tibble: 1 x 5
  statistic p.value autocorrelation method             alternative
      <dbl>   <dbl>           <dbl> <chr>              <chr>      
1      1.25   0.026           0.363 Durbin-Watson Test two.sided  
> 
> 
> 
> 
> cleanEx()
> nameEx("emmeans_tidiers")
> ### * emmeans_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: emmeans_tidiers
> ### Title: Tidy estimated marginal means (least-squares means) objects from
> ###   the emmeans and lsmeans packages
> ### Aliases: emmeans_tidiers tidy.lsmobj tidy.ref.grid tidy.emmGrid
> 
> ### ** Examples
> 
> 
> if (require("emmeans", quietly = TRUE)) {
+   # linear model for sales of oranges per day
+   oranges_lm1 <- lm(sales1 ~ price1 + price2 + day + store, data = oranges)
+ 
+   # reference grid; see vignette("basics", package = "emmeans")
+   oranges_rg1 <- ref_grid(oranges_lm1)
+   td <- tidy(oranges_rg1)
+   td
+ 
+   # marginal averages
+   marginal <- emmeans(oranges_rg1, "day")
+   tidy(marginal)
+ 
+   # contrasts
+   tidy(contrast(marginal))
+   tidy(contrast(marginal, method = "pairwise"))
+ 
+   # plot confidence intervals
+   library(ggplot2)
+   ggplot(tidy(marginal), aes(day, estimate)) +
+     geom_point() +
+     geom_errorbar(aes(ymin = conf.low, ymax = conf.high))
+ 
+   # by multiple prices
+   by_price <- emmeans(oranges_lm1, "day", by = "price2",
+                       at = list(price1 = 50, price2 = c(40, 60, 80),
+                       day = c("2", "3", "4")) )
+   by_price
+   tidy(by_price)
+ 
+   ggplot(tidy(by_price), aes(price2, estimate, color = day)) +
+     geom_line() +
+     geom_errorbar(aes(ymin = conf.low, ymax = conf.high))
+ }
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:emmeansâ€™

> nameEx("geeglm_tidiers")
> ### * geeglm_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.geeglm
> ### Title: Tidy a(n) geeglm object
> ### Aliases: tidy.geeglm geeglm_tidiers geepack_tidiers
> 
> ### ** Examples
> 
> 
> if (requireNamespace("geepack", quietly = TRUE)) {
+   library(geepack)
+   data(state)
+     
+   ds <- data.frame(state.region, state.x77)
+ 
+   geefit <- geeglm(Income ~ Frost + Murder, id = state.region,
+                    data = ds, family = gaussian,
+                    corstr = "exchangeable")
+ 
+   tidy(geefit)
+   tidy(geefit, quick = TRUE)
+   tidy(geefit, conf.int = TRUE)
+ }
# A tibble: 3 x 7
  term        estimate std.error statistic p.value conf.low conf.high
  <chr>          <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl>
1 (Intercept)  4406.      407.     117.      0      3608.     5205.  
2 Frost           1.69      2.25     0.562   0.453    -2.72      6.10
3 Murder        -22.7      31.4      0.522   0.470   -84.2      38.8 
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:geepackâ€™

> nameEx("glance.betareg")
> ### * glance.betareg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.betareg
> ### Title: Glance at a(n) betareg object
> ### Aliases: glance.betareg
> 
> ### ** Examples
> 
> 
> library(betareg)
> 
> data("GasolineYield", package = "betareg")
> 
> mod <- betareg(yield ~ batch + temp, data = GasolineYield)
> 
> mod

Call:
betareg(formula = yield ~ batch + temp, data = GasolineYield)

Coefficients (mean model with logit link):
(Intercept)       batch1       batch2       batch3       batch4       batch5  
   -6.15957      1.72773      1.32260      1.57231      1.05971      1.13375  
     batch6       batch7       batch8       batch9         temp  
    1.04016      0.54369      0.49590      0.38579      0.01097  

Phi coefficients (precision model with identity link):
(phi)  
440.3  

> tidy(mod)
# A tibble: 12 x 6
   component term         estimate  std.error statistic   p.value
   <chr>     <chr>           <dbl>      <dbl>     <dbl>     <dbl>
 1 mean      (Intercept)   -6.16     0.182       -33.8  3.44e-250
 2 mean      batch1         1.73     0.101        17.1  2.59e- 65
 3 mean      batch2         1.32     0.118        11.2  3.34e- 29
 4 mean      batch3         1.57     0.116        13.5  8.81e- 42
 5 mean      batch4         1.06     0.102        10.4  4.06e- 25
 6 mean      batch5         1.13     0.104        11.0  6.52e- 28
 7 mean      batch6         1.04     0.106         9.81 1.03e- 22
 8 mean      batch7         0.544    0.109         4.98 6.29e-  7
 9 mean      batch8         0.496    0.109         4.55 5.30e-  6
10 mean      batch9         0.386    0.119         3.25 1.14e-  3
11 mean      temp           0.0110   0.000413     26.6  1.26e-155
12 precision (phi)        440.     110.            4.00 6.29e-  5
> tidy(mod, conf.int = TRUE)
# A tibble: 12 x 8
   component term      estimate std.error statistic   p.value conf.low conf.high
   <chr>     <chr>        <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl>
 1 mean      (Intercâ€¦   -6.16     1.82e-1    -33.8  3.44e-250 -6.52e+0   -5.80  
 2 mean      batch1      1.73     1.01e-1     17.1  2.59e- 65  1.53e+0    1.93  
 3 mean      batch2      1.32     1.18e-1     11.2  3.34e- 29  1.09e+0    1.55  
 4 mean      batch3      1.57     1.16e-1     13.5  8.81e- 42  1.34e+0    1.80  
 5 mean      batch4      1.06     1.02e-1     10.4  4.06e- 25  8.59e-1    1.26  
 6 mean      batch5      1.13     1.04e-1     11.0  6.52e- 28  9.31e-1    1.34  
 7 mean      batch6      1.04     1.06e-1      9.81 1.03e- 22  8.32e-1    1.25  
 8 mean      batch7      0.544    1.09e-1      4.98 6.29e-  7  3.30e-1    0.758 
 9 mean      batch8      0.496    1.09e-1      4.55 5.30e-  6  2.82e-1    0.709 
10 mean      batch9      0.386    1.19e-1      3.25 1.14e-  3  1.53e-1    0.618 
11 mean      temp        0.0110   4.13e-4     26.6  1.26e-155  1.02e-2    0.0118
12 precision (phi)     440.       1.10e+2      4.00 6.29e-  5  2.25e+2  656.    
> tidy(mod, conf.int = TRUE, conf.level = .99)
# A tibble: 12 x 8
   component term      estimate std.error statistic   p.value conf.low conf.high
   <chr>     <chr>        <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl>
 1 mean      (Intercâ€¦   -6.16     1.82e-1    -33.8  3.44e-250 -6.63e+0   -5.69  
 2 mean      batch1      1.73     1.01e-1     17.1  2.59e- 65  1.47e+0    1.99  
 3 mean      batch2      1.32     1.18e-1     11.2  3.34e- 29  1.02e+0    1.63  
 4 mean      batch3      1.57     1.16e-1     13.5  8.81e- 42  1.27e+0    1.87  
 5 mean      batch4      1.06     1.02e-1     10.4  4.06e- 25  7.96e-1    1.32  
 6 mean      batch5      1.13     1.04e-1     11.0  6.52e- 28  8.67e-1    1.40  
 7 mean      batch6      1.04     1.06e-1      9.81 1.03e- 22  7.67e-1    1.31  
 8 mean      batch7      0.544    1.09e-1      4.98 6.29e-  7  2.63e-1    0.825 
 9 mean      batch8      0.496    1.09e-1      4.55 5.30e-  6  2.15e-1    0.776 
10 mean      batch9      0.386    1.19e-1      3.25 1.14e-  3  8.03e-2    0.691 
11 mean      temp        0.0110   4.13e-4     26.6  1.26e-155  9.90e-3    0.0120
12 precision (phi)     440.       1.10e+2      4.00 6.29e-  5  1.57e+2  724.    
> 
> augment(mod)
# A tibble: 32 x 6
   yield batch  temp .fitted .resid   .cooksd
   <dbl> <fct> <dbl>   <dbl>  <dbl>     <dbl>
 1 0.122 1       205  0.101   1.59  0.0791   
 2 0.223 1       275  0.195   1.66  0.0917   
 3 0.347 1       345  0.343   0.211 0.00155  
 4 0.457 1       407  0.508  -2.88  0.606    
 5 0.08  2       218  0.0797  0.109 0.0000168
 6 0.131 2       273  0.137  -0.365 0.00731  
 7 0.266 2       347  0.263   0.260 0.00523  
 8 0.074 3       212  0.0943 -1.77  0.0805   
 9 0.182 3       272  0.167   1.02  0.0441   
10 0.304 3       340  0.298   0.446 0.0170   
# â€¦ with 22 more rows
> 
> glance(mod)
# A tibble: 1 x 6
  pseudo.r.squared df.null logLik   AIC   BIC df.residual
             <dbl>   <dbl>  <dbl> <dbl> <dbl>       <int>
1            0.962      30   84.8 -146. -128.          20
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:betaregâ€™

> nameEx("glance.binDesign")
> ### * glance.binDesign
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.binDesign
> ### Title: Glance at a(n) binDesign object
> ### Aliases: glance.binDesign
> 
> ### ** Examples
> 
> 
> if (require("binGroup", quietly = TRUE)) {
+     des <- binDesign(nmax = 300, delta = 0.06,
+                      p.hyp = 0.1, power = .8)
+ 
+     glance(des)
+     tidy(des)
+ 
+     # the ggplot2 equivalent of plot(des)
+     library(ggplot2)
+     ggplot(tidy(des), aes(n, power)) +
+         geom_line()
+ }
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:binGroupâ€™

> nameEx("glance.glm")
> ### * glance.glm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.glm
> ### Title: Glance at a(n) glm object
> ### Aliases: glance.glm
> 
> ### ** Examples
> 
> 
> g <- glm(am ~ mpg, mtcars, family = "binomial")
> glance(g)
# A tibble: 1 x 7
  null.deviance df.null logLik   AIC   BIC deviance df.residual
          <dbl>   <int>  <dbl> <dbl> <dbl>    <dbl>       <int>
1          43.2      31  -14.8  33.7  36.6     29.7          30
> 
> 
> 
> 
> cleanEx()
> nameEx("glance.ivreg")
> ### * glance.ivreg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.ivreg
> ### Title: Glance at a(n) ivreg object
> ### Aliases: glance.ivreg
> 
> ### ** Examples
> 
> 
> library(AER)
Loading required package: car
Loading required package: carData
Loading required package: lmtest
Loading required package: zoo

Attaching package: â€˜zooâ€™

The following objects are masked from â€˜package:baseâ€™:

    as.Date, as.Date.numeric

Loading required package: sandwich
Loading required package: survival
> 
> data("CigarettesSW", package = "AER")
> ivr <- ivreg(
+   log(packs) ~ income | population,
+   data = CigarettesSW,
+   subset = year == "1995"
+ )
> 
> summary(ivr)

Call:
ivreg(formula = log(packs) ~ income | population, data = CigarettesSW, 
    subset = year == "1995")

Residuals:
     Min       1Q   Median       3Q      Max 
-0.69305 -0.12941 -0.02257  0.11723  0.58184 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept)  4.612e+00  4.454e-02 103.549   <2e-16 ***
income      -5.705e-10  2.334e-10  -2.445   0.0184 *  
---
Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1

Residual standard error: 0.2293 on 46 degrees of freedom
Multiple R-Squared: 0.1308,	Adjusted R-squared: 0.1119 
Wald test: 5.976 on 1 and 46 DF,  p-value: 0.01839 

> 
> tidy(ivr)
# A tibble: 2 x 5
  term         estimate std.error statistic  p.value
  <chr>           <dbl>     <dbl>     <dbl>    <dbl>
1 (Intercept)  4.61e+ 0  4.45e- 2    104.   3.74e-56
2 income      -5.71e-10  2.33e-10     -2.44 1.84e- 2
> tidy(ivr, conf.int = TRUE)
# A tibble: 2 x 7
  term         estimate std.error statistic  p.value conf.low conf.high
  <chr>           <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
1 (Intercept)  4.61e+ 0  4.45e- 2    104.   3.74e-56  4.52e+0  4.70e+ 0
2 income      -5.71e-10  2.33e-10     -2.44 1.84e- 2 -1.03e-9 -1.13e-10
> tidy(ivr, conf.int = TRUE, exponentiate = TRUE)
Warning in process_lm(ret, x, conf.int = conf.int, conf.level = conf.level,  :
  Exponentiating coefficients, but model did not use a log or logit link function.
# A tibble: 2 x 7
  term        estimate std.error statistic  p.value conf.low conf.high
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
1 (Intercept)  101.     4.45e- 2    104.   3.74e-56   92.2     110.   
2 income         1.000  2.33e-10     -2.44 1.84e- 2    1.000     1.000
> 
> augment(ivr)
# A tibble: 48 x 6
   .rownames log.packs.    income population .fitted  .resid
   <chr>          <dbl>     <dbl>      <dbl>   <dbl>   <dbl>
 1 49              4.62  83903280    4262731    4.56  0.0522
 2 50              4.71  45995496    2480121    4.59  0.124 
 3 51              4.28  88870496    4306908    4.56 -0.285 
 4 52              4.04 771470144   31493524    4.17 -0.131 
 5 53              4.41  92946544    3738061    4.56 -0.145 
 6 54              4.38 104315120    3265293    4.55 -0.177 
 7 55              4.82  18237436     718265    4.60  0.223 
 8 56              4.53 333525344   14185403    4.42  0.112 
 9 57              4.58 159800448    7188538    4.52  0.0591
10 58              4.53  60170928    2840860    4.58 -0.0512
# â€¦ with 38 more rows
> 
> glance(ivr)
# A tibble: 1 x 7
  r.squared adj.r.squared sigma statistic p.value    df df.residual
      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <int>       <int>
1     0.131         0.112 0.229      5.98  0.0184     2          46
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:AERâ€™, â€˜package:survivalâ€™, â€˜package:sandwichâ€™,
  â€˜package:lmtestâ€™, â€˜package:zooâ€™, â€˜package:carâ€™, â€˜package:carDataâ€™

> nameEx("glance.lavaan")
> ### * glance.lavaan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.lavaan
> ### Title: Glance at a(n) lavaan object
> ### Aliases: glance.lavaan
> 
> ### ** Examples
> 
> 
> if (require("lavaan", quietly = TRUE)) {
+ 
+  library(lavaan)
+ 
+  cfa.fit <- cfa(
+    'F =~ x1 + x2 + x3 + x4 + x5',
+    data = HolzingerSwineford1939, group = "school"
+  )
+  glance(cfa.fit)
+ 
+ }
This is lavaan 0.6-3
lavaan is BETA software! Please report any bugs.
# A tibble: 1 x 17
   agfi   aic   bic   cfi chisq  npar rmsea rmsea.conf.high  srmr   tli
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>           <dbl> <dbl> <dbl>
1 0.971 4473. 4584. 0.766  99.3    30 0.244           0.288 0.115 0.533
# â€¦ with 7 more variables: converged <lgl>, estimator <chr>, ngroups <int>,
#   missing_method <chr>, nobs <int>, norig <int>, nexcluded <int>
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:lavaanâ€™

> nameEx("glance.rlm")
> ### * glance.rlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glance.rlm
> ### Title: Glance at a(n) rlm object
> ### Aliases: glance.rlm rlm_tidiers
> 
> ### ** Examples
> 
> 
> library(MASS)
> 
> r <- rlm(stack.loss ~ ., stackloss)
> tidy(r)
# A tibble: 4 x 4
  term        estimate std.error statistic
  <chr>          <dbl>     <dbl>     <dbl>
1 (Intercept)  -41.0       9.81     -4.18 
2 Air.Flow       0.829     0.111     7.46 
3 Water.Temp     0.926     0.303     3.05 
4 Acid.Conc.    -0.128     0.129    -0.992
> augment(r)
# A tibble: 21 x 9
   stack.loss Air.Flow Water.Temp Acid.Conc. .fitted .se.fit .resid   .hat
        <dbl>    <dbl>      <dbl>      <dbl>   <dbl>   <dbl>  <dbl>  <dbl>
 1         42       80         27         89    38.9   1.34   3.05  0.327 
 2         37       80         27         88    39.1   1.38  -2.08  0.343 
 3         37       75         25         90    32.8   1.02   4.18  0.155 
 4         28       62         24         87    21.5   0.875  6.50  0.0713
 5         18       62         22         87    19.6   0.558 -1.65  0.0562
 6         18       62         23         87    20.6   0.679 -2.57  0.0835
 7         19       62         24         93    20.7   1.14  -1.73  0.230 
 8         20       62         24         93    20.7   1.14  -0.731 0.230 
 9         15       58         23         87    17.3   0.914 -2.25  0.155 
10         14       58         18         80    13.5   1.09   0.481 0.213 
# â€¦ with 11 more rows, and 1 more variable: .sigma <dbl>
> glance(r)
# A tibble: 1 x 6
  sigma converged logLik   AIC   BIC deviance
  <dbl> <lgl>      <dbl> <dbl> <dbl>    <dbl>
1  2.44 TRUE       -53.0  116.  121.     191.
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:MASSâ€™

> nameEx("lme4_tidiers")
> ### * lme4_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lme4_tidiers
> ### Title: Tidying methods for mixed effects models
> ### Aliases: lme4_tidiers tidy.merMod augment.merMod glance.merMod
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D if (require("lme4")) {
> ##D     # example regressions are from lme4 documentation
> ##D     lmm1 <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
> ##D     tidy(lmm1)
> ##D     tidy(lmm1, effects = "fixed")
> ##D     tidy(lmm1, effects = "fixed", conf.int=TRUE)
> ##D     tidy(lmm1, effects = "fixed", conf.int=TRUE, conf.method="profile")
> ##D     tidy(lmm1, effects = "ran_modes", conf.int=TRUE)
> ##D     head(augment(lmm1, sleepstudy))
> ##D     glance(lmm1)
> ##D 
> ##D     glmm1 <- glmer(cbind(incidence, size - incidence) ~ period + (1 | herd),
> ##D                   data = cbpp, family = binomial)
> ##D     tidy(glmm1)
> ##D     tidy(glmm1, effects = "fixed")
> ##D     head(augment(glmm1, cbpp))
> ##D     glance(glmm1)
> ##D 
> ##D     startvec <- c(Asym = 200, xmid = 725, scal = 350)
> ##D     nm1 <- nlmer(circumference ~ SSlogis(age, Asym, xmid, scal) ~ Asym|Tree,
> ##D                   Orange, start = startvec)
> ##D     tidy(nm1)
> ##D     tidy(nm1, effects = "fixed")
> ##D     head(augment(nm1, Orange))
> ##D     glance(nm1)
> ##D }
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("matrix_tidiers")
> ### * matrix_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matrix_tidiers
> ### Title: Tidiers for matrix objects
> ### Aliases: matrix_tidiers tidy.matrix glance.matrix
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D mat <- as.matrix(mtcars)
> ##D tidy(mat)
> ##D glance(mat)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("mcmc_tidiers")
> ### * mcmc_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcmc_tidiers
> ### Title: Tidying methods for MCMC (Stan, JAGS, etc.) fits
> ### Aliases: mcmc_tidiers tidyMCMC tidy.rjags tidy.stanfit
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D # Using example from "RStan Getting Started"
> ##D # https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started
> ##D 
> ##D model_file <- system.file("extdata", "8schools.stan", package = "broom")
> ##D 
> ##D schools_dat <- list(J = 8,
> ##D                     y = c(28,  8, -3,  7, -1,  1, 18, 12),
> ##D                     sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
> ##D 
> ##D if (requireNamespace("rstan", quietly = TRUE)) {
> ##D   set.seed(2015)
> ##D   rstan_example <- stan(file = model_file, data = schools_dat,
> ##D                         iter = 100, chains = 2)
> ##D }
> ##D 
> ## End(Not run)
> 
> if (requireNamespace("rstan", quietly = TRUE)) {
+   # the object from the above code was saved as rstan_example.rda
+   infile <- system.file("extdata", "rstan_example.rda", package = "broom")
+   load(infile)
+ 
+   tidy(rstan_example)
+   tidy(rstan_example, conf.int = TRUE, pars = "theta")
+ 
+   td_mean <- tidy(rstan_example, conf.int = TRUE)
+   td_median <- tidy(rstan_example, conf.int = TRUE, estimate.method = "median")
+ 
+   library(dplyr)
+   library(ggplot2)
+   tds <- rbind(mutate(td_mean, method = "mean"),
+                mutate(td_median, method = "median"))
+ 
+   ggplot(tds, aes(estimate, term)) +
+     geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
+     geom_point(aes(color = method))
+ }

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

> 
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:dplyrâ€™

> nameEx("mgcv_tidy_gam")
> ### * mgcv_tidy_gam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.gam
> ### Title: Tidy a(n) gam object
> ### Aliases: tidy.gam mgcv_tidiers gam_tidiers
> 
> ### ** Examples
> 
> 
> g <- mgcv::gam(mpg ~ s(hp) + am + qsec, data = mtcars)
>   
> tidy(g)
# A tibble: 1 x 5
  term    edf ref.df statistic p.value
  <chr> <dbl>  <dbl>     <dbl>   <dbl>
1 s(hp)  2.36   3.02      6.34 0.00207
> tidy(g, parametric = TRUE)
# A tibble: 3 x 5
  term        estimate std.error statistic p.value
  <chr>          <dbl>     <dbl>     <dbl>   <dbl>
1 (Intercept)  16.7        9.83      1.70  0.101  
2 am            4.37       1.56      2.81  0.00918
3 qsec          0.0904     0.525     0.172 0.865  
> glance(g)
# A tibble: 1 x 6
     df logLik   AIC   BIC deviance df.residual
  <dbl>  <dbl> <dbl> <dbl>    <dbl>       <dbl>
1  5.36  -74.4  162.  171.     196.        26.6
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("nlme_tidiers")
> ### * nlme_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlme_tidiers
> ### Title: Tidying methods for mixed effects models
> ### Aliases: nlme_tidiers tidy.lme augment.lme glance.lme
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D if (require("nlme") & require("lme4")) {
> ##D     # example regressions are from lme4 documentation, but used for nlme
> ##D     lmm1 <- lme(Reaction ~ Days, random=~ Days|Subject, sleepstudy)
> ##D     tidy(lmm1)
> ##D     tidy(lmm1, effects = "fixed")
> ##D     head(augment(lmm1, sleepstudy))
> ##D     glance(lmm1)
> ##D 
> ##D 
> ##D     startvec <- c(Asym = 200, xmid = 725, scal = 350)
> ##D     nm1 <- nlme(circumference ~ SSlogis(age, Asym, xmid, scal),
> ##D                   data = Orange,
> ##D                   fixed = Asym + xmid + scal ~1,
> ##D                   random = Asym ~1,
> ##D                   start = startvec)
> ##D     tidy(nm1)
> ##D     tidy(nm1, effects = "fixed")
> ##D     head(augment(nm1, Orange))
> ##D     glance(nm1)
> ##D }
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("ordinal_tidiers")
> ### * ordinal_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.polr
> ### Title: Tidying methods for ordinal logistic regression models
> ### Aliases: tidy.polr glance.polr augment.polr ordinal_tidiers tidy.clm
> ###   tidy.clmm glance.clm glance.clmm augment.clm tidy.svyolr
> ###   glance.svyolr
> 
> ### ** Examples
> 
> if (require(ordinal)){
+   clm_mod <- clm(rating ~ temp * contact, data = wine)
+   tidy(clm_mod)
+   tidy(clm_mod, conf.int = TRUE)
+   tidy(clm_mod, conf.int = TRUE, conf.type = "Wald", exponentiate = TRUE)
+   glance(clm_mod)
+   augment(clm_mod)
+ 
+   clm_mod2 <- clm(rating ~ temp, nominal = ~ contact, data = wine)
+   tidy(clm_mod2)
+ 
+   clmm_mod <- clmm(rating ~ temp + contact + (1 | judge), data = wine)
+   tidy(clmm_mod)
+   glance(clmm_mod)
+ }
Loading required package: ordinal
# A tibble: 1 x 4
    edf logLik   AIC   BIC
  <dbl>  <dbl> <dbl> <dbl>
1     7  -81.6  177.  193.
> if (require(MASS)) {
+   polr_mod <- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)
+   tidy(polr_mod, exponentiate = TRUE, conf.int = TRUE)
+   glance(polr_mod)
+   augment(polr_mod, type.predict = "class")
+ }
Loading required package: MASS
# A tibble: 72 x 6
   Sat    Infl   Type      Cont  X.weights. .fitted
   <ord>  <fct>  <fct>     <fct>      <int>   <dbl>
 1 Low    Low    Tower     Low           21       1
 2 Medium Low    Tower     Low           21       1
 3 High   Low    Tower     Low           28       1
 4 Low    Medium Tower     Low           34       3
 5 Medium Medium Tower     Low           22       3
 6 High   Medium Tower     Low           36       3
 7 Low    High   Tower     Low           10       3
 8 Medium High   Tower     Low           11       3
 9 High   High   Tower     Low           36       3
10 Low    Low    Apartment Low           61       1
# â€¦ with 62 more rows
> 
> 
> 
> cleanEx()

detaching â€˜package:MASSâ€™, â€˜package:ordinalâ€™

> nameEx("rowwise_df_tidiers")
> ### * rowwise_df_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rowwise_df_tidiers
> ### Title: Tidying methods for rowwise_dfs from dplyr, for tidying each row
> ###   and recombining the results
> ### Aliases: rowwise_df_tidiers tidy.rowwise_df tidy_.rowwise_df
> ###   augment.rowwise_df augment_.rowwise_df glance.rowwise_df
> ###   glance_.rowwise_df tidy.tbl_df augment.tbl_df glance.tbl_df
> 
> ### ** Examples
> 
> 
> library(dplyr)

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

> regressions <- mtcars %>%
+     group_by(cyl) %>%
+     do(mod = lm(mpg ~ wt, .))
> 
> regressions
Source: local data frame [3 x 2]
Groups: <by row>

# A tibble: 3 x 2
    cyl mod     
* <dbl> <list>  
1     4 <S3: lm>
2     6 <S3: lm>
3     8 <S3: lm>
> 
> regressions %>% tidy(mod)
# A tibble: 6 x 6
# Groups:   cyl [3]
    cyl term        estimate std.error statistic    p.value
  <dbl> <chr>          <dbl>     <dbl>     <dbl>      <dbl>
1     4 (Intercept)    39.6      4.35       9.10 0.00000777
2     4 wt             -5.65     1.85      -3.05 0.0137    
3     6 (Intercept)    28.4      4.18       6.79 0.00105   
4     6 wt             -2.78     1.33      -2.08 0.0918    
5     8 (Intercept)    23.9      3.01       7.94 0.00000405
6     8 wt             -2.19     0.739     -2.97 0.0118    
> regressions %>% augment(mod)
# A tibble: 32 x 10
# Groups:   cyl [3]
     cyl   mpg    wt .fitted .se.fit  .resid   .hat .sigma   .cooksd .std.resid
   <dbl> <dbl> <dbl>   <dbl>   <dbl>   <dbl>  <dbl>  <dbl>     <dbl>      <dbl>
 1     4  22.8  2.32    26.5    1.01 -3.67   0.0913   3.26 0.0670       -1.16  
 2     4  24.4  3.19    21.6    1.95  2.84   0.343    3.31 0.289         1.05  
 3     4  22.8  3.15    21.8    1.89  1.02   0.321    3.51 0.0325        0.370 
 4     4  32.4  2.2     27.1    1.02  5.25   0.0932   2.95 0.141         1.66  
 5     4  30.4  1.62    30.5    1.60 -0.0513 0.230    3.53 0.0000457    -0.0175
 6     4  33.9  1.84    29.2    1.31  4.69   0.154    3.04 0.212         1.53  
 7     4  21.5  2.46    25.7    1.06 -4.15   0.101    3.18 0.0968       -1.31  
 8     4  27.3  1.94    28.6    1.20 -1.34   0.129    3.50 0.0138       -0.432 
 9     4  26    2.14    27.5    1.04 -1.49   0.0975   3.49 0.0119       -0.470 
10     4  30.4  1.51    31.0    1.75 -0.627  0.275    3.52 0.00927      -0.221 
# â€¦ with 22 more rows
> regressions %>% glance(mod)
# A tibble: 3 x 12
# Groups:   cyl [3]
    cyl r.squared adj.r.squared sigma statistic p.value    df logLik   AIC   BIC
  <dbl>     <dbl>         <dbl> <dbl>     <dbl>   <dbl> <int>  <dbl> <dbl> <dbl>
1     4     0.509         0.454  3.33      9.32  0.0137     2 -27.7   61.5  62.7
2     6     0.465         0.357  1.17      4.34  0.0918     2  -9.83  25.7  25.5
3     8     0.423         0.375  2.02      8.80  0.0118     2 -28.7   63.3  65.2
# â€¦ with 2 more variables: deviance <dbl>, df.residual <int>
> 
> # we can provide additional arguments to the tidying function
> regressions %>% tidy(mod, conf.int = TRUE)
# A tibble: 6 x 8
# Groups:   cyl [3]
    cyl term        estimate std.error statistic    p.value conf.low conf.high
  <dbl> <chr>          <dbl>     <dbl>     <dbl>      <dbl>    <dbl>     <dbl>
1     4 (Intercept)    39.6      4.35       9.10 0.00000777    29.7     49.4  
2     4 wt             -5.65     1.85      -3.05 0.0137        -9.83    -1.46 
3     6 (Intercept)    28.4      4.18       6.79 0.00105       17.7     39.2  
4     6 wt             -2.78     1.33      -2.08 0.0918        -6.21     0.651
5     8 (Intercept)    23.9      3.01       7.94 0.00000405    17.3     30.4  
6     8 wt             -2.19     0.739     -2.97 0.0118        -3.80    -0.582
> 
> # we can also include the original dataset as a "data" argument
> # to augment:
> regressions <- mtcars %>%
+     group_by(cyl) %>%
+     do(mod = lm(mpg ~ wt, .), original = (.))
> 
> # this allows all the original columns to be included:
> regressions %>% augment(mod)  # doesn't include all original
# A tibble: 32 x 10
# Groups:   cyl [3]
     cyl   mpg    wt .fitted .se.fit  .resid   .hat .sigma   .cooksd .std.resid
   <dbl> <dbl> <dbl>   <dbl>   <dbl>   <dbl>  <dbl>  <dbl>     <dbl>      <dbl>
 1     4  22.8  2.32    26.5    1.01 -3.67   0.0913   3.26 0.0670       -1.16  
 2     4  24.4  3.19    21.6    1.95  2.84   0.343    3.31 0.289         1.05  
 3     4  22.8  3.15    21.8    1.89  1.02   0.321    3.51 0.0325        0.370 
 4     4  32.4  2.2     27.1    1.02  5.25   0.0932   2.95 0.141         1.66  
 5     4  30.4  1.62    30.5    1.60 -0.0513 0.230    3.53 0.0000457    -0.0175
 6     4  33.9  1.84    29.2    1.31  4.69   0.154    3.04 0.212         1.53  
 7     4  21.5  2.46    25.7    1.06 -4.15   0.101    3.18 0.0968       -1.31  
 8     4  27.3  1.94    28.6    1.20 -1.34   0.129    3.50 0.0138       -0.432 
 9     4  26    2.14    27.5    1.04 -1.49   0.0975   3.49 0.0119       -0.470 
10     4  30.4  1.51    31.0    1.75 -0.627  0.275    3.52 0.00927      -0.221 
# â€¦ with 22 more rows
> regressions %>% augment(mod, data = original)  # includes all original
# A tibble: 32 x 18
# Groups:   cyl [3]
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb .fitted
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>
 1  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1    26.5
 2  24.4     4 147.     62  3.69  3.19  20       1     0     4     2    21.6
 3  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2    21.8
 4  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1    27.1
 5  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2    30.5
 6  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1    29.2
 7  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1    25.7
 8  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1    28.6
 9  26       4 120.     91  4.43  2.14  16.7     0     1     5     2    27.5
10  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2    31.0
# â€¦ with 22 more rows, and 6 more variables: .se.fit <dbl>, .resid <dbl>,
#   .hat <dbl>, .sigma <dbl>, .cooksd <dbl>, .std.resid <dbl>
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:dplyrâ€™

> nameEx("rstanarm_tidiers")
> ### * rstanarm_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rstanarm_tidiers
> ### Title: Tidying methods for an rstanarm model
> ### Aliases: rstanarm_tidiers tidy.stanreg glance.stanreg
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D fit <- stan_glmer(mpg ~ wt + (1|cyl) + (1+wt|gear), data = mtcars,
> ##D                   iter = 300, chains = 2)
> ##D # non-varying ("population") parameters
> ##D tidy(fit, intervals = TRUE, prob = 0.5)
> ##D 
> ##D # hierarchical sd & correlation parameters
> ##D tidy(fit, parameters = "hierarchical")
> ##D 
> ##D # group-specific deviations from "population" parameters
> ##D tidy(fit, parameters = "varying")
> ##D 
> ##D # glance method
> ##D glance(fit)
> ##D glance(fit, looic = TRUE, cores = 1)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("summary_tidiers")
> ### * summary_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary_tidiers
> ### Title: Tidy/glance a(n) summaryDefault object
> ### Aliases: summary_tidiers tidy.summaryDefault glance.summaryDefault
> 
> ### ** Examples
> 
> 
> v <- rnorm(1000)
> s <- summary(v)
> s
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
-3.00805 -0.69737 -0.03532 -0.01165  0.68843  3.81028 
> 
> tidy(s)
# A tibble: 1 x 6
  minimum     q1  median    mean    q3 maximum
    <dbl>  <dbl>   <dbl>   <dbl> <dbl>   <dbl>
1   -3.01 -0.697 -0.0353 -0.0116 0.688    3.81
> glance(s)
# A tibble: 1 x 6
  minimum     q1  median    mean    q3 maximum
    <dbl>  <dbl>   <dbl>   <dbl> <dbl>   <dbl>
1   -3.01 -0.697 -0.0353 -0.0116 0.688    3.81
> 
> v2 <- c(v,NA)
> tidy(summary(v2))
# A tibble: 1 x 7
  minimum     q1  median    mean    q3 maximum    na
    <dbl>  <dbl>   <dbl>   <dbl> <dbl>   <dbl> <dbl>
1   -3.01 -0.697 -0.0353 -0.0116 0.688    3.81     1
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.Arima")
> ### * tidy.Arima
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.Arima
> ### Title: Tidy a(n) Arima object
> ### Aliases: tidy.Arima Arima_tidiers
> 
> ### ** Examples
> 
> 
> fit <- arima(lh, order = c(1, 0, 0))
> tidy(fit)
# A tibble: 2 x 3
  term      estimate std.error
  <fct>        <dbl>     <dbl>
1 ar1          0.574     0.116
2 intercept    2.41      0.147
> glance(fit)
# A tibble: 1 x 4
  sigma logLik   AIC   BIC
  <dbl>  <dbl> <dbl> <dbl>
1 0.444  -29.4  64.8  70.4
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.Gam")
> ### * tidy.Gam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.Gam
> ### Title: Tidy a(n) Gam object
> ### Aliases: tidy.Gam Gam_tidiers
> 
> ### ** Examples
> 
> 
> library(gam)
Loading required package: splines
Loading required package: foreach
Loaded gam 1.16

> g <- gam(mpg ~ s(hp, 4) + am + qsec, data = mtcars)
Warning in model.matrix.default(mt, mf, contrasts) :
  non-list contrasts argument ignored
>   
> tidy(g)
# A tibble: 4 x 6
  term         df    sumsq   meansq statistic   p.value
  <chr>     <dbl>    <dbl>    <dbl>     <dbl>     <dbl>
1 s(hp, 4)    1   678.     678.      94.4      5.73e-10
2 am          1   113.     113.      15.7      5.52e- 4
3 qsec        1     0.0263   0.0263   0.00366  9.52e- 1
4 Residuals  25.0 180.       7.19    NA       NA       
> glance(g)
# A tibble: 1 x 6
     df logLik   AIC   BIC deviance df.residual
  <dbl>  <dbl> <dbl> <dbl>    <dbl>       <dbl>
1  7.00  -76.0  162.  169.     180.        25.0
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:gamâ€™, â€˜package:foreachâ€™, â€˜package:splinesâ€™

> nameEx("tidy.Kendall")
> ### * tidy.Kendall
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.Kendall
> ### Title: Tidy a(n) Kendall object
> ### Aliases: tidy.Kendall Kendall_tidiers kendall_tidiers
> 
> ### ** Examples
> 
> library(Kendall)
> 
> A <- c(2.5,2.5,2.5,2.5,5,6.5,6.5,10,10,10,10,10,14,14,14,16,17)
> B <- c(1,1,1,1,2,1,1,2,1,1,1,1,1,1,2,2,2)
> 
> f_res <- Kendall(A, B)
> tidy(f_res)
# A tibble: 1 x 5
  statistic p.value kendall_score denominator var_kendall_score
      <dbl>   <dbl>         <dbl>       <dbl>             <dbl>
1     0.408  0.0754            34        83.4              345.
> 
> s_res <- MannKendall(B)
> tidy(s_res)
# A tibble: 1 x 5
  statistic p.value kendall_score denominator var_kendall_score
      <dbl>   <dbl>         <dbl>       <dbl>             <dbl>
1     0.354   0.102            32        90.3               360
> 
> t_res <- SeasonalMannKendall(ts(A))
> tidy(t_res)
# A tibble: 1 x 5
  statistic     p.value kendall_score denominator var_kendall_score
      <dbl>       <dbl>         <dbl>       <dbl>             <dbl>
1     0.924 0.000000935           116        126.              559.
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:Kendallâ€™

> nameEx("tidy.Mclust")
> ### * tidy.Mclust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.Mclust
> ### Title: Tidy a(n) Mclust object
> ### Aliases: tidy.Mclust mclust_tidiers
> 
> ### ** Examples
> 
> 
> library(dplyr) 

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

> library(mclust)
Package 'mclust' version 5.4.3
Type 'citation("mclust")' for citing this R package in publications.
> set.seed(27)
> 
> centers <- tibble::tibble(
+   cluster = factor(1:3), 
+   num_points = c(100, 150, 50),  # number points in each cluster
+   x1 = c(5, 0, -3),              # x1 coordinate of cluster center
+   x2 = c(-1, 1, -2)              # x2 coordinate of cluster center
+ )
> 
> points <- centers %>%
+   mutate(
+     x1 = purrr::map2(num_points, x1, rnorm),
+     x2 = purrr::map2(num_points, x2, rnorm)
+   ) %>% 
+   select(-num_points, -cluster) %>%
+   tidyr::unnest(x1, x2)
> 
> m <- mclust::Mclust(points)
> 
> tidy(m)
# A tibble: 3 x 6
  component  size proportion variance mean.x1 mean.x2
      <int> <int>      <dbl>    <dbl>   <dbl>   <dbl>
1         1   101      0.335     1.12  5.01     -1.04
2         2   150      0.503     1.12  0.0594    1.00
3         3    49      0.161     1.12 -3.20     -2.06
> augment(m, points)
# A tibble: 300 x 4
      x1     x2 .class .uncertainty
   <dbl>  <dbl> <fct>         <dbl>
 1  6.91 -2.74  1          3.98e-11
 2  6.14 -2.45  1          1.99e- 9
 3  4.24 -0.946 1          1.47e- 4
 4  3.54  0.287 1          2.94e- 2
 5  3.91  0.408 1          7.48e- 3
 6  5.30 -1.58  1          4.22e- 7
 7  5.01 -1.77  1          1.06e- 6
 8  6.16 -1.68  1          7.64e- 9
 9  7.13 -2.17  1          4.16e-11
10  5.24 -2.42  1          1.16e- 7
# â€¦ with 290 more rows
> glance(m)
# A tibble: 1 x 7
  model     n     G    BIC logLik    df hypvol
  <chr> <int> <int>  <dbl>  <dbl> <dbl>  <dbl>
1 EII     300     3 -2402. -1175.     9     NA
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:mclustâ€™, â€˜package:dplyrâ€™

> nameEx("tidy.TukeyHSD")
> ### * tidy.TukeyHSD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.TukeyHSD
> ### Title: Tidy a(n) TukeyHSD object
> ### Aliases: tidy.TukeyHSD
> 
> ### ** Examples
> 
> 
> fm1 <- aov(breaks ~ wool + tension, data = warpbreaks)
> thsd <- TukeyHSD(fm1, "tension", ordered = TRUE)
> tidy(thsd)
# A tibble: 3 x 6
  term    comparison estimate conf.low conf.high adj.p.value
  <chr>   <chr>         <dbl>    <dbl>     <dbl>       <dbl>
1 tension M-H            4.72   -4.63       14.1     0.447  
2 tension L-H           14.7     5.37       24.1     0.00112
3 tension L-M           10.      0.647      19.4     0.0336 
> 
> # may include comparisons on multiple terms
> fm2 <- aov(mpg ~ as.factor(gear) * as.factor(cyl), data = mtcars)
> tidy(TukeyHSD(fm2))
# A tibble: 42 x 6
   term                       comparison estimate conf.low conf.high adj.p.value
   <chr>                      <chr>         <dbl>    <dbl>     <dbl>       <dbl>
 1 as.factor(gear)            4-3           8.43     5.19      11.7   0.00000297
 2 as.factor(gear)            5-3           5.27     0.955      9.59  0.0147    
 3 as.factor(gear)            5-4          -3.15    -7.60       1.30  0.201     
 4 as.factor(cyl)             6-4          -5.40    -9.45      -1.36  0.00748   
 5 as.factor(cyl)             8-4          -5.23    -8.60      -1.86  0.00201   
 6 as.factor(cyl)             8-6           0.172   -3.70       4.04  0.993     
 7 as.factor(gear):as.factorâ€¦ 4:4-3:4       5.42    -6.65      17.5   0.832     
 8 as.factor(gear):as.factorâ€¦ 5:4-3:4       6.70    -7.24      20.6   0.778     
 9 as.factor(gear):as.factorâ€¦ 3:6-3:4      -1.75   -15.7       12.2   1.000     
10 as.factor(gear):as.factorâ€¦ 4:6-3:4      -1.75   -14.5       11.0   1.000     
# â€¦ with 32 more rows
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.aareg")
> ### * tidy.aareg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.aareg
> ### Title: Tidy a(n) aareg object
> ### Aliases: tidy.aareg aareg_tidiers
> 
> ### ** Examples
> 
> 
> library(survival)
> 
> afit <- aareg(
+   Surv(time, status) ~ age + sex + ph.ecog,
+   data = lung,
+   dfbeta = TRUE
+ )
> 
> tidy(afit) 
# A tibble: 4 x 7
  term        estimate  statistic std.error robust.se statistic.z  p.value
  <chr>          <dbl>      <dbl>     <dbl>     <dbl>       <dbl>    <dbl>
1 Intercept  0.00505    0.00587   0.00474   0.00477          1.23 0.219   
2 age        0.0000401  0.0000715 0.0000723 0.0000700        1.02 0.307   
3 sex       -0.00316   -0.00403   0.00122   0.00123         -3.28 0.00103 
4 ph.ecog    0.00301    0.00367   0.00102   0.00102          3.62 0.000299
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:survivalâ€™

> nameEx("tidy.acf")
> ### * tidy.acf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.acf
> ### Title: Tidy a(n) acf object
> ### Aliases: tidy.acf
> 
> ### ** Examples
> 
> 
> tidy(acf(lh, plot = FALSE))
# A tibble: 17 x 2
     lag      acf
   <dbl>    <dbl>
 1     0  1.000  
 2     1  0.576  
 3     2  0.182  
 4     3 -0.145  
 5     4 -0.175  
 6     5 -0.150  
 7     6 -0.0210 
 8     7 -0.0203 
 9     8 -0.00420
10     9 -0.136  
11    10 -0.154  
12    11 -0.0972 
13    12  0.0490 
14    13  0.120  
15    14  0.0867 
16    15  0.119  
17    16  0.151  
> tidy(ccf(mdeaths, fdeaths, plot = FALSE))
# A tibble: 31 x 2
      lag     acf
    <dbl>   <dbl>
 1 -1.25   0.0151
 2 -1.17   0.366 
 3 -1.08   0.615 
 4 -1      0.708 
 5 -0.917  0.622 
 6 -0.833  0.340 
 7 -0.75  -0.0245
 8 -0.667 -0.382 
 9 -0.583 -0.612 
10 -0.5   -0.678 
# â€¦ with 21 more rows
> tidy(pacf(lh, plot = FALSE))
# A tibble: 16 x 2
     lag      acf
   <dbl>    <dbl>
 1     1  0.576  
 2     2 -0.223  
 3     3 -0.227  
 4     4  0.103  
 5     5 -0.0759 
 6     6  0.0676 
 7     7 -0.104  
 8     8  0.0120 
 9     9 -0.188  
10    10  0.00255
11    11  0.0656 
12    12  0.0320 
13    13  0.0219 
14    14 -0.0931 
15    15  0.230  
16    16  0.0444 
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.anova")
> ### * tidy.anova
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.anova
> ### Title: Tidy a(n) anova object
> ### Aliases: tidy.anova
> 
> ### ** Examples
> 
> 
> a <- a <- aov(mpg ~ wt + qsec + disp, mtcars)
> tidy(a)
# A tibble: 4 x 6
  term         df     sumsq    meansq  statistic   p.value
  <chr>     <dbl>     <dbl>     <dbl>      <dbl>     <dbl>
1 wt            1 848.      848.      121.        1.08e-11
2 qsec          1  82.9      82.9      11.9       1.82e- 3
3 disp          1   0.00102   0.00102   0.000147  9.90e- 1
4 Residuals    28 195.        6.98     NA        NA       
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.aov")
> ### * tidy.aov
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.aov
> ### Title: Tidy a(n) aov object
> ### Aliases: tidy.aov
> 
> ### ** Examples
> 
> 
> a <- aov(mpg ~ wt + qsec + disp, mtcars)
> tidy(a)
# A tibble: 4 x 6
  term         df     sumsq    meansq  statistic   p.value
  <chr>     <dbl>     <dbl>     <dbl>      <dbl>     <dbl>
1 wt            1 848.      848.      121.        1.08e-11
2 qsec          1  82.9      82.9      11.9       1.82e- 3
3 disp          1   0.00102   0.00102   0.000147  9.90e- 1
4 Residuals    28 195.        6.98     NA        NA       
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.aovlist")
> ### * tidy.aovlist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.aovlist
> ### Title: Tidy a(n) aovlist object
> ### Aliases: tidy.aovlist
> 
> ### ** Examples
> 
> 
> a <- aov(mpg ~ wt + qsec + Error(disp / am), mtcars)
> tidy(a)
# A tibble: 5 x 7
  stratum term         df   sumsq  meansq statistic  p.value
  <chr>   <chr>     <dbl>   <dbl>   <dbl>     <dbl>    <dbl>
1 disp    wt            1 809.    809.        NA    NA      
2 disp:am wt            1   0.389   0.389     NA    NA      
3 Within  wt            1  87.2    87.2       12.0   0.00176
4 Within  qsec          1  34.2    34.2        4.72  0.0387 
5 Within  Residuals    27 195.      7.24      NA    NA      
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.betareg")
> ### * tidy.betareg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.betareg
> ### Title: Tidy a(n) betareg object
> ### Aliases: tidy.betareg betareg_tidiers
> 
> ### ** Examples
> 
> 
> library(betareg)
> 
> data("GasolineYield", package = "betareg")
> 
> mod <- betareg(yield ~ batch + temp, data = GasolineYield)
> 
> mod

Call:
betareg(formula = yield ~ batch + temp, data = GasolineYield)

Coefficients (mean model with logit link):
(Intercept)       batch1       batch2       batch3       batch4       batch5  
   -6.15957      1.72773      1.32260      1.57231      1.05971      1.13375  
     batch6       batch7       batch8       batch9         temp  
    1.04016      0.54369      0.49590      0.38579      0.01097  

Phi coefficients (precision model with identity link):
(phi)  
440.3  

> tidy(mod)
# A tibble: 12 x 6
   component term         estimate  std.error statistic   p.value
   <chr>     <chr>           <dbl>      <dbl>     <dbl>     <dbl>
 1 mean      (Intercept)   -6.16     0.182       -33.8  3.44e-250
 2 mean      batch1         1.73     0.101        17.1  2.59e- 65
 3 mean      batch2         1.32     0.118        11.2  3.34e- 29
 4 mean      batch3         1.57     0.116        13.5  8.81e- 42
 5 mean      batch4         1.06     0.102        10.4  4.06e- 25
 6 mean      batch5         1.13     0.104        11.0  6.52e- 28
 7 mean      batch6         1.04     0.106         9.81 1.03e- 22
 8 mean      batch7         0.544    0.109         4.98 6.29e-  7
 9 mean      batch8         0.496    0.109         4.55 5.30e-  6
10 mean      batch9         0.386    0.119         3.25 1.14e-  3
11 mean      temp           0.0110   0.000413     26.6  1.26e-155
12 precision (phi)        440.     110.            4.00 6.29e-  5
> tidy(mod, conf.int = TRUE)
# A tibble: 12 x 8
   component term      estimate std.error statistic   p.value conf.low conf.high
   <chr>     <chr>        <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl>
 1 mean      (Intercâ€¦   -6.16     1.82e-1    -33.8  3.44e-250 -6.52e+0   -5.80  
 2 mean      batch1      1.73     1.01e-1     17.1  2.59e- 65  1.53e+0    1.93  
 3 mean      batch2      1.32     1.18e-1     11.2  3.34e- 29  1.09e+0    1.55  
 4 mean      batch3      1.57     1.16e-1     13.5  8.81e- 42  1.34e+0    1.80  
 5 mean      batch4      1.06     1.02e-1     10.4  4.06e- 25  8.59e-1    1.26  
 6 mean      batch5      1.13     1.04e-1     11.0  6.52e- 28  9.31e-1    1.34  
 7 mean      batch6      1.04     1.06e-1      9.81 1.03e- 22  8.32e-1    1.25  
 8 mean      batch7      0.544    1.09e-1      4.98 6.29e-  7  3.30e-1    0.758 
 9 mean      batch8      0.496    1.09e-1      4.55 5.30e-  6  2.82e-1    0.709 
10 mean      batch9      0.386    1.19e-1      3.25 1.14e-  3  1.53e-1    0.618 
11 mean      temp        0.0110   4.13e-4     26.6  1.26e-155  1.02e-2    0.0118
12 precision (phi)     440.       1.10e+2      4.00 6.29e-  5  2.25e+2  656.    
> tidy(mod, conf.int = TRUE, conf.level = .99)
# A tibble: 12 x 8
   component term      estimate std.error statistic   p.value conf.low conf.high
   <chr>     <chr>        <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl>
 1 mean      (Intercâ€¦   -6.16     1.82e-1    -33.8  3.44e-250 -6.63e+0   -5.69  
 2 mean      batch1      1.73     1.01e-1     17.1  2.59e- 65  1.47e+0    1.99  
 3 mean      batch2      1.32     1.18e-1     11.2  3.34e- 29  1.02e+0    1.63  
 4 mean      batch3      1.57     1.16e-1     13.5  8.81e- 42  1.27e+0    1.87  
 5 mean      batch4      1.06     1.02e-1     10.4  4.06e- 25  7.96e-1    1.32  
 6 mean      batch5      1.13     1.04e-1     11.0  6.52e- 28  8.67e-1    1.40  
 7 mean      batch6      1.04     1.06e-1      9.81 1.03e- 22  7.67e-1    1.31  
 8 mean      batch7      0.544    1.09e-1      4.98 6.29e-  7  2.63e-1    0.825 
 9 mean      batch8      0.496    1.09e-1      4.55 5.30e-  6  2.15e-1    0.776 
10 mean      batch9      0.386    1.19e-1      3.25 1.14e-  3  8.03e-2    0.691 
11 mean      temp        0.0110   4.13e-4     26.6  1.26e-155  9.90e-3    0.0120
12 precision (phi)     440.       1.10e+2      4.00 6.29e-  5  1.57e+2  724.    
> 
> augment(mod)
# A tibble: 32 x 6
   yield batch  temp .fitted .resid   .cooksd
   <dbl> <fct> <dbl>   <dbl>  <dbl>     <dbl>
 1 0.122 1       205  0.101   1.59  0.0791   
 2 0.223 1       275  0.195   1.66  0.0917   
 3 0.347 1       345  0.343   0.211 0.00155  
 4 0.457 1       407  0.508  -2.88  0.606    
 5 0.08  2       218  0.0797  0.109 0.0000168
 6 0.131 2       273  0.137  -0.365 0.00731  
 7 0.266 2       347  0.263   0.260 0.00523  
 8 0.074 3       212  0.0943 -1.77  0.0805   
 9 0.182 3       272  0.167   1.02  0.0441   
10 0.304 3       340  0.298   0.446 0.0170   
# â€¦ with 22 more rows
> 
> glance(mod)
# A tibble: 1 x 6
  pseudo.r.squared df.null logLik   AIC   BIC df.residual
             <dbl>   <dbl>  <dbl> <dbl> <dbl>       <int>
1            0.962      30   84.8 -146. -128.          20
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:betaregâ€™

> nameEx("tidy.biglm")
> ### * tidy.biglm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.biglm
> ### Title: Tidy a(n) biglm object
> ### Aliases: tidy.biglm
> 
> ### ** Examples
> 
> 
> if (require("biglm", quietly = TRUE)) {
+     bfit <- biglm(mpg ~ wt + disp, mtcars)
+     tidy(bfit)
+     tidy(bfit, conf.int = TRUE)
+     tidy(bfit, conf.int = TRUE, conf.level = .9)
+ 
+     glance(bfit)
+ 
+     # bigglm: logistic regression
+     bgfit <- bigglm(am ~ mpg, mtcars, family = binomial())
+     tidy(bgfit)
+     tidy(bgfit, exponentiate = TRUE)
+     tidy(bgfit, conf.int = TRUE)
+     tidy(bgfit, conf.int = TRUE, conf.level = .9)
+     tidy(bgfit, conf.int = TRUE, conf.level = .9, exponentiate = TRUE)
+ 
+     glance(bgfit)
+ }
# A tibble: 1 x 3
  r.squared   AIC deviance
      <dbl> <dbl>    <dbl>
1     0.175  33.7     29.7
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:biglmâ€™, â€˜package:DBIâ€™

> nameEx("tidy.binDesign")
> ### * tidy.binDesign
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.binDesign
> ### Title: Tidy a(n) binDesign object
> ### Aliases: tidy.binDesign bindesign_tidiers
> 
> ### ** Examples
> 
> 
> if (require("binGroup", quietly = TRUE)) {
+     des <- binDesign(nmax = 300, delta = 0.06,
+                      p.hyp = 0.1, power = .8)
+ 
+     glance(des)
+     tidy(des)
+ 
+     # the ggplot2 equivalent of plot(des)
+     library(ggplot2)
+     ggplot(tidy(des), aes(n, power)) +
+         geom_line()
+ }
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:binGroupâ€™

> nameEx("tidy.binWidth")
> ### * tidy.binWidth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.binWidth
> ### Title: Tidy a(n) binWidth object
> ### Aliases: tidy.binWidth binwidth_tidiers
> 
> ### ** Examples
> 
> 
> if (require("binGroup", quietly = TRUE)) {
+     bw <- binWidth(100, .1)
+     bw
+     tidy(bw)
+ 
+     library(dplyr)
+     d <- expand.grid(n = seq(100, 800, 100),
+                      p = .5,
+                      method = c("CP", "Blaker", "Score", "Wald"),
+                      stringsAsFactors = FALSE) %>%
+         group_by(n, p, method) %>%
+         do(tidy(binWidth(.$n, .$p, method = .$method)))
+ 
+     library(ggplot2)
+     ggplot(d, aes(n, ci.width, color = method)) +
+         geom_line() +
+         xlab("Total Observations") +
+         ylab("Expected CI Width")
+ }

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:dplyrâ€™, â€˜package:binGroupâ€™

> nameEx("tidy.boot")
> ### * tidy.boot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.boot
> ### Title: Tidy a(n) boot object
> ### Aliases: tidy.boot boot_tidiers
> 
> ### ** Examples
> 
> if (require("boot")) {
+    clotting <- data.frame(
+           u = c(5,10,15,20,30,40,60,80,100),
+           lot1 = c(118,58,42,35,27,25,21,19,18),
+           lot2 = c(69,35,26,21,18,16,13,12,12))
+ 
+    g1 <- glm(lot2 ~ log(u), data = clotting, family = Gamma)
+ 
+    bootfun <- function(d, i) {
+       coef(update(g1, data= d[i,]))
+    }
+    bootres <- boot(clotting, bootfun, R = 999)
+    tidy(g1, conf.int=TRUE)
+    tidy(bootres, conf.int=TRUE)
+ }
Loading required package: boot
# A tibble: 2 x 6
  term        statistic      bias std.error conf.low conf.high
  <chr>           <dbl>     <dbl>     <dbl>    <dbl>     <dbl>
1 (Intercept)   -0.0239 -0.00193    0.00335  -0.0330   -0.0223
2 log(u)         0.0236  0.000590   0.00107   0.0227    0.0265
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:bootâ€™

> nameEx("tidy.btergm")
> ### * tidy.btergm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.btergm
> ### Title: Tidy a(n) btergm object
> ### Aliases: tidy.btergm btergm_tidiers
> 
> ### ** Examples
> 
> 
> if (require("xergm")) {
+     set.seed(1)
+     # Using the same simulated example as the xergm package
+     # Create 10 random networks with 10 actors
+     networks <- list()
+     for(i in 1:10){
+         mat <- matrix(rbinom(100, 1, .25), nrow = 10, ncol = 10)
+         diag(mat) <- 0
+         nw <- network::network(mat)
+         networks[[i]] <- nw
+     }
+     # Create 10 matrices as covariates
+     covariates <- list()
+     for (i in 1:10) {
+         mat <- matrix(rnorm(100), nrow = 10, ncol = 10)
+         covariates[[i]] <- mat
+     }
+     # Fit a model where the propensity to form ties depends
+     # on the edge covariates, controlling for the number of
+     # in-stars
+     suppressWarnings(btfit <- btergm(networks ~ edges + istar(2) +
+                        edgecov(covariates), R = 100))
+ 
+     # Show terms, coefficient estimates and errors
+     tidy(btfit)
+ 
+     # Show coefficients as odds ratios with a 99% CI
+     tidy(btfit, exponentiate = TRUE, conf.level = 0.99)
+ }
Loading required package: xergm
Warning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called â€˜xergmâ€™
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.cch")
> ### * tidy.cch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.cch
> ### Title: Tidy a(n) cch object
> ### Aliases: tidy.cch cch_tidiers
> 
> ### ** Examples
> 
> 
> library(survival)
> 
> # examples come from cch documentation
> subcoh <- nwtco$in.subcohort
> selccoh <- with(nwtco, rel==1|subcoh==1)
> ccoh.data <- nwtco[selccoh,]
> ccoh.data$subcohort <- subcoh[selccoh]
> ## central-lab histology
> ccoh.data$histol <- factor(ccoh.data$histol,labels=c("FH","UH"))
> ## tumour stage
> ccoh.data$stage <- factor(ccoh.data$stage,labels=c("I","II","III" ,"IV"))
> ccoh.data$age <- ccoh.data$age/12 # Age in years
> 
> fit.ccP <- cch(Surv(edrel, rel) ~ stage + histol + age, data = ccoh.data,
+                subcoh = ~subcohort, id= ~seqno, cohort.size = 4028)
> 
> tidy(fit.ccP)
# A tibble: 5 x 7
  term     estimate std.error statistic  p.value conf.low conf.high
  <chr>       <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
1 stageII    0.735     0.168       4.36 1.30e- 5  0.404      1.06  
2 stageIII   0.597     0.173       3.44 5.77e- 4  0.257      0.937 
3 stageIV    1.38      0.205       6.76 1.40e-11  0.983      1.79  
4 histolUH   1.50      0.160       9.38 0.        1.19       1.81  
5 age        0.0433    0.0237      1.82 6.83e- 2 -0.00324    0.0898
> 
> # coefficient plot
> library(ggplot2)
> ggplot(tidy(fit.ccP), aes(x = estimate, y = term)) +
+   geom_point() +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0) +
+   geom_vline(xintercept = 0)
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:survivalâ€™

> nameEx("tidy.coeftest")
> ### * tidy.coeftest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.coeftest
> ### Title: Tidy a(n) coeftest object
> ### Aliases: tidy.coeftest lmtest_tidiers coeftest_tidiers
> 
> ### ** Examples
> 
> 
> if (require("lmtest", quietly = TRUE)) {
+     data(Mandible)
+     fm <- lm(length ~ age, data=Mandible, subset=(age <= 28))
+ 
+     lmtest::coeftest(fm)
+     tidy(coeftest(fm))
+ }

Attaching package: â€˜zooâ€™

The following objects are masked from â€˜package:baseâ€™:

    as.Date, as.Date.numeric

# A tibble: 2 x 5
  term        estimate std.error statistic  p.value
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>
1 (Intercept)   -12.0     0.976      -12.2 1.39e-24
2 age             1.77    0.0477      37.2 2.15e-79
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:lmtestâ€™, â€˜package:zooâ€™

> nameEx("tidy.confusionMatrix")
> ### * tidy.confusionMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.confusionMatrix
> ### Title: Tidy a(n) confusionMatrix object
> ### Aliases: tidy.confusionMatrix caret_tidiers confusionMatrix_tidiers
> 
> ### ** Examples
> 
> 
> if (requireNamespace("caret", quietly = TRUE)) {
+ 
+   set.seed(27)
+   
+   two_class_sample1 <- as.factor(sample(letters[1:2], 100, TRUE))
+   two_class_sample2 <- as.factor(sample(letters[1:2], 100, TRUE))
+   
+   two_class_cm <- caret::confusionMatrix(
+     two_class_sample1,
+     two_class_sample2
+   )
+   
+   tidy(two_class_cm)
+   tidy(two_class_cm, by_class = FALSE)
+   
+   # multiclass example
+   
+   six_class_sample1 <- as.factor(sample(letters[1:6], 100, TRUE))
+   six_class_sample2 <- as.factor(sample(letters[1:6], 100, TRUE))
+   
+   six_class_cm <- caret::confusionMatrix(
+     six_class_sample1,
+     six_class_sample2
+   )
+   
+   tidy(six_class_cm)
+   tidy(six_class_cm, by_class = FALSE)
+ }
# A tibble: 2 x 5
  term     estimate conf.low conf.high p.value
  <chr>       <dbl>    <dbl>     <dbl>   <dbl>
1 accuracy   0.2       0.127     0.292   0.795
2 kappa      0.0351   NA        NA       0.873
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.coxph")
> ### * tidy.coxph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.coxph
> ### Title: Tidy a(n) coxph object
> ### Aliases: tidy.coxph coxph_tidiers
> 
> ### ** Examples
> 
> 
> library(survival)
> 
> cfit <- coxph(Surv(time, status) ~ age + sex, lung)
> 
> tidy(cfit)
# A tibble: 2 x 7
  term  estimate std.error statistic p.value conf.low conf.high
  <chr>    <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl>
1 age     0.0170   0.00922      1.85 0.0646  -0.00103    0.0351
2 sex    -0.513    0.167       -3.06 0.00218 -0.841     -0.185 
> tidy(cfit, exponentiate = TRUE)
# A tibble: 2 x 7
  term  estimate std.error statistic p.value conf.low conf.high
  <chr>    <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl>
1 age      1.02    0.00922      1.85 0.0646     0.999     1.04 
2 sex      0.599   0.167       -3.06 0.00218    0.431     0.831
> 
> lp <- augment(cfit, lung)
> risks <- augment(cfit, lung, type.predict = "risk")
> expected <- augment(cfit, lung, type.predict = "expected")
> 
> glance(cfit)
# A tibble: 1 x 15
      n nevent statistic.log p.value.log statistic.sc p.value.sc statistic.wald
  <int>  <dbl>         <dbl>       <dbl>        <dbl>      <dbl>          <dbl>
1   228    165          14.1    0.000857         13.7    0.00105           13.5
# â€¦ with 8 more variables: p.value.wald <dbl>, r.squared <dbl>,
#   r.squared.max <dbl>, concordance <dbl>, std.error.concordance <dbl>,
#   logLik <dbl>, AIC <dbl>, BIC <dbl>
> 
> # also works on clogit models
> resp <- levels(logan$occupation)
> n <- nrow(logan)
> indx <- rep(1:n, length(resp))
> logan2 <- data.frame(
+   logan[indx,],
+   id = indx,
+   tocc = factor(rep(resp, each=n))
+ )
> 
> logan2$case <- (logan2$occupation == logan2$tocc)
> 
> cl <- clogit(case ~ tocc + tocc:education + strata(id), logan2)
> tidy(cl)
# A tibble: 9 x 7
  term                 estimate std.error statistic   p.value conf.low conf.high
  <chr>                   <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl>
1 toccfarm               -1.90     1.38       -1.37  1.70e- 1  -4.60       0.810
2 toccoperatives          1.17     0.566       2.06  3.91e- 2   0.0581     2.28 
3 toccprofessional       -8.10     0.699     -11.6   4.45e-31  -9.47      -6.73 
4 toccsales              -5.03     0.770      -6.53  6.54e-11  -6.54      -3.52 
5 tocccraftsmen:educaâ€¦   -0.332    0.0569     -5.84  5.13e- 9  -0.444     -0.221
6 toccfarm:education     -0.370    0.116      -3.18  1.47e- 3  -0.598     -0.142
7 toccoperatives:educâ€¦   -0.422    0.0584     -7.23  4.98e-13  -0.537     -0.308
8 toccprofessional:edâ€¦    0.278    0.0510      5.45  4.94e- 8   0.178      0.378
9 toccsales:education    NA        0          NA    NA         NA         NA    
> glance(cl)
# A tibble: 1 x 15
      n nevent statistic.log p.value.log statistic.sc p.value.sc statistic.wald
  <int>  <dbl>         <dbl>       <dbl>        <dbl>      <dbl>          <dbl>
1  4190    838          666.   1.90e-138         682.  5.01e-142           414.
# â€¦ with 8 more variables: p.value.wald <dbl>, r.squared <dbl>,
#   r.squared.max <dbl>, concordance <dbl>, std.error.concordance <dbl>,
#   logLik <dbl>, AIC <dbl>, BIC <dbl>
> 
> library(ggplot2)
> 
> ggplot(lp, aes(age, .fitted, color = sex)) +
+   geom_point()
> 
> ggplot(risks, aes(age, .fitted, color = sex)) + 
+   geom_point()
>   
> ggplot(expected, aes(time, .fitted, color = sex)) + 
+   geom_point()
> 
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:survivalâ€™

> nameEx("tidy.cv.glmnet")
> ### * tidy.cv.glmnet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.cv.glmnet
> ### Title: Tidy a(n) cv.glmnet object
> ### Aliases: tidy.cv.glmnet
> 
> ### ** Examples
> 
> 
> if (requireNamespace("glmnet", quietly = TRUE)) {
+ 
+     library(glmnet)
+     set.seed(27)
+ 
+     nobs <- 100
+     nvar <- 50
+     real <- 5
+ 
+     x <- matrix(rnorm(nobs * nvar), nobs, nvar)
+     beta <- c(rnorm(real, 0, 1), rep(0, nvar - real))
+     y <- c(t(beta) %*% t(x)) + rnorm(nvar, sd = 3)
+ 
+     cvfit1 <- cv.glmnet(x,y)
+ 
+     tidy(cvfit1)
+     glance(cvfit1)
+ 
+     library(ggplot2)
+     tidied_cv <- tidy(cvfit1)
+     glance_cv <- glance(cvfit1)
+ 
+     # plot of MSE as a function of lambda
+     g <- ggplot(tidied_cv, aes(lambda, estimate)) + geom_line() + scale_x_log10()
+     g
+ 
+     # plot of MSE as a function of lambda with confidence ribbon
+     g <- g + geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .25)
+     g
+ 
+     # plot of MSE as a function of lambda with confidence ribbon and choices
+     # of minimum lambda marked
+     g <- g + geom_vline(xintercept = glance_cv$lambda.min) +
+         geom_vline(xintercept = glance_cv$lambda.1se, lty = 2)
+     g
+ 
+     # plot of number of zeros for each choice of lambda
+     ggplot(tidied_cv, aes(lambda, nzero)) + geom_line() + scale_x_log10()
+ 
+     # coefficient plot with min lambda shown
+     tidied <- tidy(cvfit1$glmnet.fit)
+     ggplot(tidied, aes(lambda, estimate, group = term)) + scale_x_log10() +
+         geom_line() +
+         geom_vline(xintercept = glance_cv$lambda.min) +
+         geom_vline(xintercept = glance_cv$lambda.1se, lty = 2)
+ }
Loading required package: Matrix
Loading required package: foreach
Loaded glmnet 2.0-16

> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:glmnetâ€™, â€˜package:foreachâ€™,
  â€˜package:Matrixâ€™

> nameEx("tidy.dist")
> ### * tidy.dist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.dist
> ### Title: Tidy a(n) dist object
> ### Aliases: tidy.dist
> 
> ### ** Examples
> 
> 
> iris_dist <- dist(t(iris[, 1:4]))
> iris_dist
             Sepal.Length Sepal.Width Petal.Length
Sepal.Width      36.15785                         
Petal.Length     28.96619    25.77809             
Petal.Width      57.18304    25.86407     33.86473
> 
> tidy(iris_dist)
# A tibble: 6 x 3
  item1        item2        distance
  <fct>        <fct>           <dbl>
1 Sepal.Width  Sepal.Length     36.2
2 Petal.Length Sepal.Length     29.0
3 Petal.Width  Sepal.Length     57.2
4 Petal.Length Sepal.Width      25.8
5 Petal.Width  Sepal.Width      25.9
6 Petal.Width  Petal.Length     33.9
> tidy(iris_dist, upper = TRUE)
# A tibble: 12 x 3
   item1        item2        distance
   <fct>        <fct>           <dbl>
 1 Sepal.Width  Sepal.Length     36.2
 2 Petal.Length Sepal.Length     29.0
 3 Petal.Width  Sepal.Length     57.2
 4 Sepal.Length Sepal.Width      36.2
 5 Petal.Length Sepal.Width      25.8
 6 Petal.Width  Sepal.Width      25.9
 7 Sepal.Length Petal.Length     29.0
 8 Sepal.Width  Petal.Length     25.8
 9 Petal.Width  Petal.Length     33.9
10 Sepal.Length Petal.Width      57.2
11 Sepal.Width  Petal.Width      25.9
12 Petal.Length Petal.Width      33.9
> tidy(iris_dist, diagonal = TRUE)
# A tibble: 10 x 3
   item1        item2        distance
   <fct>        <fct>           <dbl>
 1 Sepal.Length Sepal.Length      0  
 2 Sepal.Width  Sepal.Length     36.2
 3 Petal.Length Sepal.Length     29.0
 4 Petal.Width  Sepal.Length     57.2
 5 Sepal.Width  Sepal.Width       0  
 6 Petal.Length Sepal.Width      25.8
 7 Petal.Width  Sepal.Width      25.9
 8 Petal.Length Petal.Length      0  
 9 Petal.Width  Petal.Length     33.9
10 Petal.Width  Petal.Width       0  
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.ergm")
> ### * tidy.ergm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.ergm
> ### Title: Tidy a(n) ergm object
> ### Aliases: tidy.ergm ergm_tidiers
> 
> ### ** Examples
> 
> 
> library(ergm)
Loading required package: network
network: Classes for Relational Data
Version 1.15 created on 2019-04-01.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Martina Morris, University of Washington
                    Skye Bender-deMoll, University of Washington
 For citation information, type citation("network").
 Type help("network-package") to get started.


ergm: version 3.9.4, created on 2018-08-15
Copyright (c) 2018, Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Martina Morris, University of Washington
                    with contributions from
                    Li Wang
                    Kirk Li, University of Washington
                    Skye Bender-deMoll, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm").

NOTE: Versions before 3.6.1 had a bug in the implementation of the bd()
constriant which distorted the sampled distribution somewhat. In
addition, Sampson's Monks datasets had mislabeled vertices. See the
NEWS and the documentation for more details.

> # Using the same example as the ergm package
> # Load the Florentine marriage network data
> data(florentine)
> 
> # Fit a model where the propensity to form ties between
> # families depends on the absolute difference in wealth
> gest <- ergm(flomarriage ~ edges + absdiff("wealth"))
Starting maximum pseudolikelihood estimation (MPLE):
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stopping at the initial estimate.
Evaluating log-likelihood at the estimate. 
> 
> # Show terms, coefficient estimates and errors
> tidy(gest)
# A tibble: 2 x 4
  estimate std.error mcmc.error      p.value
     <dbl>     <dbl>      <dbl>        <dbl>
1  -2.30     0.402            0 0.0000000102
2   0.0155   0.00616          0 0.0117      
> 
> # Show coefficients as odds ratios with a 99% CI
> tidy(gest, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.99)
# A tibble: 2 x 6
  estimate std.error mcmc.error      p.value conf.low conf.high
     <dbl>     <dbl>      <dbl>        <dbl>    <dbl>     <dbl>
1    0.100   0.402            0 0.0000000102   0.0355     0.282
2    1.02    0.00616          0 0.0117         1.000      1.03 
> 
> # Take a look at likelihood measures and other
> # control parameters used during MCMC estimation
> glance(gest)
Warning: You appear to be calling logLik.ergm() directly. logLik.ergm() is a method, and will not be exported in a future version of â€˜ergmâ€™. Use logLik() instead, or getS3method() if absolutely necessary.
# A tibble: 1 x 5
  independence iterations logLik   AIC   BIC
  <lgl>             <int>  <dbl> <dbl> <dbl>
1 TRUE                  4  -51.0  106.  112.
> glance(gest, deviance = TRUE)
# A tibble: 1 x 9
  independence iterations logLik null.deviance df.null residual.devianâ€¦
  <lgl>             <int>  <dbl>         <dbl>   <dbl>            <dbl>
1 TRUE                  4  -51.0          166.     120             102.
# â€¦ with 3 more variables: df.residual <dbl>, AIC <dbl>, BIC <dbl>
> glance(gest, mcmc = TRUE)
# A tibble: 1 x 8
  independence iterations logLik   AIC   BIC MCMC.interval MCMC.burnin
  <lgl>             <int>  <dbl> <dbl> <dbl>         <dbl>       <dbl>
1 TRUE                  4  -51.0  106.  112.          1024       16384
# â€¦ with 1 more variable: MCMC.samplesize <dbl>
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ergmâ€™, â€˜package:networkâ€™

> nameEx("tidy.factanal")
> ### * tidy.factanal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.factanal
> ### Title: Tidy a(n) factanal object
> ### Aliases: tidy.factanal factanal_tidiers
> 
> ### ** Examples
> 
> 
> mod <- factanal(mtcars, 3, scores = "regression")
> 
> glance(mod)
# A tibble: 1 x 8
  n.factors total.variance statistic p.value    df     n method converged
      <dbl>          <dbl>     <dbl>   <dbl> <dbl> <int> <chr>  <lgl>    
1         3          0.862      30.5   0.205    25    32 mle    TRUE     
> tidy(mod)
# A tibble: 11 x 5
   variable uniqueness    fl1     fl2     fl3
   <chr>         <dbl>  <dbl>   <dbl>   <dbl>
 1 mpg          0.135   0.643 -0.478  -0.473 
 2 cyl          0.0555 -0.618  0.703   0.261 
 3 disp         0.0898 -0.719  0.537   0.323 
 4 hp           0.127  -0.291  0.725   0.513 
 5 drat         0.290   0.804 -0.241  -0.0684
 6 wt           0.0596 -0.778  0.248   0.524 
 7 qsec         0.0515 -0.177 -0.946  -0.151 
 8 vs           0.223   0.295 -0.805  -0.204 
 9 am           0.208   0.880  0.0884 -0.0927
10 gear         0.125   0.908  0.0211  0.224 
11 carb         0.158   0.114  0.559   0.719 
> augment(mod)
# A tibble: 32 x 4
   .rownames            .fs1   .fs2    .fs3
   <fct>               <dbl>  <dbl>   <dbl>
 1 Mazda RX4          0.847   0.672 -0.278 
 2 Mazda RX4 Wag      0.722   0.384  0.0246
 3 Datsun 710         0.686  -0.592 -0.564 
 4 Hornet 4 Drive    -0.866  -0.673 -0.767 
 5 Hornet Sportabout -0.893   0.862 -1.01  
 6 Valiant           -1.06   -1.07  -0.383 
 7 Duster 360        -0.559   1.24  -0.199 
 8 Merc 240D          0.0774 -1.50   0.409 
 9 Merc 230          -0.242  -2.61   1.23  
10 Merc 280           0.183  -0.591  0.910 
# â€¦ with 22 more rows
> augment(mod, mtcars)
Warning: Column `.rownames` joining factor and character vector, coercing into character vector
# A tibble: 32 x 15
   .rownames   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1 Mazda RX4  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2 Mazda RXâ€¦  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3 Datsun 7â€¦  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4 Hornet 4â€¦  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5 Hornet Sâ€¦  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7 Duster 3â€¦  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# â€¦ with 22 more rows, and 3 more variables: .fs1 <dbl>, .fs2 <dbl>, .fs3 <dbl>
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.felm")
> ### * tidy.felm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.felm
> ### Title: Tidy a(n) felm object
> ### Aliases: tidy.felm felm_tidiers lfe_tidiers
> 
> ### ** Examples
> 
> 
> if (require("lfe", quietly = TRUE)) {
+ 
+     library(lfe)
+     
+     N=1e2
+     DT <- data.frame(
+       id = sample(5, N, TRUE),
+       v1 =  sample(5, N, TRUE),
+       v2 =  sample(1e6, N, TRUE),
+       v3 =  sample(round(runif(100,max=100),4), N, TRUE),
+       v4 =  sample(round(runif(100,max=100),4), N, TRUE)
+     )
+ 
+     result_felm <- felm(v2~v3, DT)
+     tidy(result_felm)
+     augment(result_felm)
+     result_felm <- felm(v2~v3|id+v1, DT)
+     tidy(result_felm, fe = TRUE)
+     augment(result_felm)
+     v1<-DT$v1
+     v2 <- DT$v2
+     v3 <- DT$v3
+     id <- DT$id
+     result_felm <- felm(v2~v3|id+v1)
+     tidy(result_felm)
+     augment(result_felm)
+     glance(result_felm)
+ }
# A tibble: 1 x 7
  r.squared adj.r.squared   sigma statistic p.value    df df.residual
      <dbl>         <dbl>   <dbl>     <dbl>   <dbl> <int>       <int>
1    0.0638       -0.0299 295733.     0.681   0.724    90          90
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:lfeâ€™, â€˜package:Matrixâ€™

> nameEx("tidy.fitdistr")
> ### * tidy.fitdistr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.fitdistr
> ### Title: Tidy a(n) fitdistr object
> ### Aliases: tidy.fitdistr fitdistr_tidiers
> 
> ### ** Examples
> 
> 
> set.seed(2015)
> x <- rnorm(100, 5, 2)
> 
> library(MASS)
> fit <- fitdistr(x, dnorm, list(mean = 3, sd = 1))
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
Warning in densfun(x, parm[1], parm[2], ...) : NaNs produced
> 
> tidy(fit)
# A tibble: 2 x 3
  term  estimate std.error
  <chr>    <dbl>     <dbl>
1 mean      4.90     0.201
2 sd        2.01     0.142
> glance(fit)
# A tibble: 1 x 4
      n logLik   AIC   BIC
  <int>  <dbl> <dbl> <dbl>
1   100  -212.  427.  433.
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:MASSâ€™

> nameEx("tidy.ftable")
> ### * tidy.ftable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.ftable
> ### Title: Tidy a(n) ftable object
> ### Aliases: tidy.ftable
> 
> ### ** Examples
> 
> 
> tidy(ftable(Titanic, row.vars = 1:3))
# A tibble: 32 x 5
   Class Sex    Age   Survived     n
   <chr> <chr>  <chr> <chr>    <dbl>
 1 1st   Male   Child No           0
 2 2nd   Male   Child No           0
 3 3rd   Male   Child No          35
 4 Crew  Male   Child No           0
 5 1st   Female Child No           0
 6 2nd   Female Child No           0
 7 3rd   Female Child No          17
 8 Crew  Female Child No           0
 9 1st   Male   Adult No         118
10 2nd   Male   Adult No         154
# â€¦ with 22 more rows
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.gamlss")
> ### * tidy.gamlss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.gamlss
> ### Title: Tidy a(n) gamlss object
> ### Aliases: tidy.gamlss
> 
> ### ** Examples
> 
> 
> library(gamlss)
Loading required package: splines
Loading required package: gamlss.data

Attaching package: â€˜gamlss.dataâ€™

The following object is masked from â€˜package:datasetsâ€™:

    sleep

Loading required package: gamlss.dist
Loading required package: MASS
Loading required package: nlme
Loading required package: parallel
 **********   GAMLSS Version 5.1-3  ********** 
For more on GAMLSS look at http://www.gamlss.org/
Type gamlssNews() to see new features/changes/bug fixes.

> 
> g <- gamlss(
+   y ~ pb(x),
+   sigma.fo = ~ pb(x),
+   family = BCT,
+   data = abdom,
+   method = mixed(1, 20)
+ )
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
GAMLSS-RS iteration 1: Global Deviance = 4771.925 
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
GAMLSS-CG iteration 1: Global Deviance = 4771.013 
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
GAMLSS-CG iteration 2: Global Deviance = 4770.994 
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
Warning in regularize.values(x, y, ties, missing(ties)) :
  collapsing to unique 'x' values
GAMLSS-CG iteration 3: Global Deviance = 4770.994 
> 
> tidy(g)
# A tibble: 6 x 6
  parameter term        estimate std.error statistic   p.value
  <chr>     <chr>          <dbl>     <dbl>     <dbl>     <dbl>
1 mu        (Intercept) -64.4      1.33      -48.5   1.89e-210
2 mu        pb(x)        10.7      0.0578    185.    0.       
3 sigma     (Intercept)  -2.65     0.108     -24.5   8.09e- 93
4 sigma     pb(x)        -0.0100   0.00378    -2.65  8.29e-  3
5 nu        (Intercept)  -0.107    0.557      -0.192 8.48e-  1
6 tau       (Intercept)   2.49     0.301       8.28  7.77e- 16
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:gamlssâ€™, â€˜package:parallelâ€™, â€˜package:nlmeâ€™,
  â€˜package:gamlss.distâ€™, â€˜package:MASSâ€™, â€˜package:gamlss.dataâ€™,
  â€˜package:splinesâ€™

> nameEx("tidy.garch")
> ### * tidy.garch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.garch
> ### Title: Tidy a(n) garch object
> ### Aliases: tidy.garch garch_tidiers
> 
> ### ** Examples
> 
> 
> library(tseries)
> 
> data(EuStockMarkets)
> dax <- diff(log(EuStockMarkets))[,"DAX"]
> dax.garch <- garch(dax)

 ***** ESTIMATION WITH ANALYTICAL GRADIENT ***** 


     I     INITIAL X(I)        D(I)

     1     9.549651e-05     1.000e+00
     2     5.000000e-02     1.000e+00
     3     5.000000e-02     1.000e+00

    IT   NF      F         RELDF    PRELDF    RELDX   STPPAR   D*STEP   NPRELDF
     0    1 -7.584e+03
     1    8 -7.585e+03  1.45e-05  2.60e-05  1.4e-05  1.0e+11  1.4e-06  1.35e+06
     2    9 -7.585e+03  1.88e-07  1.97e-07  1.3e-05  2.0e+00  1.4e-06  1.50e+00
     3   18 -7.589e+03  6.22e-04  1.10e-03  3.5e-01  2.0e+00  5.5e-02  1.50e+00
     4   21 -7.601e+03  1.58e-03  1.81e-03  6.2e-01  1.9e+00  2.2e-01  3.07e-01
     5   23 -7.634e+03  4.22e-03  3.55e-03  4.3e-01  9.6e-01  4.4e-01  3.06e-02
     6   25 -7.646e+03  1.61e-03  1.85e-03  2.9e-02  2.0e+00  4.4e-02  5.43e-02
     7   27 -7.646e+03  3.82e-05  5.23e-04  1.3e-02  2.0e+00  2.0e-02  1.46e-02
     8   28 -7.648e+03  1.86e-04  1.46e-04  6.5e-03  2.0e+00  9.9e-03  1.54e-03
     9   29 -7.648e+03  3.12e-05  4.83e-05  6.4e-03  2.0e+00  9.9e-03  3.34e-03
    10   30 -7.648e+03  1.39e-05  6.31e-05  6.2e-03  1.9e+00  9.9e-03  1.86e-03
    11   31 -7.650e+03  2.70e-04  3.24e-04  6.0e-03  1.9e+00  9.9e-03  4.99e-03
    12   34 -7.656e+03  8.42e-04  8.57e-04  2.2e-02  1.7e-01  3.9e-02  2.22e-03
    13   36 -7.661e+03  6.12e-04  6.40e-04  1.9e-02  4.2e-01  3.9e-02  2.09e-03
    14   38 -7.665e+03  4.87e-04  8.63e-04  4.9e-02  4.1e-01  9.6e-02  9.69e-04
    15   48 -7.666e+03  1.02e-04  1.86e-04  1.9e-07  4.5e+00  3.5e-07  3.94e-04
    16   49 -7.666e+03  1.12e-07  1.01e-07  1.9e-07  2.0e+00  3.5e-07  6.22e-05
    17   57 -7.666e+03  1.60e-05  2.70e-05  2.0e-03  9.3e-01  3.7e-03  6.10e-05
    18   59 -7.666e+03  5.23e-06  7.01e-06  3.7e-03  3.9e-01  8.0e-03  7.77e-06
    19   60 -7.666e+03  4.08e-08  3.74e-08  1.4e-04  0.0e+00  3.1e-04  3.74e-08
    20   61 -7.666e+03  2.31e-09  8.57e-10  8.6e-06  0.0e+00  2.0e-05  8.57e-10
    21   62 -7.666e+03  5.35e-11  2.25e-13  7.6e-07  0.0e+00  1.6e-06  2.25e-13
    22   63 -7.666e+03  1.81e-12  7.06e-16  1.7e-08  0.0e+00  3.4e-08  7.06e-16
    23   64 -7.666e+03  6.98e-14  1.69e-17  1.0e-09  0.0e+00  2.4e-09  1.69e-17
    24   65 -7.666e+03 -1.16e-14  1.76e-20  1.9e-10  0.0e+00  4.0e-10  1.76e-20

 ***** X- AND RELATIVE FUNCTION CONVERGENCE *****

 FUNCTION    -7.665775e+03   RELDX        1.874e-10
 FUNC. EVALS      65         GRAD. EVALS      24
 PRELDF       1.760e-20      NPRELDF      1.760e-20

     I      FINAL X(I)        D(I)          G(I)

     1    4.639289e-06     1.000e+00    -2.337e-02
     2    6.832875e-02     1.000e+00    -8.294e-07
     3    8.890666e-01     1.000e+00    -2.230e-06

> dax.garch

Call:
garch(x = dax)

Coefficient(s):
       a0         a1         b1  
4.639e-06  6.833e-02  8.891e-01  

> 
> tidy(dax.garch)
# A tibble: 3 x 5
  term    estimate   std.error statistic  p.value
  <chr>      <dbl>       <dbl>     <dbl>    <dbl>
1 a0    0.00000464 0.000000756      6.14 8.42e-10
2 a1    0.0683     0.0113           6.07 1.25e- 9
3 b1    0.889      0.0165          53.8  0.      
> glance(dax.garch)
# A tibble: 1 x 7
  statistic p.value parameter method         logLik     AIC   BIC
      <dbl>   <dbl>     <dbl> <chr>           <dbl>   <dbl> <dbl>
1     0.136   0.713         1 Box-Ljung test  5958. -11911.    NA
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:tseriesâ€™

> nameEx("tidy.glht")
> ### * tidy.glht
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.glht
> ### Title: Tidy a(n) glht object
> ### Aliases: tidy.glht multcomp_tidiers
> 
> ### ** Examples
> 
> 
> if (require("multcomp") && require("ggplot2")) {
+ 
+     library(multcomp)
+     library(ggplot2)
+     
+     amod <- aov(breaks ~ wool + tension, data = warpbreaks)
+     wht <- glht(amod, linfct = mcp(tension = "Tukey"))
+ 
+     tidy(wht)
+     ggplot(wht, aes(lhs, estimate)) + geom_point()
+ 
+     CI <- confint(wht)
+     tidy(CI)
+     ggplot(CI, aes(lhs, estimate, ymin = lwr, ymax = upr)) +
+        geom_pointrange()
+ 
+     tidy(summary(wht))
+     ggplot(mapping = aes(lhs, estimate)) +
+        geom_linerange(aes(ymin = lwr, ymax = upr), data = CI) +
+        geom_point(aes(size = p), data = summary(wht)) +
+        scale_size(trans = "reverse")
+ 
+     cld <- cld(wht)
+     tidy(cld)
+ }
Loading required package: multcomp
Loading required package: mvtnorm
Loading required package: survival
Loading required package: TH.data
Loading required package: MASS

Attaching package: â€˜TH.dataâ€™

The following object is masked from â€˜package:MASSâ€™:

    geyser

Loading required package: ggplot2
# A tibble: 3 x 2
  lhs   letters
  <chr> <chr>  
1 L     b      
2 M     a      
3 H     a      
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:multcompâ€™, â€˜package:TH.dataâ€™,
  â€˜package:MASSâ€™, â€˜package:survivalâ€™, â€˜package:mvtnormâ€™

> nameEx("tidy.glmRob")
> ### * tidy.glmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.glmRob
> ### Title: Tidy a(n) glmRob object
> ### Aliases: tidy.glmRob
> 
> ### ** Examples
> 
> 
> library(robust)
Loading required package: fit.models
> m <- lmRob(mpg ~ wt, data = mtcars)
> 
> tidy(m)
# A tibble: 2 x 5
  term        estimate std.error statistic  p.value
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>
1 (Intercept)    35.6       3.58      9.93 5.37e-11
2 wt             -4.91      1.09     -4.49 9.67e- 5
> augment(m)
# A tibble: 32 x 6
   .rownames           mpg    wt .fitted .se.fit  .resid
   <chr>             <dbl> <dbl>   <dbl>   <dbl>   <dbl>
 1 Mazda RX4          21    2.62    22.7   1.12  -1.68  
 2 Mazda RX4 Wag      21    2.88    21.4   1.00  -0.431 
 3 Datsun 710         22.8  2.32    24.2   1.32  -1.36  
 4 Hornet 4 Drive     21.4  3.22    19.8   0.957  1.64  
 5 Hornet Sportabout  18.7  3.44    18.7   1.00   0.0445
 6 Valiant            18.1  3.46    18.6   1.01  -0.457 
 7 Duster 360         14.3  3.57    18.0   1.06  -3.72  
 8 Merc 240D          24.4  3.19    19.9   0.955  4.52  
 9 Merc 230           22.8  3.15    20.1   0.955  2.72  
10 Merc 280           19.2  3.44    18.7   1.00   0.545 
# â€¦ with 22 more rows
> glance(m)
# A tibble: 1 x 4
  r.squared deviance sigma df.residual
      <dbl>    <dbl> <dbl>       <int>
1     0.567     136.  2.95          30
> 
> gm <- glmRob(am ~ wt, data = mtcars, family = "binomial")
> glance(gm)
# A tibble: 1 x 3
  deviance null.deviance df.residual
     <dbl>         <dbl>       <int>
1     19.2          44.4          30
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:robustâ€™, â€˜package:fit.modelsâ€™

> nameEx("tidy.glmnet")
> ### * tidy.glmnet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.glmnet
> ### Title: Tidy a(n) glmnet object
> ### Aliases: tidy.glmnet glmnet_tidiers
> 
> ### ** Examples
> 
> 
> if (requireNamespace("glmnet", quietly = TRUE)) {
+ 
+     library(glmnet)
+     
+     set.seed(2014)
+     x <- matrix(rnorm(100*20),100,20)
+     y <- rnorm(100)
+     fit1 <- glmnet(x,y)
+ 
+     tidy(fit1)
+     glance(fit1)
+ 
+     library(dplyr)
+     library(ggplot2)
+ 
+     tidied <- tidy(fit1) %>% filter(term != "(Intercept)")
+ 
+     ggplot(tidied, aes(step, estimate, group = term)) + geom_line()
+     ggplot(tidied, aes(lambda, estimate, group = term)) +
+         geom_line() + scale_x_log10()
+ 
+     ggplot(tidied, aes(lambda, dev.ratio)) + geom_line()
+ 
+     # works for other types of regressions as well, such as logistic
+     g2 <- sample(1:2, 100, replace=TRUE)
+     fit2 <- glmnet(x, g2, family="binomial")
+     tidy(fit2)
+ }
Loading required package: Matrix
Loading required package: foreach
Loaded glmnet 2.0-16


Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

# A tibble: 947 x 5
   term         step estimate lambda dev.ratio
   <chr>       <dbl>    <dbl>  <dbl>     <dbl>
 1 (Intercept)     1  0.282   0.0906 -1.46e-15
 2 (Intercept)     2  0.281   0.0826  6.28e- 3
 3 V10             2  0.0138  0.0826  6.28e- 3
 4 V13             2 -0.0353  0.0826  6.28e- 3
 5 (Intercept)     3  0.279   0.0753  1.55e- 2
 6 V10             3  0.0538  0.0753  1.55e- 2
 7 V13             3 -0.0742  0.0753  1.55e- 2
 8 (Intercept)     4  0.277   0.0686  2.48e- 2
 9 V6              4  0.00225 0.0686  2.48e- 2
10 V10             4  0.0907  0.0686  2.48e- 2
# â€¦ with 937 more rows
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:dplyrâ€™, â€˜package:glmnetâ€™,
  â€˜package:foreachâ€™, â€˜package:Matrixâ€™

> nameEx("tidy.gmm")
> ### * tidy.gmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.gmm
> ### Title: Tidy a(n) gmm object
> ### Aliases: tidy.gmm gmm_tidiers
> 
> ### ** Examples
> 
> 
> if (requireNamespace("gmm", quietly = TRUE)) {
+ 
+   library(gmm)
+   
+   # examples come from the "gmm" package
+   ## CAPM test with GMM
+   data(Finance)
+   r <- Finance[1:300, 1:10]
+   rm <- Finance[1:300, "rm"]
+   rf <- Finance[1:300, "rf"]
+ 
+   z <- as.matrix(r-rf)
+   t <- nrow(z)
+   zm <- rm-rf
+   h <- matrix(zm, t, 1)
+   res <- gmm(z ~ zm, x = h)
+ 
+   # tidy result
+   tidy(res)
+   tidy(res, conf.int = TRUE)
+   tidy(res, conf.int = TRUE, conf.level = .99)
+ 
+   # coefficient plot
+   library(ggplot2)
+   library(dplyr)
+   tidy(res, conf.int = TRUE) %>%
+     mutate(variable = reorder(variable, estimate)) %>%
+     ggplot(aes(estimate, variable)) +
+     geom_point() +
+     geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
+     facet_wrap(~ term) +
+     geom_vline(xintercept = 0, color = "red", lty = 2)
+ 
+   # from a function instead of a matrix
+   g <- function(theta, x) {
+   	e <- x[,2:11] - theta[1] - (x[,1] - theta[1]) %*% matrix(theta[2:11], 1, 10)
+   	gmat <- cbind(e, e*c(x[,1]))
+   	return(gmat) }
+ 
+   x <- as.matrix(cbind(rm, r))
+   res_black <- gmm(g, x = x, t0 = rep(0, 11))
+ 
+   tidy(res_black)
+   tidy(res_black, conf.int = TRUE)
+ 
+   ## APT test with Fama-French factors and GMM
+ 
+   f1 <- zm
+   f2 <- Finance[1:300, "hml"] - rf
+   f3 <- Finance[1:300, "smb"] - rf
+   h <- cbind(f1, f2, f3)
+   res2 <- gmm(z ~ f1 + f2 + f3, x = h)
+ 
+   td2 <- tidy(res2, conf.int = TRUE)
+   td2
+ 
+   # coefficient plot
+   td2 %>%
+     mutate(variable = reorder(variable, estimate)) %>%
+     ggplot(aes(estimate, variable)) +
+     geom_point() +
+     geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
+     facet_wrap(~ term) +
+     geom_vline(xintercept = 0, color = "red", lty = 2)
+ }
Loading required package: sandwich

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

> 
> 
> 
> 
> cleanEx()

detaching â€˜package:dplyrâ€™, â€˜package:ggplot2â€™, â€˜package:gmmâ€™,
  â€˜package:sandwichâ€™

> nameEx("tidy.htest")
> ### * tidy.htest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.htest
> ### Title: Tidy/glance a(n) htest object
> ### Aliases: tidy.htest htest_tidiers glance.htest
> 
> ### ** Examples
> 
> 
> tt <- t.test(rnorm(10))
> tidy(tt)
# A tibble: 1 x 8
  estimate statistic p.value parameter conf.low conf.high method     alternative
     <dbl>     <dbl>   <dbl>     <dbl>    <dbl>     <dbl> <chr>      <chr>      
1    0.132     0.536   0.605         9   -0.426     0.691 One Samplâ€¦ two.sided  
> glance(tt)  # same output for all htests
# A tibble: 1 x 8
  estimate statistic p.value parameter conf.low conf.high method     alternative
     <dbl>     <dbl>   <dbl>     <dbl>    <dbl>     <dbl> <chr>      <chr>      
1    0.132     0.536   0.605         9   -0.426     0.691 One Samplâ€¦ two.sided  
> 
> tt <- t.test(mpg ~ am, data = mtcars)
> tidy(tt)
# A tibble: 1 x 10
  estimate estimate1 estimate2 statistic p.value parameter conf.low conf.high
     <dbl>     <dbl>     <dbl>     <dbl>   <dbl>     <dbl>    <dbl>     <dbl>
1    -7.24      17.1      24.4     -3.77 0.00137      18.3    -11.3     -3.21
# â€¦ with 2 more variables: method <chr>, alternative <chr>
> 
> wt <- wilcox.test(mpg ~ am, data = mtcars, conf.int = TRUE, exact = FALSE)
> tidy(wt)
# A tibble: 1 x 7
  estimate statistic p.value conf.low conf.high method               alternative
     <dbl>     <dbl>   <dbl>    <dbl>     <dbl> <chr>                <chr>      
1    -6.80        42 0.00187    -11.7     -2.90 Wilcoxon rank sum tâ€¦ two.sided  
> 
> ct <- cor.test(mtcars$wt, mtcars$mpg)
> tidy(ct)
# A tibble: 1 x 8
  estimate statistic  p.value parameter conf.low conf.high method    alternative
     <dbl>     <dbl>    <dbl>     <int>    <dbl>     <dbl> <chr>     <chr>      
1   -0.868     -9.56 1.29e-10        30   -0.934    -0.744 Pearson'â€¦ two.sided  
> 
> chit <- chisq.test(xtabs(Freq ~ Sex + Class, data = as.data.frame(Titanic)))
> tidy(chit)
# A tibble: 1 x 4
  statistic  p.value parameter method                    
      <dbl>    <dbl>     <int> <chr>                     
1      350. 1.56e-75         3 Pearson's Chi-squared test
> augment(chit)
# A tibble: 8 x 9
  Sex    Class .observed  .prop .row.prop .col.prop .expected .residuals .stdres
  <fct>  <fct>     <dbl>  <dbl>     <dbl>     <dbl>     <dbl>      <dbl>   <dbl>
1 Male   1st         180 0.0818    0.104     0.554      256.       -4.73  -11.1 
2 Female 1st         145 0.0659    0.309     0.446       69.4       9.07   11.1 
3 Male   2nd         179 0.0813    0.103     0.628      224.       -3.02   -6.99
4 Female 2nd         106 0.0482    0.226     0.372       60.9       5.79    6.99
5 Male   3rd         510 0.232     0.295     0.722      555.       -1.92   -5.04
6 Female 3rd         196 0.0891    0.417     0.278      151.        3.68    5.04
7 Male   Crew        862 0.392     0.498     0.974      696.        6.29   17.6 
8 Female Crew         23 0.0104    0.0489    0.0260     189.      -12.1   -17.6 
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.ivreg")
> ### * tidy.ivreg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.ivreg
> ### Title: Tidy a(n) ivreg object
> ### Aliases: tidy.ivreg ivreg_tidiers aer_tidiers
> 
> ### ** Examples
> 
> 
> library(AER)
Loading required package: car
Loading required package: carData
Loading required package: lmtest
Loading required package: zoo

Attaching package: â€˜zooâ€™

The following objects are masked from â€˜package:baseâ€™:

    as.Date, as.Date.numeric

Loading required package: sandwich
Loading required package: survival
> 
> data("CigarettesSW", package = "AER")
> ivr <- ivreg(
+   log(packs) ~ income | population,
+   data = CigarettesSW,
+   subset = year == "1995"
+ )
> 
> summary(ivr)

Call:
ivreg(formula = log(packs) ~ income | population, data = CigarettesSW, 
    subset = year == "1995")

Residuals:
     Min       1Q   Median       3Q      Max 
-0.69305 -0.12941 -0.02257  0.11723  0.58184 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept)  4.612e+00  4.454e-02 103.549   <2e-16 ***
income      -5.705e-10  2.334e-10  -2.445   0.0184 *  
---
Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1

Residual standard error: 0.2293 on 46 degrees of freedom
Multiple R-Squared: 0.1308,	Adjusted R-squared: 0.1119 
Wald test: 5.976 on 1 and 46 DF,  p-value: 0.01839 

> 
> tidy(ivr)
# A tibble: 2 x 5
  term         estimate std.error statistic  p.value
  <chr>           <dbl>     <dbl>     <dbl>    <dbl>
1 (Intercept)  4.61e+ 0  4.45e- 2    104.   3.74e-56
2 income      -5.71e-10  2.33e-10     -2.44 1.84e- 2
> tidy(ivr, conf.int = TRUE)
# A tibble: 2 x 7
  term         estimate std.error statistic  p.value conf.low conf.high
  <chr>           <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
1 (Intercept)  4.61e+ 0  4.45e- 2    104.   3.74e-56  4.52e+0  4.70e+ 0
2 income      -5.71e-10  2.33e-10     -2.44 1.84e- 2 -1.03e-9 -1.13e-10
> tidy(ivr, conf.int = TRUE, exponentiate = TRUE)
Warning in process_lm(ret, x, conf.int = conf.int, conf.level = conf.level,  :
  Exponentiating coefficients, but model did not use a log or logit link function.
# A tibble: 2 x 7
  term        estimate std.error statistic  p.value conf.low conf.high
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
1 (Intercept)  101.     4.45e- 2    104.   3.74e-56   92.2     110.   
2 income         1.000  2.33e-10     -2.44 1.84e- 2    1.000     1.000
> 
> augment(ivr)
# A tibble: 48 x 6
   .rownames log.packs.    income population .fitted  .resid
   <chr>          <dbl>     <dbl>      <dbl>   <dbl>   <dbl>
 1 49              4.62  83903280    4262731    4.56  0.0522
 2 50              4.71  45995496    2480121    4.59  0.124 
 3 51              4.28  88870496    4306908    4.56 -0.285 
 4 52              4.04 771470144   31493524    4.17 -0.131 
 5 53              4.41  92946544    3738061    4.56 -0.145 
 6 54              4.38 104315120    3265293    4.55 -0.177 
 7 55              4.82  18237436     718265    4.60  0.223 
 8 56              4.53 333525344   14185403    4.42  0.112 
 9 57              4.58 159800448    7188538    4.52  0.0591
10 58              4.53  60170928    2840860    4.58 -0.0512
# â€¦ with 38 more rows
> 
> glance(ivr)
# A tibble: 1 x 7
  r.squared adj.r.squared sigma statistic p.value    df df.residual
      <dbl>         <dbl> <dbl>     <dbl>   <dbl> <int>       <int>
1     0.131         0.112 0.229      5.98  0.0184     2          46
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:AERâ€™, â€˜package:survivalâ€™, â€˜package:sandwichâ€™,
  â€˜package:lmtestâ€™, â€˜package:zooâ€™, â€˜package:carâ€™, â€˜package:carDataâ€™

> nameEx("tidy.kappa")
> ### * tidy.kappa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.kappa
> ### Title: Tidy a(n) kappa object
> ### Aliases: tidy.kappa kappa_tidiers psych_tidiers
> 
> ### ** Examples
> 
> 
> library(psych)
> 
> rater1 = 1:9
> rater2 = c(1, 3, 1, 6, 1, 5, 5, 6, 7)
> ck <- cohen.kappa(cbind(rater1, rater2))
> 
> tidy(ck)
# A tibble: 2 x 4
  type       estimate conf.low conf.high
  <chr>         <dbl>    <dbl>     <dbl>
1 unweighted    0       -0.185     0.185
2 weighted      0.678    0.430     0.926
> 
> # graph the confidence intervals
> library(ggplot2)

Attaching package: â€˜ggplot2â€™

The following objects are masked from â€˜package:psychâ€™:

    %+%, alpha

> ggplot(tidy(ck), aes(estimate, type)) +
+   geom_point() +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:psychâ€™

> nameEx("tidy.kde")
> ### * tidy.kde
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.kde
> ### Title: Tidy a(n) kde object
> ### Aliases: tidy.kde kde_tidiers ks_tidiers
> 
> ### ** Examples
> 
> 
> if (requireNamespace("ks", quietly = TRUE)) {
+   
+   library(ks)
+   
+   dat <- replicate(2, rnorm(100))
+   k <- kde(dat)
+ 
+   td <- tidy(k)
+   td
+ 
+   library(ggplot2)
+   ggplot(td, aes(x1, x2, fill = estimate)) +
+     geom_tile() +
+     theme_void()
+ 
+   # also works with 3 dimensions
+   dat3 <- replicate(3, rnorm(100))
+   k3 <- kde(dat3)
+ 
+   td3 <- tidy(k3)
+   td3
+ }
# A tibble: 397,953 x 4
     obs variable value estimate
   <int> <chr>    <dbl>    <dbl>
 1     1 x1       -4.08        0
 2     2 x1       -3.92        0
 3     3 x1       -3.76        0
 4     4 x1       -3.61        0
 5     5 x1       -3.45        0
 6     6 x1       -3.29        0
 7     7 x1       -3.13        0
 8     8 x1       -2.97        0
 9     9 x1       -2.81        0
10    10 x1       -2.65        0
# â€¦ with 397,943 more rows
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:ksâ€™

> nameEx("tidy.lavaan")
> ### * tidy.lavaan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.lavaan
> ### Title: Tidy a(n) lavaan object
> ### Aliases: tidy.lavaan lavaan_tidiers sem_tidiers cfa_tidiers
> 
> ### ** Examples
> 
> 
> if (require("lavaan")) {
+ 
+  library(lavaan)
+  
+  cfa.fit <- cfa('F =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9',
+                 data = HolzingerSwineford1939, group = "school")
+  tidy(cfa.fit)
+ }
Loading required package: lavaan
This is lavaan 0.6-3
lavaan is BETA software! Please report any bugs.
# A tibble: 58 x 13
   term  op    block group estimate std.error statistic  p.value conf.low
   <chr> <chr> <int> <int>    <dbl>     <dbl>     <dbl>    <dbl>    <dbl>
 1 F =~â€¦ =~        1     1    1         0         NA    NA         1     
 2 F =~â€¦ =~        1     1    0.333     0.190      1.76  7.89e-2  -0.0385
 3 F =~â€¦ =~        1     1    0.400     0.182      2.20  2.80e-2   0.0432
 4 F =~â€¦ =~        1     1    1.66      0.280      5.92  3.28e-9   1.11  
 5 F =~â€¦ =~        1     1    1.92      0.323      5.95  2.60e-9   1.29  
 6 F =~â€¦ =~        1     1    1.48      0.247      5.98  2.23e-9   0.992 
 7 F =~â€¦ =~        1     1    0.453     0.173      2.61  8.96e-3   0.113 
 8 F =~â€¦ =~        1     1    0.376     0.155      2.43  1.51e-2   0.0726
 9 F =~â€¦ =~        1     1    0.422     0.159      2.66  7.80e-3   0.111 
10 x1 ~â€¦ ~~        1     1    1.07      0.127      8.47  0.        0.825 
# â€¦ with 48 more rows, and 4 more variables: conf.high <dbl>, std.lv <dbl>,
#   std.all <dbl>, std.nox <dbl>
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:lavaanâ€™

> nameEx("tidy.lm")
> ### * tidy.lm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.lm
> ### Title: Tidy a(n) lm object
> ### Aliases: tidy.lm lm_tidiers tidy.summary.lm
> 
> ### ** Examples
> 
> 
> library(ggplot2)
> library(dplyr)

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

> 
> mod <- lm(mpg ~ wt + qsec, data = mtcars)
> 
> tidy(mod)
# A tibble: 3 x 5
  term        estimate std.error statistic  p.value
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>
1 (Intercept)   19.7       5.25       3.76 7.65e- 4
2 wt            -5.05      0.484    -10.4  2.52e-11
3 qsec           0.929     0.265      3.51 1.50e- 3
> glance(mod)
# A tibble: 1 x 11
  r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC
      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <int>  <dbl> <dbl> <dbl>
1     0.826         0.814  2.60      69.0 9.39e-12     3  -74.4  157.  163.
# â€¦ with 2 more variables: deviance <dbl>, df.residual <int>
> 
> # coefficient plot
> d <- tidy(mod) %>% 
+   mutate(
+     low = estimate - std.error,
+     high = estimate + std.error
+   )
>   
> ggplot(d, aes(estimate, term, xmin = low, xmax = high, height = 0)) +
+      geom_point() +
+      geom_vline(xintercept = 0) +
+      geom_errorbarh()
> 
> augment(mod)
# A tibble: 32 x 11
   .rownames   mpg    wt  qsec .fitted .se.fit  .resid   .hat .sigma .cooksd
   <chr>     <dbl> <dbl> <dbl>   <dbl>   <dbl>   <dbl>  <dbl>  <dbl>   <dbl>
 1 Mazda RX4  21    2.62  16.5    21.8   0.683 -0.815  0.0693   2.64 2.63e-3
 2 Mazda RXâ€¦  21    2.88  17.0    21.0   0.547 -0.0482 0.0444   2.64 5.59e-6
 3 Datsun 7â€¦  22.8  2.32  18.6    25.3   0.640 -2.53   0.0607   2.60 2.17e-2
 4 Hornet 4â€¦  21.4  3.22  19.4    21.6   0.623 -0.181  0.0576   2.64 1.05e-4
 5 Hornet Sâ€¦  18.7  3.44  17.0    18.2   0.512  0.504  0.0389   2.64 5.29e-4
 6 Valiant    18.1  3.46  20.2    21.1   0.803 -2.97   0.0957   2.58 5.10e-2
 7 Duster 3â€¦  14.3  3.57  15.8    16.4   0.701 -2.14   0.0729   2.61 1.93e-2
 8 Merc 240D  24.4  3.19  20      22.2   0.730  2.17   0.0791   2.61 2.18e-2
 9 Merc 230   22.8  3.15  22.9    25.1   1.41  -2.32   0.295    2.59 1.59e-1
10 Merc 280   19.2  3.44  18.3    19.4   0.491 -0.185  0.0358   2.64 6.55e-5
# â€¦ with 22 more rows, and 1 more variable: .std.resid <dbl>
> augment(mod, mtcars)
# A tibble: 32 x 19
   .rownames   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1 Mazda RX4  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2 Mazda RXâ€¦  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3 Datsun 7â€¦  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4 Hornet 4â€¦  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5 Hornet Sâ€¦  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6 Valiant    18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7 Duster 3â€¦  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10 Merc 280   19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# â€¦ with 22 more rows, and 7 more variables: .fitted <dbl>, .se.fit <dbl>,
#   .resid <dbl>, .hat <dbl>, .sigma <dbl>, .cooksd <dbl>, .std.resid <dbl>
> 
> # predict on new data
> newdata <- mtcars %>% head(6) %>% mutate(wt = wt + 1)
> augment(mod, newdata = newdata)
# A tibble: 6 x 13
    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb .fitted
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>
1  21       6   160   110  3.9   3.62  16.5     0     1     4     4    16.8
2  21       6   160   110  3.9   3.88  17.0     0     1     4     4    16.0
3  22.8     4   108    93  3.85  3.32  18.6     1     1     4     1    20.3
4  21.4     6   258   110  3.08  4.22  19.4     1     0     3     1    16.5
5  18.7     8   360   175  3.15  4.44  17.0     0     0     3     2    13.1
6  18.1     6   225   105  2.76  4.46  20.2     1     0     3     1    16.0
# â€¦ with 1 more variable: .se.fit <dbl>
> 
> au <- augment(mod, data = mtcars)
> 
> ggplot(au, aes(.hat, .std.resid)) +
+   geom_vline(size = 2, colour = "white", xintercept = 0) +
+   geom_hline(size = 2, colour = "white", yintercept = 0) +
+   geom_point() + geom_smooth(se = FALSE)
`geom_smooth()` using method = 'loess' and formula 'y ~ x'
> 
> plot(mod, which = 6)
> ggplot(au, aes(.hat, .cooksd)) +
+   geom_vline(xintercept = 0, colour = NA) +
+   geom_abline(slope = seq(0, 3, by = 0.5), colour = "white") +
+   geom_smooth(se = FALSE) +
+   geom_point()
`geom_smooth()` using method = 'loess' and formula 'y ~ x'
> 
> # column-wise models
> a <- matrix(rnorm(20), nrow = 10)
> b <- a + rnorm(length(a))
> result <- lm(b ~ a)
> tidy(result)
# A tibble: 6 x 6
  response term        estimate std.error statistic p.value
  <chr>    <chr>          <dbl>     <dbl>     <dbl>   <dbl>
1 Y1       (Intercept)   -0.128     0.219    -0.585 0.577  
2 Y1       a1             0.303     0.299     1.02  0.343  
3 Y1       a2             0.348     0.218     1.60  0.154  
4 Y2       (Intercept)    0.131     0.300     0.437 0.676  
5 Y2       a1            -0.215     0.408    -0.527 0.614  
6 Y2       a2             1.07      0.298     3.61  0.00867
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:dplyrâ€™, â€˜package:ggplot2â€™

> nameEx("tidy.lmRob")
> ### * tidy.lmRob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.lmRob
> ### Title: Tidy a(n) lmRob object
> ### Aliases: tidy.lmRob robust_tidiers
> 
> ### ** Examples
> 
> 
> library(robust)
Loading required package: fit.models
> m <- lmRob(mpg ~ wt, data = mtcars)
> 
> tidy(m)
# A tibble: 2 x 5
  term        estimate std.error statistic  p.value
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>
1 (Intercept)    35.6       3.58      9.93 5.37e-11
2 wt             -4.91      1.09     -4.49 9.67e- 5
> augment(m)
# A tibble: 32 x 6
   .rownames           mpg    wt .fitted .se.fit  .resid
   <chr>             <dbl> <dbl>   <dbl>   <dbl>   <dbl>
 1 Mazda RX4          21    2.62    22.7   1.12  -1.68  
 2 Mazda RX4 Wag      21    2.88    21.4   1.00  -0.431 
 3 Datsun 710         22.8  2.32    24.2   1.32  -1.36  
 4 Hornet 4 Drive     21.4  3.22    19.8   0.957  1.64  
 5 Hornet Sportabout  18.7  3.44    18.7   1.00   0.0445
 6 Valiant            18.1  3.46    18.6   1.01  -0.457 
 7 Duster 360         14.3  3.57    18.0   1.06  -3.72  
 8 Merc 240D          24.4  3.19    19.9   0.955  4.52  
 9 Merc 230           22.8  3.15    20.1   0.955  2.72  
10 Merc 280           19.2  3.44    18.7   1.00   0.545 
# â€¦ with 22 more rows
> glance(m)
# A tibble: 1 x 4
  r.squared deviance sigma df.residual
      <dbl>    <dbl> <dbl>       <int>
1     0.567     136.  2.95          30
> 
> gm <- glmRob(am ~ wt, data = mtcars, family = "binomial")
> glance(gm)
# A tibble: 1 x 3
  deviance null.deviance df.residual
     <dbl>         <dbl>       <int>
1     19.2          44.4          30
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:robustâ€™, â€˜package:fit.modelsâ€™

> nameEx("tidy.lmodel2")
> ### * tidy.lmodel2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.lmodel2
> ### Title: Tidy a(n) lmodel2 object
> ### Aliases: tidy.lmodel2 lmodel2_tidiers
> 
> ### ** Examples
> 
> 
> if (require("lmodel2", quietly = TRUE)) {
+ 
+   library(lmodel2)
+   
+   data(mod2ex2)
+   Ex2.res <- lmodel2(Prey ~ Predators, data=mod2ex2, "relative", "relative", 99)
+   Ex2.res
+ 
+   tidy(Ex2.res)
+   glance(Ex2.res)
+ 
+   # this allows coefficient plots with ggplot2
+   library(ggplot2)
+   ggplot(tidy(Ex2.res), aes(estimate, term, color = method)) +
+     geom_point() +
+     geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
+     geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
+ }
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:lmodel2â€™

> nameEx("tidy.manova")
> ### * tidy.manova
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.manova
> ### Title: Tidy a(n) manova object
> ### Aliases: tidy.manova
> 
> ### ** Examples
> 
> 
> npk2 <- within(npk, foo <- rnorm(24))
> m <- manova(cbind(yield, foo) ~ block + N * P * K, npk2)
> tidy(m) 
# A tibble: 8 x 7
  term         df pillai statistic num.df den.df p.value
  <chr>     <dbl>  <dbl>     <dbl>  <dbl>  <dbl>   <dbl>
1 block         5  0.895      1.94     10     24  0.0886
2 N             1  0.506      5.63      2     11  0.0207
3 P             1  0.171      1.13      2     11  0.357 
4 K             1  0.344      2.89      2     11  0.0982
5 N:P           1  0.302      2.37      2     11  0.139 
6 N:K           1  0.217      1.52      2     11  0.261 
7 P:K           1  0.420      3.98      2     11  0.0500
8 Residuals    12 NA         NA        NA     NA NA     
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.map")
> ### * tidy.map
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.map
> ### Title: Tidy a(n) map object
> ### Aliases: tidy.map maps_tidiers
> 
> ### ** Examples
> 
> 
> if (require("maps") && require("ggplot2")) {
+     
+     library(maps)
+     library(ggplot2)
+ 
+     ca <- map("county", "ca", plot = FALSE, fill = TRUE)
+     tidy(ca)
+     qplot(long, lat, data = ca, geom = "polygon", group = group)
+ 
+     tx <- map("county", "texas", plot = FALSE, fill = TRUE)
+     tidy(tx)
+     qplot(long, lat, data = tx, geom = "polygon", group = group,
+           colour = I("white"))
+ }
Loading required package: maps
Loading required package: ggplot2
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:mapsâ€™

> nameEx("tidy.mjoint")
> ### * tidy.mjoint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.mjoint
> ### Title: Tidy a(n) mjoint object
> ### Aliases: tidy.mjoint mjoint_tidiers joinerml_tidiers
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Fit a joint model with bivariate longitudinal outcomes
> ##D library(joineRML)
> ##D data(heart.valve)
> ##D hvd <- heart.valve[!is.na(heart.valve$log.grad) &
> ##D                        !is.na(heart.valve$log.lvmi) &
> ##D                        heart.valve$num <= 50, ]
> ##D fit <- mjoint(
> ##D     formLongFixed = list(
> ##D         "grad" = log.grad ~ time + sex + hs,
> ##D         "lvmi" = log.lvmi ~ time + sex
> ##D     ),
> ##D     formLongRandom = list(
> ##D         "grad" = ~ 1 | num,
> ##D         "lvmi" = ~ time | num
> ##D     ),
> ##D     formSurv = Surv(fuyrs, status) ~ age,
> ##D     data = hvd,
> ##D     inits = list("gamma" = c(0.11, 1.51, 0.80)),
> ##D     timeVar = "time"
> ##D )
> ##D 
> ##D # Extract the survival fixed effects
> ##D tidy(fit)
> ##D 
> ##D # Extract the longitudinal fixed effects
> ##D tidy(fit, component = "longitudinal")
> ##D 
> ##D # Extract the survival fixed effects with confidence intervals
> ##D tidy(fit, ci = TRUE)
> ##D 
> ##D # Extract the survival fixed effects with confidence intervals based
> ##D # on bootstrapped standard errors
> ##D bSE <- bootSE(fit, nboot = 5, safe.boot = TRUE)
> ##D tidy(fit, boot_se = bSE, ci = TRUE)
> ##D 
> ##D # Augment original data with fitted longitudinal values and residuals
> ##D hvd2 <- augment(fit)
> ##D 
> ##D # Extract model statistics
> ##D glance(fit)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.mle2")
> ### * tidy.mle2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.mle2
> ### Title: Tidy a(n) mle2 object
> ### Aliases: tidy.mle2 mle2_tidiers bbmle_tidiers
> 
> ### ** Examples
> 
> 
> if (require("bbmle", quietly = TRUE)) {
+   x <- 0:10
+   y <- c(26, 17, 13, 12, 20, 5, 9, 8, 5, 4, 8)
+   d <- data.frame(x,y)
+ 
+   fit <- mle2(y ~ dpois(lambda = ymean),
+               start = list(ymean = mean(y)), data = d)
+ 
+   tidy(fit)
+ }
# A tibble: 1 x 5
  term  estimate std.error statistic  p.value
  <chr>    <dbl>     <dbl>     <dbl>    <dbl>
1 ymean     11.5      1.02      11.3 1.86e-29
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:bbmleâ€™, â€˜package:stats4â€™

> nameEx("tidy.muhaz")
> ### * tidy.muhaz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.muhaz
> ### Title: Tidy a(n) muhaz object
> ### Aliases: tidy.muhaz muhaz_tidiers
> 
> ### ** Examples
> 
> if (require("muhaz", quietly = TRUE)) {
+   data(ovarian, package="survival")
+   x <- muhaz::muhaz(ovarian$futime, ovarian$fustat)
+   tidy(x)
+   glance(x)
+ }
# A tibble: 1 x 5
   nobs min.time max.time min.hazard max.hazard
  <int>    <dbl>    <dbl>      <dbl>      <dbl>
1    26        0      744   0.000212    0.00111
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:muhazâ€™

> nameEx("tidy.multinom")
> ### * tidy.multinom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.multinom
> ### Title: Tidying methods for multinomial logistic regression models
> ### Aliases: tidy.multinom multinom_tidiers nnet_tidiers
> 
> ### ** Examples
> 
> 
> if (require(nnet) & require(MASS)){
+   library(nnet)
+   library(MASS)
+   
+   example(birthwt)
+   bwt.mu <- multinom(low ~ ., bwt)
+   tidy(bwt.mu)
+   glance(bwt.mu)
+ 
+   #* This model is a truly terrible model
+   #* but it should show you what the output looks
+   #* like in a multinomial logistic regression
+ 
+   fit.gear <- multinom(gear ~ mpg + factor(am), data = mtcars)
+   tidy(fit.gear)
+   glance(fit.gear)
+ }
Loading required package: nnet
Loading required package: MASS

brthwt> bwt <- with(birthwt, {
brthwt+ race <- factor(race, labels = c("white", "black", "other"))
brthwt+ ptd <- factor(ptl > 0)
brthwt+ ftv <- factor(ftv)
brthwt+ levels(ftv)[-(1:2)] <- "2+"
brthwt+ data.frame(low = factor(low), age, lwt, race, smoke = (smoke > 0),
brthwt+            ptd, ht = (ht > 0), ui = (ui > 0), ftv)
brthwt+ })

brthwt> options(contrasts = c("contr.treatment", "contr.poly"))

brthwt> glm(low ~ ., binomial, bwt)

Call:  glm(formula = low ~ ., family = binomial, data = bwt)

Coefficients:
(Intercept)          age          lwt    raceblack    raceother    smokeTRUE  
    0.82302     -0.03723     -0.01565      1.19241      0.74068      0.75553  
    ptdTRUE       htTRUE       uiTRUE         ftv1        ftv2+  
    1.34376      1.91317      0.68020     -0.43638      0.17901  

Degrees of Freedom: 188 Total (i.e. Null);  178 Residual
Null Deviance:	    234.7 
Residual Deviance: 195.5 	AIC: 217.5
# weights:  12 (11 variable)
initial  value 131.004817 
iter  10 value 98.029803
final  value 97.737759 
converged
# weights:  12 (6 variable)
initial  value 35.155593 
iter  10 value 14.156582
iter  20 value 14.031881
iter  30 value 14.025659
iter  40 value 14.021414
iter  50 value 14.019824
iter  60 value 14.019278
iter  70 value 14.018601
iter  80 value 14.018282
iter  80 value 14.018282
iter  90 value 14.017126
final  value 14.015374 
converged
# A tibble: 1 x 3
    edf deviance   AIC
  <dbl>    <dbl> <dbl>
1     6     28.0  40.0
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:MASSâ€™, â€˜package:nnetâ€™

> nameEx("tidy.nls")
> ### * tidy.nls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.nls
> ### Title: Tidy a(n) nls object
> ### Aliases: tidy.nls nls_tidiers
> 
> ### ** Examples
> 
> 
> n <- nls(mpg ~ k * e ^ wt, data = mtcars, start = list(k = 1, e = 2))
> 
> tidy(n)
# A tibble: 2 x 5
  term  estimate std.error statistic  p.value
  <chr>    <dbl>     <dbl>     <dbl>    <dbl>
1 k       49.7      3.79        13.1 5.96e-14
2 e        0.746    0.0199      37.5 8.86e-27
> augment(n)
# A tibble: 32 x 4
     mpg    wt .fitted .resid
   <dbl> <dbl>   <dbl>  <dbl>
 1  21    2.62    23.0 -2.01 
 2  21    2.88    21.4 -0.352
 3  22.8  2.32    25.1 -2.33 
 4  21.4  3.22    19.3  2.08 
 5  18.7  3.44    18.1  0.611
 6  18.1  3.46    18.0  0.117
 7  14.3  3.57    17.4 -3.11 
 8  24.4  3.19    19.5  4.93 
 9  22.8  3.15    19.7  3.10 
10  19.2  3.44    18.1  1.11 
# â€¦ with 22 more rows
> glance(n)
# A tibble: 1 x 8
  sigma isConv     finTol logLik   AIC   BIC deviance df.residual
  <dbl> <lgl>       <dbl>  <dbl> <dbl> <dbl>    <dbl>       <int>
1  2.67 TRUE   0.00000204  -75.8  158.  162.     214.          30
> 
> library(ggplot2)
> ggplot(augment(n), aes(wt, mpg)) +
+   geom_point() +
+   geom_line(aes(y = .fitted))
> 
> newdata <- head(mtcars)
> newdata$wt <- newdata$wt + 1
> augment(n, newdata = newdata)
# A tibble: 6 x 13
  .rownames   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1 1          21       6   160   110  3.9   3.62  16.5     0     1     4     4
2 2          21       6   160   110  3.9   3.88  17.0     0     1     4     4
3 3          22.8     4   108    93  3.85  3.32  18.6     1     1     4     1
4 4          21.4     6   258   110  3.08  4.22  19.4     1     0     3     1
5 5          18.7     8   360   175  3.15  4.44  17.0     0     0     3     2
6 6          18.1     6   225   105  2.76  4.46  20.2     1     0     3     1
# â€¦ with 1 more variable: .fitted <dbl>
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™

> nameEx("tidy.orcutt")
> ### * tidy.orcutt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.orcutt
> ### Title: Tidy a(n) orcutt object
> ### Aliases: tidy.orcutt orcutt_tidiers
> 
> ### ** Examples
> 
> 
> reg <- lm(mpg ~ wt + qsec + disp, mtcars)
> tidy(reg)
# A tibble: 4 x 5
  term          estimate std.error statistic  p.value
  <chr>            <dbl>     <dbl>     <dbl>    <dbl>
1 (Intercept)  19.8         5.94      3.33   0.00244 
2 wt           -5.03        1.22     -4.11   0.000310
3 qsec          0.927       0.342     2.71   0.0114  
4 disp         -0.000128    0.0106   -0.0121 0.990   
> 
> if (require("orcutt", quietly = TRUE)) {
+   co <- cochrane.orcutt(reg)
+   co
+ 
+   tidy(co)
+   glance(co)
+ }

Attaching package: â€˜zooâ€™

The following objects are masked from â€˜package:baseâ€™:

    as.Date, as.Date.numeric

Warning in tidy.orcutt(co) : deal with tidy.orcutt conf.int nonsense
# A tibble: 1 x 8
  r.squared adj.r.squared   rho number.interactâ€¦ dw.original p.value.original
      <dbl>         <dbl> <dbl>            <dbl>       <dbl>            <dbl>
1     0.799         0.777 0.268                7        1.50           0.0406
# â€¦ with 2 more variables: dw.transformed <dbl>, p.value.transformed <dbl>
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:orcuttâ€™, â€˜package:lmtestâ€™, â€˜package:zooâ€™

> nameEx("tidy.pairwise.htest")
> ### * tidy.pairwise.htest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.pairwise.htest
> ### Title: Tidy a(n) pairwise.htest object
> ### Aliases: tidy.pairwise.htest
> 
> ### ** Examples
> 
> 
> attach(airquality)
> Month <- factor(Month, labels = month.abb[5:9])
> ptt <- pairwise.t.test(Ozone, Month)
> tidy(ptt)
# A tibble: 10 x 3
   group1 group2  p.value
   <chr>  <chr>     <dbl>
 1 Jun    May    1       
 2 Jul    May    0.000264
 3 Aug    May    0.000195
 4 Sep    May    1       
 5 Jul    Jun    0.0511  
 6 Aug    Jun    0.0499  
 7 Sep    Jun    1       
 8 Aug    Jul    1       
 9 Sep    Jul    0.00488 
10 Sep    Aug    0.00388 
> 
> attach(iris)
> ptt2 <- pairwise.t.test(Petal.Length, Species)
> tidy(ptt2)
# A tibble: 3 x 3
  group1     group2      p.value
  <chr>      <chr>         <dbl>
1 versicolor setosa     1.05e-68
2 virginica  setosa     1.23e-90
3 virginica  versicolor 1.81e-31
> 
> tidy(pairwise.t.test(Petal.Length, Species, alternative = "greater"))
# A tibble: 3 x 3
  group1     group2      p.value
  <chr>      <chr>         <dbl>
1 versicolor setosa     5.25e-69
2 virginica  setosa     6.16e-91
3 virginica  versicolor 9.05e-32
> tidy(pairwise.t.test(Petal.Length, Species, alternative = "less"))
# A tibble: 3 x 3
  group1     group2     p.value
  <chr>      <chr>        <dbl>
1 versicolor setosa           1
2 virginica  setosa           1
3 virginica  versicolor       1
> 
> tidy(pairwise.wilcox.test(Petal.Length, Species))
# A tibble: 3 x 3
  group1     group2      p.value
  <chr>      <chr>         <dbl>
1 versicolor setosa     1.70e-17
2 virginica  setosa     1.70e-17
3 virginica  versicolor 9.13e-17
> 
> 
> 
> 
> cleanEx()

detaching â€˜irisâ€™, â€˜airqualityâ€™

> nameEx("tidy.plm")
> ### * tidy.plm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.plm
> ### Title: Tidy a(n) plm object
> ### Aliases: tidy.plm plm_tidiers
> 
> ### ** Examples
> 
> 
> library(plm)
Loading required package: Formula
> 
> data("Produc", package = "plm")
> zz <- plm(log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp,
+           data = Produc, index = c("state","year"))
> 
> summary(zz)
Oneway (individual) effect Within Model

Call:
plm(formula = log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp, 
    data = Produc, index = c("state", "year"))

Balanced Panel: n = 48, T = 17, N = 816

Residuals:
     Min.   1st Qu.    Median   3rd Qu.      Max. 
-0.120456 -0.023741 -0.002041  0.018144  0.174718 

Coefficients:
             Estimate  Std. Error t-value  Pr(>|t|)    
log(pcap) -0.02614965  0.02900158 -0.9017    0.3675    
log(pc)    0.29200693  0.02511967 11.6246 < 2.2e-16 ***
log(emp)   0.76815947  0.03009174 25.5273 < 2.2e-16 ***
unemp     -0.00529774  0.00098873 -5.3582 1.114e-07 ***
---
Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1

Total Sum of Squares:    18.941
Residual Sum of Squares: 1.1112
R-Squared:      0.94134
Adj. R-Squared: 0.93742
F-statistic: 3064.81 on 4 and 764 DF, p-value: < 2.22e-16
> 
> tidy(zz)
# A tibble: 4 x 5
  term      estimate std.error statistic   p.value
  <chr>        <dbl>     <dbl>     <dbl>     <dbl>
1 log(pcap) -0.0261   0.0290      -0.902 3.68e-  1
2 log(pc)    0.292    0.0251      11.6   7.08e- 29
3 log(emp)   0.768    0.0301      25.5   2.02e-104
4 unemp     -0.00530  0.000989    -5.36  1.11e-  7
> tidy(zz, conf.int = TRUE)
# A tibble: 4 x 7
  term      estimate std.error statistic   p.value conf.low conf.high
  <chr>        <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl>
1 log(pcap) -0.0261   0.0290      -0.902 3.68e-  1 -0.0830    0.0307 
2 log(pc)    0.292    0.0251      11.6   7.08e- 29  0.243     0.341  
3 log(emp)   0.768    0.0301      25.5   2.02e-104  0.709     0.827  
4 unemp     -0.00530  0.000989    -5.36  1.11e-  7 -0.00724  -0.00336
> tidy(zz, conf.int = TRUE, conf.level = .9)
# A tibble: 4 x 7
  term      estimate std.error statistic   p.value conf.low conf.high
  <chr>        <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl>
1 log(pcap) -0.0261   0.0290      -0.902 3.68e-  1 -0.0739    0.0216 
2 log(pc)    0.292    0.0251      11.6   7.08e- 29  0.251     0.333  
3 log(emp)   0.768    0.0301      25.5   2.02e-104  0.719     0.818  
4 unemp     -0.00530  0.000989    -5.36  1.11e-  7 -0.00692  -0.00367
> 
> augment(zz)
# A tibble: 816 x 7
   log.gsp. log.pcap. log.pc. log.emp. unemp .fitted   .resid
      <dbl>     <dbl>   <dbl>    <dbl> <dbl>   <dbl>    <dbl>
 1     10.3      9.62    10.5     6.92   4.7    10.3 -0.0466 
 2     10.3      9.65    10.5     6.93   5.2    10.3 -0.0306 
 3     10.4      9.68    10.6     6.98   4.7    10.4 -0.0165 
 4     10.4      9.71    10.6     7.03   3.9    10.4 -0.00873
 5     10.4      9.73    10.6     7.06   5.5    10.5 -0.0271 
 6     10.4      9.76    10.7     7.05   7.7    10.4 -0.0224 
 7     10.5      9.78    10.8     7.10   6.8    10.5 -0.0366 
 8     10.5      9.80    10.8     7.15   7.4    10.6 -0.0300 
 9     10.6      9.82    10.9     7.20   6.3    10.6 -0.0189 
10     10.6      9.85    10.9     7.22   7.1    10.6 -0.0141 
# â€¦ with 806 more rows
> glance(zz)
# A tibble: 1 x 6
  r.squared adj.r.squared statistic p.value deviance df.residual
      <dbl>         <dbl>     <dbl>   <dbl>    <dbl>       <int>
1     0.941         0.937     3065.       0     1.11         764
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:plmâ€™, â€˜package:Formulaâ€™

> nameEx("tidy.poLCA")
> ### * tidy.poLCA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.poLCA
> ### Title: Tidy a(n) poLCA object
> ### Aliases: tidy.poLCA poLCA_tidiers
> 
> ### ** Examples
> 
> 
> if (require("poLCA", quietly = TRUE)) {
+   library(poLCA)
+   library(dplyr)
+ 
+   data(values)
+   f <- cbind(A, B, C, D)~1
+   M1 <- poLCA(f, values, nclass = 2, verbose = FALSE)
+ 
+   M1
+   tidy(M1)
+   augment(M1)
+   glance(M1)
+ 
+   library(ggplot2)
+ 
+   ggplot(tidy(M1), aes(factor(class), estimate, fill = factor(outcome))) +
+     geom_bar(stat = "identity", width = 1) +
+     facet_wrap(~ variable)
+ 
+   set.seed(2016)
+   # compare multiple
+   mods <- tibble(nclass = 1:3) %>%
+     group_by(nclass) %>%
+     do(mod = poLCA(f, values, nclass = .$nclass, verbose = FALSE))
+ 
+   # compare log-likelihood and/or AIC, BIC
+   mods %>%
+     glance(mod)
+ 
+   ## Three-class model with a single covariate.
+ 
+   data(election)
+   f2a <- cbind(MORALG,CARESG,KNOWG,LEADG,DISHONG,INTELG,
+                MORALB,CARESB,KNOWB,LEADB,DISHONB,INTELB)~PARTY
+   nes2a <- poLCA(f2a, election, nclass = 3, nrep = 5, verbose = FALSE)
+ 
+   td <- tidy(nes2a)
+   td
+ 
+   # show
+ 
+   ggplot(td, aes(outcome, estimate, color = factor(class), group = class)) +
+     geom_line() +
+     facet_wrap(~ variable, nrow = 2) +
+     theme(axis.text.x = element_text(angle = 90, hjust = 1))
+ 
+   au <- augment(nes2a)
+   au
+   au %>%
+     count(.class)
+ 
+   # if the original data is provided, it leads to NAs in new columns
+   # for rows that weren't predicted
+   au2 <- augment(nes2a, data = election)
+   au2
+   dim(au2)
+ }

Attaching package: â€˜dplyrâ€™

The following object is masked from â€˜package:MASSâ€™:

    select

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

[1] 1785   20
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:dplyrâ€™, â€˜package:poLCAâ€™,
  â€˜package:MASSâ€™, â€˜package:scatterplot3dâ€™

> nameEx("tidy.power.htest")
> ### * tidy.power.htest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.power.htest
> ### Title: Tidy a(n) power.htest object
> ### Aliases: tidy.power.htest
> 
> ### ** Examples
> 
> 
> ptt <- power.t.test(n = 2:30, delta = 1)
> tidy(ptt)
# A tibble: 29 x 5
       n delta    sd sig.level  power
   <int> <dbl> <dbl>     <dbl>  <dbl>
 1     2     1     1      0.05 0.0913
 2     3     1     1      0.05 0.157 
 3     4     1     1      0.05 0.222 
 4     5     1     1      0.05 0.286 
 5     6     1     1      0.05 0.347 
 6     7     1     1      0.05 0.406 
 7     8     1     1      0.05 0.461 
 8     9     1     1      0.05 0.513 
 9    10     1     1      0.05 0.562 
10    11     1     1      0.05 0.607 
# â€¦ with 19 more rows
> 
> library(ggplot2)
> 
> ggplot(tidy(ptt), aes(n, power)) +
+   geom_line()
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™

> nameEx("tidy.prcomp")
> ### * tidy.prcomp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.prcomp
> ### Title: Tidy a(n) prcomp object
> ### Aliases: tidy.prcomp prcomp_tidiers
> 
> ### ** Examples
> 
> 
> pc <- prcomp(USArrests, scale = TRUE)
> 
> # information about rotation
> tidy(pc)
# A tibble: 200 x 3
   row            PC   value
   <fct>       <dbl>   <dbl>
 1 Alabama         1 -0.976 
 2 Alaska          1 -1.93  
 3 Arizona         1 -1.75  
 4 Arkansas        1  0.140 
 5 California      1 -2.50  
 6 Colorado        1 -1.50  
 7 Connecticut     1  1.34  
 8 Delaware        1 -0.0472
 9 Florida         1 -2.98  
10 Georgia         1 -1.62  
# â€¦ with 190 more rows
> 
> # information about samples (states)
> tidy(pc, "samples")
# A tibble: 200 x 3
   row            PC   value
   <fct>       <dbl>   <dbl>
 1 Alabama         1 -0.976 
 2 Alaska          1 -1.93  
 3 Arizona         1 -1.75  
 4 Arkansas        1  0.140 
 5 California      1 -2.50  
 6 Colorado        1 -1.50  
 7 Connecticut     1  1.34  
 8 Delaware        1 -0.0472
 9 Florida         1 -2.98  
10 Georgia         1 -1.62  
# â€¦ with 190 more rows
> 
> # information about PCs
> tidy(pc, "pcs")
# A tibble: 4 x 4
     PC std.dev percent cumulative
  <dbl>   <dbl>   <dbl>      <dbl>
1     1   1.57   0.620       0.620
2     2   0.995  0.247       0.868
3     3   0.597  0.0891      0.957
4     4   0.416  0.0434      1    
> 
> # state map
> library(dplyr)

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

> library(ggplot2)
> 
> pc %>%
+   tidy(matrix = "samples") %>%
+   mutate(region = tolower(row)) %>%
+   inner_join(map_data("state"), by = "region") %>%
+   ggplot(aes(long, lat, group = group, fill = value)) +
+   geom_polygon() +
+   facet_wrap(~ PC) +
+   theme_void() +
+   ggtitle("Principal components of arrest data")
> 
> au <- augment(pc, data = USArrests)
> au
# A tibble: 50 x 9
   .rownames Murder Assault UrbanPop  Rape .fittedPC1 .fittedPC2 .fittedPC3
   <fct>      <dbl>   <int>    <int> <dbl>      <dbl>      <dbl>      <dbl>
 1 Alabama     13.2     236       58  21.2    -0.976      1.12      -0.440 
 2 Alaska      10       263       48  44.5    -1.93       1.06       2.02  
 3 Arizona      8.1     294       80  31      -1.75      -0.738      0.0542
 4 Arkansas     8.8     190       50  19.5     0.140      1.11       0.113 
 5 Californâ€¦    9       276       91  40.6    -2.50      -1.53       0.593 
 6 Colorado     7.9     204       78  38.7    -1.50      -0.978      1.08  
 7 Connectiâ€¦    3.3     110       77  11.1     1.34      -1.08      -0.637 
 8 Delaware     5.9     238       72  15.8    -0.0472    -0.322     -0.711 
 9 Florida     15.4     335       80  31.9    -2.98       0.0388    -0.571 
10 Georgia     17.4     211       60  25.8    -1.62       1.27      -0.339 
# â€¦ with 40 more rows, and 1 more variable: .fittedPC4 <dbl>
> 
> ggplot(au, aes(.fittedPC1, .fittedPC2)) +
+   geom_point() +
+   geom_text(aes(label = .rownames), vjust = 1, hjust = 1)
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:mapsâ€™, â€˜package:ggplot2â€™, â€˜package:dplyrâ€™

> nameEx("tidy.pyears")
> ### * tidy.pyears
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.pyears
> ### Title: Tidy a(n) pyears object
> ### Aliases: tidy.pyears pyears_tidiers
> 
> ### ** Examples
> 
> 
> library(survival)
> 
> temp.yr  <- tcut(mgus$dxyr, 55:92, labels=as.character(55:91))
> temp.age <- tcut(mgus$age, 34:101, labels=as.character(34:100))
> ptime <- ifelse(is.na(mgus$pctime), mgus$futime, mgus$pctime)
> pstat <- ifelse(is.na(mgus$pctime), 0, 1)
> pfit <- pyears(Surv(ptime/365.25, pstat) ~ temp.yr + temp.age + sex,  mgus,
+                data.frame=TRUE)
> tidy(pfit)
# A tibble: 1,752 x 6
   temp.yr temp.age sex     pyears     n event
   <fct>   <fct>    <fct>    <dbl> <dbl> <dbl>
 1 71      34       female 0.00274     1     0
 2 68      35       female 0.00274     1     0
 3 72      35       female 0.00274     1     0
 4 69      36       female 0.00274     1     0
 5 73      36       female 0.00274     1     0
 6 69      37       female 0.00274     1     0
 7 70      37       female 0.00274     1     0
 8 74      37       female 0.00274     1     0
 9 70      38       female 0.00274     1     0
10 71      38       female 0.00274     1     0
# â€¦ with 1,742 more rows
> glance(pfit)
# A tibble: 1 x 2
  total offtable
  <dbl>    <dbl>
1  8.32    0.727
> 
> # if data.frame argument is not given, different information is present in
> # output
> pfit2 <- pyears(Surv(ptime/365.25, pstat) ~ temp.yr + temp.age + sex,  mgus)
> tidy(pfit2)
# A tibble: 37 x 402
   pyears.34.female pyears.35.female pyears.36.female pyears.37.female
              <dbl>            <dbl>            <dbl>            <dbl>
 1                0                0                0                0
 2                0                0                0                0
 3                0                0                0                0
 4                0                0                0                0
 5                0                0                0                0
 6                0                0                0                0
 7                0                0                0                0
 8                0                0                0                0
 9                0                0                0                0
10                0                0                0                0
# â€¦ with 27 more rows, and 398 more variables: pyears.38.female <dbl>,
#   pyears.39.female <dbl>, pyears.40.female <dbl>, pyears.41.female <dbl>,
#   pyears.42.female <dbl>, pyears.43.female <dbl>, pyears.44.female <dbl>,
#   pyears.45.female <dbl>, pyears.46.female <dbl>, pyears.47.female <dbl>,
#   pyears.48.female <dbl>, pyears.49.female <dbl>, pyears.50.female <dbl>,
#   pyears.51.female <dbl>, pyears.52.female <dbl>, pyears.53.female <dbl>,
#   pyears.54.female <dbl>, pyears.55.female <dbl>, pyears.56.female <dbl>,
#   pyears.57.female <dbl>, pyears.58.female <dbl>, pyears.59.female <dbl>,
#   pyears.60.female <dbl>, pyears.61.female <dbl>, pyears.62.female <dbl>,
#   pyears.63.female <dbl>, pyears.64.female <dbl>, pyears.65.female <dbl>,
#   pyears.66.female <dbl>, pyears.67.female <dbl>, pyears.68.female <dbl>,
#   pyears.69.female <dbl>, pyears.70.female <dbl>, pyears.71.female <dbl>,
#   pyears.72.female <dbl>, pyears.73.female <dbl>, pyears.74.female <dbl>,
#   pyears.75.female <dbl>, pyears.76.female <dbl>, pyears.77.female <dbl>,
#   pyears.78.female <dbl>, pyears.79.female <dbl>, pyears.80.female <dbl>,
#   pyears.81.female <dbl>, pyears.82.female <dbl>, pyears.83.female <dbl>,
#   pyears.84.female <dbl>, pyears.85.female <dbl>, pyears.86.female <dbl>,
#   pyears.87.female <dbl>, pyears.88.female <dbl>, pyears.89.female <dbl>,
#   pyears.90.female <dbl>, pyears.91.female <dbl>, pyears.92.female <dbl>,
#   pyears.93.female <dbl>, pyears.94.female <dbl>, pyears.95.female <dbl>,
#   pyears.96.female <dbl>, pyears.97.female <dbl>, pyears.98.female <dbl>,
#   pyears.99.female <dbl>, pyears.100.female <dbl>, pyears.34.male <dbl>,
#   pyears.35.male <dbl>, pyears.36.male <dbl>, pyears.37.male <dbl>,
#   pyears.38.male <dbl>, pyears.39.male <dbl>, pyears.40.male <dbl>,
#   pyears.41.male <dbl>, pyears.42.male <dbl>, pyears.43.male <dbl>,
#   pyears.44.male <dbl>, pyears.45.male <dbl>, pyears.46.male <dbl>,
#   pyears.47.male <dbl>, pyears.48.male <dbl>, pyears.49.male <dbl>,
#   pyears.50.male <dbl>, pyears.51.male <dbl>, pyears.52.male <dbl>,
#   pyears.53.male <dbl>, pyears.54.male <dbl>, pyears.55.male <dbl>,
#   pyears.56.male <dbl>, pyears.57.male <dbl>, pyears.58.male <dbl>,
#   pyears.59.male <dbl>, pyears.60.male <dbl>, pyears.61.male <dbl>,
#   pyears.62.male <dbl>, pyears.63.male <dbl>, pyears.64.male <dbl>,
#   pyears.65.male <dbl>, pyears.66.male <dbl>, pyears.67.male <dbl>,
#   pyears.68.male <dbl>, pyears.69.male <dbl>, pyears.70.male <dbl>, â€¦
> glance(pfit2)
# A tibble: 1 x 2
  total offtable
  <dbl>    <dbl>
1  8.32    0.727
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:survivalâ€™

> nameEx("tidy.rcorr")
> ### * tidy.rcorr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.rcorr
> ### Title: Tidy a(n) rcorr object
> ### Aliases: tidy.rcorr rcorr_tidiers Hmisc_tidiers
> 
> ### ** Examples
> 
> 
> if (requireNamespace("Hmisc", quietly = TRUE)) {
+ 
+     library(Hmisc)
+     
+     mat <- replicate(52, rnorm(100))
+     # add some NAs
+     mat[sample(length(mat), 2000)] <- NA
+     # also column names
+     colnames(mat) <- c(LETTERS, letters)
+ 
+     rc <- rcorr(mat)
+ 
+     td <- tidy(rc)
+     td
+ 
+     library(ggplot2)
+     ggplot(td, aes(p.value)) +
+         geom_histogram(binwidth = .1)
+ 
+     ggplot(td, aes(estimate, p.value)) +
+         geom_point() +
+         scale_y_log10()
+ }
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: â€˜Hmiscâ€™

The following objects are masked from â€˜package:baseâ€™:

    format.pval, units

> 
> 
> 
> 
> cleanEx()

detaching â€˜package:Hmiscâ€™, â€˜package:ggplot2â€™, â€˜package:Formulaâ€™,
  â€˜package:survivalâ€™, â€˜package:latticeâ€™

> nameEx("tidy.ridgelm")
> ### * tidy.ridgelm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.ridgelm
> ### Title: Tidy a(n) ridgelm object
> ### Aliases: tidy.ridgelm ridgelm_tidiers
> 
> ### ** Examples
> 
> 
> names(longley)[1] <- "y"
> fit1 <- MASS::lm.ridge(y ~ ., longley)
> tidy(fit1)
# A tibble: 6 x 5
  lambda term         estimate scale     xm
   <dbl> <chr>           <dbl> <dbl>  <dbl>
1      0 GNP            25.4   96.2   388. 
2      0 Unemployed      3.30  90.5   319. 
3      0 Armed.Forces    0.752 67.4   261. 
4      0 Population    -11.7    6.74  117. 
5      0 Year           -6.54   4.61 1954. 
6      0 Employed        0.786  3.40   65.3
> 
> fit2 <- MASS::lm.ridge(y ~ ., longley, lambda = seq(0.001, .05, .001))
> td2 <- tidy(fit2)
> g2 <- glance(fit2)
> 
> # coefficient plot
> library(ggplot2)
> ggplot(td2, aes(lambda, estimate, color = term)) +
+   geom_line()
> 
> # GCV plot
> ggplot(td2, aes(lambda, GCV)) +
+   geom_line()
> 
> # add line for the GCV minimizing estimate
> ggplot(td2, aes(lambda, GCV)) + 
+   geom_line() +
+   geom_vline(xintercept = g2$lambdaGCV, col = "red", lty = 2)
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™

> nameEx("tidy.roc")
> ### * tidy.roc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.roc
> ### Title: Tidy a(n) roc object
> ### Aliases: tidy.roc auc_tidiers roc_tidiers
> 
> ### ** Examples
> 
> 
> if (require("AUC", quietly = TRUE)) {
+   data(churn)
+   r <- roc(churn$predictions,churn$labels)
+ 
+   td <- tidy(r)
+   td
+ 
+   library(ggplot2)
+   
+   ggplot(td, aes(fpr, tpr)) +
+     geom_line()
+ 
+   # compare the ROC curves for two prediction algorithms
+   
+   library(dplyr)
+   library(tidyr)
+ 
+   rocs <- churn %>%
+     gather(algorithm, value, -labels) %>%
+     nest(-algorithm) %>% 
+     mutate(tidy_roc = purrr::map(data, ~tidy(roc(.x$value, .x$labels)))) %>% 
+     unnest(tidy_roc)
+ 
+   ggplot(rocs, aes(fpr, tpr, color = algorithm)) +
+     geom_line()
+ }
AUC 0.3.0
Type AUCNews() to see the change log and ?AUC to get an overview.

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

> 
> 
> 
> 
> cleanEx()

detaching â€˜package:tidyrâ€™, â€˜package:dplyrâ€™, â€˜package:ggplot2â€™,
  â€˜package:AUCâ€™

> nameEx("tidy.spec")
> ### * tidy.spec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.spec
> ### Title: Tidy a(n) spec object
> ### Aliases: tidy.spec
> 
> ### ** Examples
> 
> 
> spc <- spectrum(lh)
> tidy(spc)
# A tibble: 24 x 2
     freq   spec
    <dbl>  <dbl>
 1 0.0208 0.0912
 2 0.0417 0.331 
 3 0.0625 0.836 
 4 0.0833 1.17  
 5 0.104  0.350 
 6 0.125  1.51  
 7 0.146  0.328 
 8 0.167  0.618 
 9 0.188  0.320 
10 0.208  0.0675
# â€¦ with 14 more rows
> 
> library(ggplot2)
> ggplot(tidy(spc), aes(freq, spec)) +
+   geom_line()
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™

> nameEx("tidy.speedlm")
> ### * tidy.speedlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.speedlm
> ### Title: Tidy a(n) speedlm object
> ### Aliases: tidy.speedlm speedlm_tidiers speedglm_tidiers
> 
> ### ** Examples
> 
> 
> mod <- speedglm::speedlm(mpg ~ wt + qsec, data = mtcars)
> 
> tidy(mod)
# A tibble: 3 x 5
  term        estimate std.error statistic  p.value
  <chr>          <dbl>     <dbl>     <dbl>    <dbl>
1 (Intercept)   19.7       5.25       3.76 7.65e- 4
2 wt            -5.05      0.484    -10.4  2.52e-11
3 qsec           0.929     0.265      3.51 1.50e- 3
> glance(mod)
# A tibble: 1 x 10
  r.squared adj.r.squared statistic  p.value    df logLik   AIC   BIC
      <dbl>         <dbl>     <dbl>    <dbl> <int>  <dbl> <dbl> <dbl>
1     0.826         0.814      69.0 9.39e-12     3  -74.4  157.  163.
# â€¦ with 2 more variables: df.residual <int>, deviance <dbl>
> augment(mod)
# A tibble: 32 x 5
   .rownames           mpg    wt  qsec .fitted
   <chr>             <dbl> <dbl> <dbl>   <dbl>
 1 Mazda RX4          21    2.62  16.5    21.8
 2 Mazda RX4 Wag      21    2.88  17.0    21.0
 3 Datsun 710         22.8  2.32  18.6    25.3
 4 Hornet 4 Drive     21.4  3.22  19.4    21.6
 5 Hornet Sportabout  18.7  3.44  17.0    18.2
 6 Valiant            18.1  3.46  20.2    21.1
 7 Duster 360         14.3  3.57  15.8    16.4
 8 Merc 240D          24.4  3.19  20      22.2
 9 Merc 230           22.8  3.15  22.9    25.1
10 Merc 280           19.2  3.44  18.3    19.4
# â€¦ with 22 more rows
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.survdiff")
> ### * tidy.survdiff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.survdiff
> ### Title: Tidy a(n) survdiff object
> ### Aliases: tidy.survdiff survdiff_tidiers
> 
> ### ** Examples
> 
> 
> library(survival)
> 
> s <- survdiff(
+   Surv(time, status) ~ pat.karno + strata(inst),
+   data = lung
+ )
> 
> tidy(s)
# A tibble: 8 x 4
  pat.karno     N   obs    exp
  <chr>     <dbl> <dbl>  <dbl>
1 30            2     1  0.692
2 40            2     1  1.10 
3 50            4     4  1.17 
4 60           30    27 16.3  
5 70           41    31 26.4  
6 80           50    38 41.9  
7 90           60    38 47.2  
8 100          35    21 26.2  
> glance(s)
# A tibble: 1 x 3
  statistic    df p.value
      <dbl> <dbl>   <dbl>
1      21.4     7 0.00326
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:survivalâ€™

> nameEx("tidy.survexp")
> ### * tidy.survexp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.survexp
> ### Title: Tidy a(n) survexp object
> ### Aliases: tidy.survexp sexpfit_tidiers survexp_tidiers
> 
> ### ** Examples
> 
> 
> library(survival)
> sexpfit <- survexp(
+   futime ~ 1,
+   rmap = list(
+     sex = "male",
+     year = accept.dt,
+     age = (accept.dt - birth.dt)
+   ),
+   method = 'conditional',
+   data = jasa
+ )
> 
> tidy(sexpfit)
# A tibble: 88 x 3
    time estimate n.risk
   <dbl>    <dbl>  <int>
 1     0    1        102
 2     1    1.000    102
 3     2    1.000     99
 4     4    1.000     96
 5     5    1.000     94
 6     7    1.000     92
 7     8    1.000     91
 8    10    1.000     90
 9    11    1.000     89
10    15    1.000     88
# â€¦ with 78 more rows
> glance(sexpfit)
# A tibble: 1 x 3
  n.max n.start timepoints
  <int>   <int>      <int>
1   102     102         88
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:survivalâ€™

> nameEx("tidy.survfit")
> ### * tidy.survfit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.survfit
> ### Title: Tidy a(n) survfit object
> ### Aliases: tidy.survfit survfit_tidiers
> 
> ### ** Examples
> 
> 
> library(survival)
> cfit <- coxph(Surv(time, status) ~ age + sex, lung)
> sfit <- survfit(cfit)
> 
> tidy(sfit)
# A tibble: 186 x 8
    time n.risk n.event n.censor estimate std.error conf.high conf.low
   <dbl>  <dbl>   <dbl>    <dbl>    <dbl>     <dbl>     <dbl>    <dbl>
 1     5    228       1        0    0.996   0.00419     1        0.988
 2    11    227       3        0    0.983   0.00845     1.000    0.967
 3    12    224       1        0    0.979   0.00947     0.997    0.961
 4    13    223       2        0    0.971   0.0113      0.992    0.949
 5    15    221       1        0    0.966   0.0121      0.990    0.944
 6    26    220       1        0    0.962   0.0129      0.987    0.938
 7    30    219       1        0    0.958   0.0136      0.984    0.933
 8    31    218       1        0    0.954   0.0143      0.981    0.927
 9    53    217       2        0    0.945   0.0157      0.975    0.917
10    54    215       1        0    0.941   0.0163      0.972    0.911
# â€¦ with 176 more rows
> glance(sfit)
# A tibble: 1 x 9
  records n.max n.start events rmean rmean.std.error median conf.low conf.high
    <dbl> <dbl>   <dbl>  <dbl> <dbl>           <dbl>  <dbl>    <dbl>     <dbl>
1     228   228     228    165  381.            20.3    320      285       363
> 
> library(ggplot2)
> ggplot(tidy(sfit), aes(time, estimate)) + geom_line() +
+     geom_ribbon(aes(ymin=conf.low, ymax=conf.high), alpha=.25)
> 
> # multi-state
> fitCI <- survfit(Surv(stop, status * as.numeric(event), type = "mstate") ~ 1,
+               data = mgus1, subset = (start == 0))
> td_multi <- tidy(fitCI)
> td_multi
# A tibble: 474 x 9
    time n.risk n.event n.censor estimate std.error conf.high conf.low state
   <dbl>  <int>   <int>    <int>    <dbl>     <dbl>     <dbl>    <dbl> <fct>
 1     6      0       0        0        0         0        NA       NA 2    
 2     7      0       0        0        0         0        NA       NA 2    
 3    31      0       0        0        0         0        NA       NA 2    
 4    32      0       0        0        0         0        NA       NA 2    
 5    39      0       0        0        0         0        NA       NA 2    
 6    60      0       0        0        0         0        NA       NA 2    
 7    61      0       0        0        0         0        NA       NA 2    
 8   152      0       0        0        0         0        NA       NA 2    
 9   153      0       0        0        0         0        NA       NA 2    
10   174      0       0        0        0         0        NA       NA 2    
# â€¦ with 464 more rows
> 
> ggplot(td_multi, aes(time, estimate, group = state)) +
+     geom_line(aes(color = state)) +
+     geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .25)
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:survivalâ€™

> nameEx("tidy.survreg")
> ### * tidy.survreg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.survreg
> ### Title: Tidy a(n) survreg object
> ### Aliases: tidy.survreg survreg_tidiers
> 
> ### ** Examples
> 
> 
> library(survival)
> 
> sr <- survreg(
+   Surv(futime, fustat) ~ ecog.ps + rx,
+   ovarian,
+   dist = "exponential"
+ )
> 
> td <- tidy(sr)
> augment(sr, ovarian)
# A tibble: 26 x 9
   futime fustat   age resid.ds    rx ecog.ps .fitted .se.fit .resid
    <dbl>  <dbl> <dbl>    <dbl> <dbl>   <dbl>   <dbl>   <dbl>  <dbl>
 1     59      1  72.3        2     1       1   1224.    639. -1165.
 2    115      1  74.5        2     1       1   1224.    639. -1109.
 3    156      1  66.5        2     1       2    794.    350.  -638.
 4    421      0  53.4        2     2       1   2190.   1202. -1769.
 5    431      1  50.3        2     1       1   1224.    639.  -793.
 6    448      0  56.4        1     1       2    794.    350.  -346.
 7    464      1  56.9        2     2       2   1420.    741.  -956.
 8    475      1  59.9        2     2       2   1420.    741.  -945.
 9    477      0  64.2        2     1       1   1224.    639.  -747.
10    563      1  55.2        1     2       2   1420.    741.  -857.
# â€¦ with 16 more rows
> glance(sr)
# A tibble: 1 x 9
   iter    df statistic p.value logLik   AIC   BIC deviance df.residual
  <int> <int>     <dbl>   <dbl>  <dbl> <dbl> <dbl>    <dbl>       <int>
1     4     3      1.67   0.434  -97.2  200.  204.     34.0          23
> 
> # coefficient plot
> library(ggplot2)
> ggplot(td, aes(estimate, term)) + 
+   geom_point() +
+   geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0) +
+   geom_vline(xintercept = 0)
Warning: Removed 3 rows containing missing values (geom_errorbarh).
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:survivalâ€™

> nameEx("tidy.table")
> ### * tidy.table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.table
> ### Title: Tidy a(n) table object
> ### Aliases: tidy.table
> 
> ### ** Examples
> 
> 
> tab <- with(airquality, table(Temp = cut(Temp, quantile(Temp)), Month))
> tidy(tab)
# A tibble: 20 x 3
   Temp    Month     n
   <chr>   <chr> <int>
 1 (56,72] 5        24
 2 (72,79] 5         5
 3 (79,85] 5         1
 4 (85,97] 5         0
 5 (56,72] 6         3
 6 (72,79] 6        15
 7 (79,85] 6         7
 8 (85,97] 6         5
 9 (56,72] 7         0
10 (72,79] 7         2
11 (79,85] 7        19
12 (85,97] 7        10
13 (56,72] 8         1
14 (72,79] 8         9
15 (79,85] 8         7
16 (85,97] 8        14
17 (56,72] 9        10
18 (72,79] 9        10
19 (79,85] 9         5
20 (85,97] 9         5
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.ts")
> ### * tidy.ts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.ts
> ### Title: Tidy a(n) ts object
> ### Aliases: tidy.ts
> 
> ### ** Examples
> 
> 
> set.seed(678)
> 
> tidy(ts(1:10, frequency = 4, start = c(1959, 2)))
# A tibble: 10 x 2
   index value
   <dbl> <int>
 1 1959.     1
 2 1960.     2
 3 1960.     3
 4 1960      4
 5 1960.     5
 6 1960.     6
 7 1961.     7
 8 1961      8
 9 1961.     9
10 1962.    10
> 
> z <- ts(matrix(rnorm(300), 100, 3), start = c(1961, 1), frequency = 12)
> colnames(z) <- c("Aa", "Bb", "Cc")
> tidy(z)
# A tibble: 300 x 3
   index series  value
   <dbl> <chr>   <dbl>
 1 1961  Aa     -0.773
 2 1961. Aa      0.933
 3 1961. Aa      0.466
 4 1961. Aa     -1.08 
 5 1961. Aa     -2.16 
 6 1961. Aa     -0.719
 7 1962. Aa      1.04 
 8 1962. Aa      0.545
 9 1962. Aa     -0.606
10 1962. Aa      0.774
# â€¦ with 290 more rows
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy.zoo")
> ### * tidy.zoo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.zoo
> ### Title: Tidy a(n) zoo object
> ### Aliases: tidy.zoo zoo_tidiers
> 
> ### ** Examples
> 
> 
> library(zoo)

Attaching package: â€˜zooâ€™

The following objects are masked from â€˜package:baseâ€™:

    as.Date, as.Date.numeric

> library(ggplot2)
> 
> set.seed(1071)
> 
> # data generated as shown in the zoo vignette
> Z.index <- as.Date(sample(12450:12500, 10))
> Z.data <- matrix(rnorm(30), ncol = 3)
> colnames(Z.data) <- c("Aa", "Bb", "Cc")
> Z <- zoo(Z.data, Z.index)
> 
> tidy(Z)
# A tibble: 30 x 3
   index      series   value
   <date>     <chr>    <dbl>
 1 2004-02-02 Aa     -0.537 
 2 2004-02-06 Aa     -0.586 
 3 2004-02-08 Aa     -0.289 
 4 2004-02-12 Aa      1.85  
 5 2004-02-14 Aa      0.113 
 6 2004-02-18 Aa      0.313 
 7 2004-02-19 Aa      0.0950
 8 2004-02-25 Aa      0.489 
 9 2004-03-03 Aa      0.397 
10 2004-03-17 Aa      0.0196
# â€¦ with 20 more rows
> 
> ggplot(tidy(Z), aes(index, value, color = series)) +
+   geom_line()
>   
> ggplot(tidy(Z), aes(index, value)) +
+   geom_line() +
+   facet_wrap(~ series, ncol = 1)
> 
> Zrolled <- rollmean(Z, 5)
> ggplot(tidy(Zrolled), aes(index, value, color = series)) +
+   geom_line()
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:ggplot2â€™, â€˜package:zooâ€™

> nameEx("tidy_optim")
> ### * tidy_optim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy_optim
> ### Title: Tidy a(n) optim object masquerading as list
> ### Aliases: tidy_optim optim_tidiers tidy.optim
> 
> ### ** Examples
> 
> 
> func <- function(x) {
+     (x[1] - 2)^2 + (x[2] - 3)^2 + (x[3] - 8)^2
+ }
> 
> o <- optim(c(1, 1, 1), func)
> 
> tidy(o)
# A tibble: 3 x 2
  parameter  value
  <chr>      <dbl>
1 parameter1  2.00
2 parameter2  3.00
3 parameter3  8.00
> glance(o)
# A tibble: 1 x 4
        value function.count gradient.count convergence
        <dbl>          <int>          <int>       <int>
1 0.000000368            144             NA           0
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy_svd")
> ### * tidy_svd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy_svd
> ### Title: Tidy a(n) svd object masquerading as list
> ### Aliases: tidy_svd svd_tidiers
> 
> ### ** Examples
> 
> 
> mat <- scale(as.matrix(iris[, 1:4]))
> s <- svd(mat)
> 
> tidy_u <- tidy(s, matrix = "u")
> tidy_u
# A tibble: 600 x 3
     row    PC   value
   <int> <int>   <dbl>
 1     1     1 -0.108 
 2     2     1 -0.0995
 3     3     1 -0.113 
 4     4     1 -0.110 
 5     5     1 -0.114 
 6     6     1 -0.0992
 7     7     1 -0.117 
 8     8     1 -0.107 
 9     9     1 -0.112 
10    10     1 -0.104 
# â€¦ with 590 more rows
> 
> tidy_d <- tidy(s, matrix = "d")
> tidy_d
# A tibble: 4 x 4
     PC std.dev percent cumulative
  <int>   <dbl>   <dbl>      <dbl>
1     1   20.9  0.730        0.730
2     2   11.7  0.229        0.958
3     3    4.68 0.0367       0.995
4     4    1.76 0.00518      1    
> 
> tidy_v <- tidy(s, matrix = "v")
> tidy_v
# A tibble: 16 x 3
   column    PC   value
    <int> <int>   <dbl>
 1      1     1  0.521 
 2      2     1 -0.269 
 3      3     1  0.580 
 4      4     1  0.565 
 5      1     2 -0.377 
 6      2     2 -0.923 
 7      3     2 -0.0245
 8      4     2 -0.0669
 9      1     3  0.720 
10      2     3 -0.244 
11      3     3 -0.142 
12      4     3 -0.634 
13      1     4  0.261 
14      2     4 -0.124 
15      3     4 -0.801 
16      4     4  0.524 
> 
> library(ggplot2)
> library(dplyr)

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

> 
> ggplot(tidy_d, aes(PC, percent)) +
+     geom_point() +
+     ylab("% of variance explained")
> 
> tidy_u %>%
+     mutate(Species = iris$Species[row]) %>%
+     ggplot(aes(Species, value)) +
+     geom_boxplot() +
+     facet_wrap(~ PC, scale = "free_y")
> 
> 
> 
> 
> 
> cleanEx()

detaching â€˜package:dplyrâ€™, â€˜package:ggplot2â€™

> nameEx("tidy_xyz")
> ### * tidy_xyz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy_xyz
> ### Title: Tidy a(n) xyz object masquerading as list
> ### Aliases: tidy_xyz xyz_tidiers
> 
> ### ** Examples
> 
> 
> A <- list(x = 1:5, y = 1:3, z = matrix(runif(5 * 3), nrow = 5))
> image(A)
> tidy(A)
# A tibble: 15 x 3
       x     y      z
   <int> <int>  <dbl>
 1     1     1 0.266 
 2     2     1 0.372 
 3     3     1 0.573 
 4     4     1 0.908 
 5     5     1 0.202 
 6     1     2 0.898 
 7     2     2 0.945 
 8     3     2 0.661 
 9     4     2 0.629 
10     5     2 0.0618
11     1     3 0.206 
12     2     3 0.177 
13     3     3 0.687 
14     4     3 0.384 
15     5     3 0.770 
> 
> 
> 
> 
> cleanEx()
> nameEx("vector_tidiers")
> ### * vector_tidiers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy.numeric
> ### Title: Tidy atomic vectors
> ### Aliases: tidy.numeric tidy.character tidy.logical
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D x <- 1:5
> ##D names(x) <- letters[1:5]
> ##D tidy(x)
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  27.339 0.416 27.949 0.002 0.008 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
