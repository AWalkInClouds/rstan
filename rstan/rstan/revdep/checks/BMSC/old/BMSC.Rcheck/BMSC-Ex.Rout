
R Under development (unstable) (2019-04-20 r76407) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "BMSC"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('BMSC')
Loading required package: Rcpp
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("addInteractionToVars")
> ### * addInteractionToVars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addInteractionToVars
> ### Title: Add interactions of a specific order to a vector of variables
> ### Aliases: addInteractionToVars
> 
> ### ** Examples
> 
> BMSC:::addInteractionToVars(3, c("x1", "x2", "x3"))
[1] "x1:x2:x3"
> 
> 
> 
> cleanEx()
> nameEx("addPowToVars")
> ### * addPowToVars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addPowToVars
> ### Title: Add exponent to a vector of variables
> ### Aliases: addPowToVars
> 
> ### ** Examples
> 
> BMSC:::addPowToVars(c("x1", "x2"), 2)
[1] "I(x1^2)" "I(x2^2)"
> 
> 
> 
> cleanEx()
> nameEx("constrSelEst")
> ### * constrSelEst
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: constrSelEst
> ### Title: Model selection algorithm for constrained estimation
> ### Aliases: constrSelEst
> 
> ### ** Examples
> 
> ## Not run: 
> ##D suppressWarnings(RNGversion("3.5.0"))
> ##D set.seed(44)
> ##D n <- 80
> ##D x1 <- rnorm(n, sd = 1)
> ##D x2 <- rnorm(n, sd = 1)
> ##D x3 <- rnorm(n, sd = 1)
> ##D y <- 0.4 + 0.3 * x1 + 0.3 * x1 * x3 + 0.4 * x1 ^ 2 * x2 ^ 3 + rnorm(n, sd = 0.3)
> ##D yUncertainty <- rexp(n, 10) * 0.01
> ##D #optional (slow)
> ##D #xUncertainty <- data.frame(x3 = rep(0.1, n), x1 = rep(0.1, n), x2 = rep(1, n))
> ##D data <- data.frame(x1, x2, x3, y, yUncertainty)
> ##D models <- constrSelEst(y ~ x1 + x2 + x3, mustInclude = "x1", maxExponent = 3,
> ##D                        interactionDepth = 3, intercept = TRUE,
> ##D                        constraint_1 = TRUE, data = data,
> ##D                        yUncertainty = yUncertainty,
> ##D                        xUncertainty = NULL,
> ##D                        maxNumTerms = 10)
> ##D plotModelFit(models)
> ##D bestModel <- getBestModel(models, thresholdSE = 2)
> ##D print(bestModel)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("createFormula")
> ### * createFormula
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createFormula
> ### Title: Create a formula with interactions and polynomials up to a
> ###   desired order
> ### Aliases: createFormula
> 
> ### ** Examples
> 
> createFormula("y ~ x1 + x2", 2, 3)
y ~ x1 + x2 + I(x1^2) + I(x2^2) + x1:x2 + I(x2^2):x1 + I(x1^2):x2 + 
    I(x1^2):I(x2^2)
<environment: 0x555d5cc68ff8>
> createFormula(as.formula("y ~ x1 + x2"), interactionDepth = 2)
y ~ x1 + x2 + x1:x2
<environment: 0x555d5cf1cd50>
> 
> carFormula <- createFormula("mpg ~ cyl + disp + drat", 2, 3)
> summary(lm(carFormula, mtcars))

Call:
lm(formula = carFormula, data = mtcars)

Residuals:
    Min      1Q  Median      3Q     Max 
-2.7157 -0.1859  0.0000  0.1735  2.4789 

Coefficients: (4 not defined because of singularities)
                               Estimate Std. Error t value Pr(>|t|)
(Intercept)                   1.279e+05  1.091e+05   1.172    0.271
cyl                          -4.004e+04  3.558e+04  -1.125    0.290
disp                         -7.417e+02  5.926e+02  -1.252    0.242
drat                         -6.142e+04  5.251e+04  -1.170    0.272
I(cyl^2)                      2.914e+03  2.780e+03   1.048    0.322
I(disp^2)                     3.304e+00  2.688e+00   1.229    0.250
I(drat^2)                     8.122e+03  7.035e+03   1.155    0.278
cyl:disp                      1.308e+02  1.059e+02   1.234    0.248
cyl:drat                      1.901e+04  1.695e+04   1.122    0.291
cyl:I(disp^2)                -5.202e-01  4.283e-01  -1.215    0.255
cyl:I(drat^2)                -2.532e+03  2.291e+03  -1.105    0.298
disp:drat                     3.081e+02  2.438e+02   1.264    0.238
disp:I(cyl^2)                -4.362e+00  4.284e+00  -1.018    0.335
disp:I(drat^2)               -3.957e+01  3.168e+01  -1.249    0.243
drat:I(cyl^2)                -1.367e+03  1.323e+03  -1.033    0.328
drat:I(disp^2)               -1.487e+00  1.205e+00  -1.234    0.248
I(cyl^2):I(disp^2)            1.304e-02  1.219e-02   1.070    0.313
I(cyl^2):I(drat^2)            1.831e+02  1.809e+02   1.012    0.338
I(disp^2):I(drat^2)           1.925e-01  1.561e-01   1.233    0.249
cyl:disp:drat                -4.013e+01  3.149e+01  -1.274    0.235
cyl:disp:I(drat^2)            5.141e+00  4.161e+00   1.236    0.248
cyl:drat:I(disp^2)            1.872e-01  1.511e-01   1.239    0.247
cyl:I(disp^2):I(drat^2)      -2.419e-02  1.961e-02  -1.233    0.249
disp:drat:I(cyl^2)                   NA         NA      NA       NA
disp:I(cyl^2):I(drat^2)              NA         NA      NA       NA
drat:I(cyl^2):I(disp^2)              NA         NA      NA       NA
I(cyl^2):I(disp^2):I(drat^2)         NA         NA      NA       NA

Residual standard error: 2.073 on 9 degrees of freedom
Multiple R-squared:  0.9656,	Adjusted R-squared:  0.8816 
F-statistic:  11.5 on 22 and 9 DF,  p-value: 0.000343

> 
> 
> 
> cleanEx()
> nameEx("extractVarname")
> ### * extractVarname
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extractVarname
> ### Title: Extract variable name from polynomial expression
> ### Aliases: extractVarname
> 
> ### ** Examples
> 
> BMSC:::extractVarname(c("x1",
+ "I(x2^2)"))
[1] "x1" "x2"
> 
> 
> 
> cleanEx()
> nameEx("makeInteractions")
> ### * makeInteractions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: makeInteractions
> ### Title: Add all interactions up to a desired order
> ### Aliases: makeInteractions
> 
> ### ** Examples
> 
> BMSC:::makeInteractions(vars = c("x1", "x2",
+ "I(x1^2)", "I(x2^2)"), interactionDepth = 3)
[1] "x1"              "x2"              "I(x1^2)"         "I(x2^2)"        
[5] "x1:x2"           "I(x2^2):x1"      "I(x1^2):x2"      "I(x1^2):I(x2^2)"
> 
> 
> 
> cleanEx()
> nameEx("makePoly")
> ### * makePoly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: makePoly
> ### Title: Create polynomial of degree 'maxExponent' from variable names
> ### Aliases: makePoly
> 
> ### ** Examples
> 
> BMSC:::makePoly(vars = c("x1", "x2"), maxExponent = 3)
[1] "x1"      "x2"      "I(x1^2)" "I(x2^2)" "I(x1^3)" "I(x2^3)"
> 
> 
> 
> cleanEx()
> nameEx("sortAndPaste")
> ### * sortAndPaste
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sortAndPaste
> ### Title: Sort a vector and collapse elements together using ":"
> ### Aliases: sortAndPaste
> 
> ### ** Examples
> 
> BMSC:::sortAndPaste(c("var1", "var2"))
[1] "var1:var2"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.229 0.029 1.269 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
